
STM32VET6_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004930  08004930  00005930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800495c  0800495c  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  0800495c  0800495c  0000595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004964  08004964  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004964  08004964  00005964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004968  08004968  00005968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800496c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006070  2**0
                  CONTENTS
 10 .bss          000003c4  20000070  20000070  00006070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000434  20000434  00006070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da7f  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002792  00000000  00000000  00013b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  000162b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000939  00000000  00000000  00016ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022de5  00000000  00000000  00017801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d4b  00000000  00000000  0003a5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7661  00000000  00000000  0004d331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114992  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003608  00000000  00000000  001149d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00117fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004918 	.word	0x08004918

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004918 	.word	0x08004918

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <MX_CRC_Init+0x20>)
 80004be:	4a07      	ldr	r2, [pc, #28]	@ (80004dc <MX_CRC_Init+0x24>)
 80004c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <MX_CRC_Init+0x20>)
 80004c4:	f000 ffa3 	bl	800140e <HAL_CRC_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004ce:	f000 fa37 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2000008c 	.word	0x2000008c
 80004dc:	40023000 	.word	0x40023000

080004e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0b      	ldr	r2, [pc, #44]	@ (800051c <HAL_CRC_MspInit+0x3c>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d10d      	bne.n	800050e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <HAL_CRC_MspInit+0x40>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a09      	ldr	r2, [pc, #36]	@ (8000520 <HAL_CRC_MspInit+0x40>)
 80004fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <HAL_CRC_MspInit+0x40>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40023000 	.word	0x40023000
 8000520:	40023800 	.word	0x40023800

08000524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <MX_DMA_Init+0x3c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <MX_DMA_Init+0x3c>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <MX_DMA_Init+0x3c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2044      	movs	r0, #68	@ 0x44
 800054c:	f000 ff29 	bl	80013a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000550:	2044      	movs	r0, #68	@ 0x44
 8000552:	f000 ff42 	bl	80013da <HAL_NVIC_EnableIRQ>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40023800 	.word	0x40023800

08000564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <MX_GPIO_Init+0xe0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a30      	ldr	r2, [pc, #192]	@ (8000644 <MX_GPIO_Init+0xe0>)
 8000584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b2e      	ldr	r3, [pc, #184]	@ (8000644 <MX_GPIO_Init+0xe0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	4b2a      	ldr	r3, [pc, #168]	@ (8000644 <MX_GPIO_Init+0xe0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a29      	ldr	r2, [pc, #164]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2106      	movs	r1, #6
 80005ee:	4816      	ldr	r0, [pc, #88]	@ (8000648 <MX_GPIO_Init+0xe4>)
 80005f0:	f001 fce0 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80005f4:	2301      	movs	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480f      	ldr	r0, [pc, #60]	@ (8000648 <MX_GPIO_Init+0xe4>)
 800060a:	f001 fb1f 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800060e:	2306      	movs	r3, #6
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000616:	2301      	movs	r3, #1
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	4808      	ldr	r0, [pc, #32]	@ (8000648 <MX_GPIO_Init+0xe4>)
 8000626:	f001 fb11 	bl	8001c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2006      	movs	r0, #6
 8000630:	f000 feb7 	bl	80013a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000634:	2006      	movs	r0, #6
 8000636:	f000 fed0 	bl	80013da <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	@ 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000

0800064c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_I2C1_Init+0x50>)
 8000652:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <MX_I2C1_Init+0x54>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_I2C1_Init+0x50>)
 8000658:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <MX_I2C1_Init+0x58>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_I2C1_Init+0x50>)
 800066a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800066e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_I2C1_Init+0x50>)
 800068a:	f001 fcdf 	bl	800204c <HAL_I2C_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 f954 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000094 	.word	0x20000094
 80006a0:	40005400 	.word	0x40005400
 80006a4:	000186a0 	.word	0x000186a0

080006a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a19      	ldr	r2, [pc, #100]	@ (800072c <HAL_I2C_MspInit+0x84>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d12c      	bne.n	8000724 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a17      	ldr	r2, [pc, #92]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ec:	2312      	movs	r3, #18
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006f8:	2304      	movs	r3, #4
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <HAL_I2C_MspInit+0x8c>)
 8000704:	f001 faa2 	bl	8001c4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	4a07      	ldr	r2, [pc, #28]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 8000712:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000716:	6413      	str	r3, [r2, #64]	@ 0x40
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40005400 	.word	0x40005400
 8000730:	40023800 	.word	0x40023800
 8000734:	40020400 	.word	0x40020400

08000738 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8000740:	1d39      	adds	r1, r7, #4
 8000742:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000746:	2201      	movs	r2, #1
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <__io_putchar+0x20>)
 800074a:	f002 fa6b 	bl	8002c24 <HAL_UART_Transmit>
	return ch;
 800074e:	687b      	ldr	r3, [r7, #4]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000f0 	.word	0x200000f0

0800075c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_SET)
 8000766:	2101      	movs	r1, #1
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x44>)
 800076a:	f001 fc0b 	bl	8001f84 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d110      	bne.n	8000796 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		for(int temp = 65536*50;temp != 0;temp--);
 8000774:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e002      	b.n	8000782 <HAL_GPIO_EXTI_Callback+0x26>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3b01      	subs	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f9      	bne.n	800077c <HAL_GPIO_EXTI_Callback+0x20>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 8000788:	2104      	movs	r1, #4
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <HAL_GPIO_EXTI_Callback+0x44>)
 800078c:	f001 fc2b 	bl	8001fe6 <HAL_GPIO_TogglePin>
		at24_flag = 1;
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <HAL_GPIO_EXTI_Callback+0x48>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
	}
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40020000 	.word	0x40020000
 80007a4:	200000e8 	.word	0x200000e8

080007a8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <HAL_UARTEx_RxEventCallback+0x48>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d114      	bne.n	80007e6 <HAL_UARTEx_RxEventCallback+0x3e>
    {
    	rx_buffer[0] = Size;
 80007bc:	887b      	ldrh	r3, [r7, #2]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_UARTEx_RxEventCallback+0x4c>)
 80007c2:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 80007c4:	2104      	movs	r1, #4
 80007c6:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <HAL_UARTEx_RxEventCallback+0x50>)
 80007c8:	f001 fc0d 	bl	8001fe6 <HAL_GPIO_TogglePin>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer,BUF_SIZE);
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	4909      	ldr	r1, [pc, #36]	@ (80007f4 <HAL_UARTEx_RxEventCallback+0x4c>)
 80007d0:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <HAL_UARTEx_RxEventCallback+0x48>)
 80007d2:	f002 fab2 	bl	8002d3a <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_UARTEx_RxEventCallback+0x54>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <HAL_UARTEx_RxEventCallback+0x54>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f022 0208 	bic.w	r2, r2, #8
 80007e4:	601a      	str	r2, [r3, #0]
    }
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000f0 	.word	0x200000f0
 80007f4:	200001e0 	.word	0x200001e0
 80007f8:	40020000 	.word	0x40020000
 80007fc:	20000180 	.word	0x20000180

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fc5c 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f830 	bl	800086c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f7ff feaa 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 8000810:	f7ff fe88 	bl	8000524 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000814:	f000 f9c2 	bl	8000b9c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000818:	f7ff ff18 	bl	800064c <MX_I2C1_Init>
  MX_CRC_Init();
 800081c:	f7ff fe4c 	bl	80004b8 <MX_CRC_Init>
  MX_USART6_UART_Init();
 8000820:	f000 f9e6 	bl	8000bf0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer,BUF_SIZE);
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	490c      	ldr	r1, [pc, #48]	@ (8000858 <main+0x58>)
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <main+0x5c>)
 800082a:	f002 fa86 	bl	8002d3a <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 800082e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000832:	f000 fcb7 	bl	80011a4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
 8000836:	2102      	movs	r1, #2
 8000838:	4809      	ldr	r0, [pc, #36]	@ (8000860 <main+0x60>)
 800083a:	f001 fbd4 	bl	8001fe6 <HAL_GPIO_TogglePin>
//	  if(AT24CXX_WriteBuff[0] != 0){AT24CXX_WriteBuff[0] = 0;}
	  printf("ce shi\r\n");
 800083e:	4809      	ldr	r0, [pc, #36]	@ (8000864 <main+0x64>)
 8000840:	f003 fcd6 	bl	80041f0 <puts>
	  CMD_ReadButtonStatus(5,9);
 8000844:	2109      	movs	r1, #9
 8000846:	2005      	movs	r0, #5
 8000848:	f000 fb74 	bl	8000f34 <CMD_ReadButtonStatus>
	  printf("\r\n");
 800084c:	4806      	ldr	r0, [pc, #24]	@ (8000868 <main+0x68>)
 800084e:	f003 fccf 	bl	80041f0 <puts>
	  HAL_Delay(1000);
 8000852:	bf00      	nop
 8000854:	e7eb      	b.n	800082e <main+0x2e>
 8000856:	bf00      	nop
 8000858:	200001e0 	.word	0x200001e0
 800085c:	200000f0 	.word	0x200000f0
 8000860:	40020000 	.word	0x40020000
 8000864:	08004930 	.word	0x08004930
 8000868:	08004938 	.word	0x08004938

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	@ 0x50
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	2230      	movs	r2, #48	@ 0x30
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f003 fd98 	bl	80043b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <SystemClock_Config+0xcc>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	4a27      	ldr	r2, [pc, #156]	@ (8000938 <SystemClock_Config+0xcc>)
 800089a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089e:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a0:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <SystemClock_Config+0xcc>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	4b22      	ldr	r3, [pc, #136]	@ (800093c <SystemClock_Config+0xd0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a21      	ldr	r2, [pc, #132]	@ (800093c <SystemClock_Config+0xd0>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <SystemClock_Config+0xd0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2310      	movs	r3, #16
 80008d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d8:	2300      	movs	r3, #0
 80008da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008dc:	2308      	movs	r3, #8
 80008de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008e0:	23a8      	movs	r3, #168	@ 0xa8
 80008e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e8:	2304      	movs	r3, #4
 80008ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0320 	add.w	r3, r7, #32
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fcef 	bl	80022d4 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008fc:	f000 f820 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2302      	movs	r3, #2
 8000906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800090c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000910:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000916:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2105      	movs	r1, #5
 800091e:	4618      	mov	r0, r3
 8000920:	f001 ff50 	bl	80027c4 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800092a:	f000 f809 	bl	8000940 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3750      	adds	r7, #80	@ 0x50
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	@ 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <NMI_Handler+0x4>

080009a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <MemManage_Handler+0x4>

080009b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f2:	f000 fbb7 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}

080009fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WK_UP_Pin);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f001 fb0c 	bl	800201c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <USART1_IRQHandler+0x10>)
 8000a0e:	f002 f9f1 	bl	8002df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000f0 	.word	0x200000f0

08000a1c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a20:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <DMA2_Stream5_IRQHandler+0x10>)
 8000a22:	f000 fea9 	bl	8001778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000180 	.word	0x20000180

08000a30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e00a      	b.n	8000a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a42:	f3af 8000 	nop.w
 8000a46:	4601      	mov	r1, r0
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	60ba      	str	r2, [r7, #8]
 8000a4e:	b2ca      	uxtb	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697a      	ldr	r2, [r7, #20]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dbf0      	blt.n	8000a42 <_read+0x12>
  }

  return len;
 8000a60:	687b      	ldr	r3, [r7, #4]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	e009      	b.n	8000a90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fe57 	bl	8000738 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbf1      	blt.n	8000a7c <_write+0x12>
  }
  return len;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_close>:

int _close(int file)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aca:	605a      	str	r2, [r3, #4]
  return 0;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_isatty>:

int _isatty(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f003 fc86 	bl	800444c <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20020000 	.word	0x20020000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	200000ec 	.word	0x200000ec
 8000b74:	20000438 	.word	0x20000438

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <MX_USART1_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	f001 ffd6 	bl	8002b84 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f7ff feaf 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000f0 	.word	0x200000f0
 8000bec:	40011000 	.word	0x40011000

08000bf0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_USART6_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <MX_USART6_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <MX_USART6_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_USART6_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_USART6_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_USART6_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_USART6_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_USART6_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_USART6_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_USART6_UART_Init+0x4c>)
 8000c28:	f001 ffac 	bl	8002b84 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f7ff fe85 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000138 	.word	0x20000138
 8000c40:	40011400 	.word	0x40011400

08000c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	@ 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a50      	ldr	r2, [pc, #320]	@ (8000da4 <HAL_UART_MspInit+0x160>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d168      	bne.n	8000d38 <HAL_UART_MspInit+0xf4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */
  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	4b4f      	ldr	r3, [pc, #316]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c76:	4b4c      	ldr	r3, [pc, #304]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	4b48      	ldr	r3, [pc, #288]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a47      	ldr	r2, [pc, #284]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b45      	ldr	r3, [pc, #276]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c9e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	483c      	ldr	r0, [pc, #240]	@ (8000dac <HAL_UART_MspInit+0x168>)
 8000cbc:	f000 ffc6 	bl	8001c4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8000db4 <HAL_UART_MspInit+0x170>)
 8000cc4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000cc8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ccc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cce:	4b38      	ldr	r3, [pc, #224]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b36      	ldr	r3, [pc, #216]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b35      	ldr	r3, [pc, #212]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000cdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ce2:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ce8:	4b31      	ldr	r3, [pc, #196]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cee:	4b30      	ldr	r3, [pc, #192]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000cf6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cfa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d02:	482b      	ldr	r0, [pc, #172]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000d04:	f000 fba0 	bl	8001448 <HAL_DMA_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d0e:	f7ff fe17 	bl	8000940 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a26      	ldr	r2, [pc, #152]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000d16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d18:	4a25      	ldr	r2, [pc, #148]	@ (8000db0 <HAL_UART_MspInit+0x16c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2025      	movs	r0, #37	@ 0x25
 8000d24:	f000 fb3d 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d28:	2025      	movs	r0, #37	@ 0x25
 8000d2a:	f000 fb56 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 8000d2e:	2104      	movs	r1, #4
 8000d30:	481e      	ldr	r0, [pc, #120]	@ (8000dac <HAL_UART_MspInit+0x168>)
 8000d32:	f001 f958 	bl	8001fe6 <HAL_GPIO_TogglePin>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000d36:	e030      	b.n	8000d9a <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART6)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8000db8 <HAL_UART_MspInit+0x174>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000d4c:	f043 0320 	orr.w	r3, r3, #32
 8000d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	f003 0320 	and.w	r3, r3, #32
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_UART_MspInit+0x164>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7a:	23c0      	movs	r3, #192	@ 0xc0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d8a:	2308      	movs	r3, #8
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <HAL_UART_MspInit+0x178>)
 8000d96:	f000 ff59 	bl	8001c4c <HAL_GPIO_Init>
}
 8000d9a:	bf00      	nop
 8000d9c:	3730      	adds	r7, #48	@ 0x30
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40011000 	.word	0x40011000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000
 8000db0:	20000180 	.word	0x20000180
 8000db4:	40026488 	.word	0x40026488
 8000db8:	40011400 	.word	0x40011400
 8000dbc:	40020800 	.word	0x40020800

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dc4:	f7ff fed8 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	@ (8000e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	@ (8000e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dee:	f003 fb33 	bl	8004458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fd05 	bl	8000800 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e04:	0800496c 	.word	0x0800496c
  ldr r2, =_sbss
 8000e08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e0c:	20000434 	.word	0x20000434

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>
	...

08000e14 <frame_send>:



#define FRAME_SEND(head,tail) frame_send(head,tail,sizeof(head),sizeof(tail))
void frame_send(uint8_t* head,uint8_t* tail,uint8_t head_size,uint8_t tail_size)
{
 8000e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e18:	b089      	sub	sp, #36	@ 0x24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	4611      	mov	r1, r2
 8000e22:	461a      	mov	r2, r3
 8000e24:	460b      	mov	r3, r1
 8000e26:	71fb      	strb	r3, [r7, #7]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	71bb      	strb	r3, [r7, #6]
 8000e2c:	466b      	mov	r3, sp
 8000e2e:	461e      	mov	r6, r3
	uint8_t frame_size = head_size + tail_size + tx_num;
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	4413      	add	r3, r2
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b3b      	ldr	r3, [pc, #236]	@ (8000f28 <frame_send+0x114>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	777b      	strb	r3, [r7, #29]
	uint8_t frame[frame_size];
 8000e40:	7f79      	ldrb	r1, [r7, #29]
 8000e42:	460b      	mov	r3, r1
 8000e44:	3b01      	subs	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	b2cb      	uxtb	r3, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	4691      	mov	r9, r2
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e64:	b2cb      	uxtb	r3, r1
 8000e66:	2200      	movs	r2, #0
 8000e68:	461c      	mov	r4, r3
 8000e6a:	4615      	mov	r5, r2
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	00eb      	lsls	r3, r5, #3
 8000e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e7a:	00e2      	lsls	r2, r4, #3
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	3307      	adds	r3, #7
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	ebad 0d03 	sub.w	sp, sp, r3
 8000e88:	466b      	mov	r3, sp
 8000e8a:	3300      	adds	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
	uint8_t i,j = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	77bb      	strb	r3, [r7, #30]
	for(i = 0;i < head_size;i++,j++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	77fb      	strb	r3, [r7, #31]
 8000e96:	e00c      	b.n	8000eb2 <frame_send+0x9e>
	{
		frame[j] = head[i];
 8000e98:	7ffb      	ldrb	r3, [r7, #31]
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	441a      	add	r2, r3
 8000e9e:	7fbb      	ldrb	r3, [r7, #30]
 8000ea0:	7811      	ldrb	r1, [r2, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < head_size;i++,j++)
 8000ea6:	7ffb      	ldrb	r3, [r7, #31]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	77fb      	strb	r3, [r7, #31]
 8000eac:	7fbb      	ldrb	r3, [r7, #30]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	77bb      	strb	r3, [r7, #30]
 8000eb2:	7ffa      	ldrb	r2, [r7, #31]
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d3ee      	bcc.n	8000e98 <frame_send+0x84>
	}
	for(i = 0;i < tx_num;i++,j++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	77fb      	strb	r3, [r7, #31]
 8000ebe:	e00b      	b.n	8000ed8 <frame_send+0xc4>
	{
		frame[j] = tx_buffer[i];
 8000ec0:	7ffa      	ldrb	r2, [r7, #31]
 8000ec2:	7fbb      	ldrb	r3, [r7, #30]
 8000ec4:	4919      	ldr	r1, [pc, #100]	@ (8000f2c <frame_send+0x118>)
 8000ec6:	5c89      	ldrb	r1, [r1, r2]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < tx_num;i++,j++)
 8000ecc:	7ffb      	ldrb	r3, [r7, #31]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	77fb      	strb	r3, [r7, #31]
 8000ed2:	7fbb      	ldrb	r3, [r7, #30]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	77bb      	strb	r3, [r7, #30]
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <frame_send+0x114>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	7ffa      	ldrb	r2, [r7, #31]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d3ee      	bcc.n	8000ec0 <frame_send+0xac>
	}
	for(i = 0;i < tail_size;i++,j++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	77fb      	strb	r3, [r7, #31]
 8000ee6:	e00c      	b.n	8000f02 <frame_send+0xee>
	{
		frame[j] = tail[i];
 8000ee8:	7ffb      	ldrb	r3, [r7, #31]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	441a      	add	r2, r3
 8000eee:	7fbb      	ldrb	r3, [r7, #30]
 8000ef0:	7811      	ldrb	r1, [r2, #0]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < tail_size;i++,j++)
 8000ef6:	7ffb      	ldrb	r3, [r7, #31]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	77fb      	strb	r3, [r7, #31]
 8000efc:	7fbb      	ldrb	r3, [r7, #30]
 8000efe:	3301      	adds	r3, #1
 8000f00:	77bb      	strb	r3, [r7, #30]
 8000f02:	7ffa      	ldrb	r2, [r7, #31]
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d3ee      	bcc.n	8000ee8 <frame_send+0xd4>
	}
	HAL_UART_Transmit(&huart1,&frame,frame_size, 0xFFFF);
 8000f0a:	7f7b      	ldrb	r3, [r7, #29]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f12:	6979      	ldr	r1, [r7, #20]
 8000f14:	4806      	ldr	r0, [pc, #24]	@ (8000f30 <frame_send+0x11c>)
 8000f16:	f001 fe85 	bl	8002c24 <HAL_UART_Transmit>
 8000f1a:	46b5      	mov	sp, r6
}
 8000f1c:	bf00      	nop
 8000f1e:	3724      	adds	r7, #36	@ 0x24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f26:	bf00      	nop
 8000f28:	200002e0 	.word	0x200002e0
 8000f2c:	20000260 	.word	0x20000260
 8000f30:	200000f0 	.word	0x200000f0

08000f34 <CMD_ReadButtonStatus>:
}



void CMD_ReadButtonStatus(uint16_t parameter1,uint16_t parameter2)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	80fb      	strh	r3, [r7, #6]
 8000f40:	4613      	mov	r3, r2
 8000f42:	80bb      	strh	r3, [r7, #4]
	uint16_t cmd,param,crc16;
	tx_num = sizeof(cmd) + sizeof(parameter1)+sizeof(parameter2)+sizeof(crc16);
 8000f44:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <CMD_ReadButtonStatus+0x84>)
 8000f46:	2208      	movs	r2, #8
 8000f48:	701a      	strb	r2, [r3, #0]

	cmd  = CharReverse16(0xB111);
 8000f4a:	f24b 1011 	movw	r0, #45329	@ 0xb111
 8000f4e:	f000 f862 	bl	8001016 <CharReverse16>
 8000f52:	4603      	mov	r3, r0
 8000f54:	81fb      	strh	r3, [r7, #14]
	memcpy(&tx_buffer[0],(uint8_t*)&cmd,sizeof(cmd));
 8000f56:	89fa      	ldrh	r2, [r7, #14]
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <CMD_ReadButtonStatus+0x88>)
 8000f5a:	801a      	strh	r2, [r3, #0]

	param = CharReverse16(parameter1);
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f859 	bl	8001016 <CharReverse16>
 8000f64:	4603      	mov	r3, r0
 8000f66:	81bb      	strh	r3, [r7, #12]
	memcpy(&tx_buffer[2],(uint8_t*)&param,sizeof(parameter1));
 8000f68:	89ba      	ldrh	r2, [r7, #12]
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <CMD_ReadButtonStatus+0x88>)
 8000f6c:	805a      	strh	r2, [r3, #2]

	param = CharReverse16(parameter2);
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f850 	bl	8001016 <CharReverse16>
 8000f76:	4603      	mov	r3, r0
 8000f78:	81bb      	strh	r3, [r7, #12]
	memcpy(&tx_buffer[4],(uint8_t*)&param,sizeof(parameter2));
 8000f7a:	89ba      	ldrh	r2, [r7, #12]
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <CMD_ReadButtonStatus+0x88>)
 8000f7e:	809a      	strh	r2, [r3, #4]

	crc16 = ModBusCRC16(tx_buffer,tx_num-2);
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <CMD_ReadButtonStatus+0x84>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	3b02      	subs	r3, #2
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <CMD_ReadButtonStatus+0x88>)
 8000f8c:	f000 f858 	bl	8001040 <ModBusCRC16>
 8000f90:	4603      	mov	r3, r0
 8000f92:	817b      	strh	r3, [r7, #10]
	memcpy(&tx_buffer[tx_num-sizeof(crc16)],(uint8_t*)&crc16,sizeof(crc16));
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <CMD_ReadButtonStatus+0x84>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <CMD_ReadButtonStatus+0x88>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	897a      	ldrh	r2, [r7, #10]
 8000fa0:	801a      	strh	r2, [r3, #0]

	FRAME_SEND(dacai_head,dacai_tail);
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4906      	ldr	r1, [pc, #24]	@ (8000fc0 <CMD_ReadButtonStatus+0x8c>)
 8000fa8:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <CMD_ReadButtonStatus+0x90>)
 8000faa:	f7ff ff33 	bl	8000e14 <frame_send>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002e0 	.word	0x200002e0
 8000fbc:	20000260 	.word	0x20000260
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <BitReverse16>:
    }
    return revers;
}

uint16_t BitReverse16(uint16_t data)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
	uint16_t revers = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	e012      	b.n	8001002 <BitReverse16+0x3a>
    	revers = revers << 1;
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	81fb      	strh	r3, [r7, #14]
    	revers = revers | (data & 0x0001);
 8000fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	81fb      	strh	r3, [r7, #14]
        data >>= 1;
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < 16; i++) {
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	3301      	adds	r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	dde9      	ble.n	8000fdc <BitReverse16+0x14>
    }
    return revers;
 8001008:	89fb      	ldrh	r3, [r7, #14]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <CharReverse16>:
{
	return (data & 0x000000ff) << 24 | (data & 0x0000ff00) << 8 | (data & 0x00ff0000) >> 8 | (data & 0xff000000 >> 24);
}

uint16_t CharReverse16 (uint16_t data)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	80fb      	strh	r3, [r7, #6]
	return (data & 0x00ff) << 8 | (data & 0xff00) >> 8;
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29b      	uxth	r3, r3
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29b      	uxth	r3, r3
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <ModBusCRC16>:
  return CRC32 ^ 0xFFFFFFFF;;
}


uint16_t ModBusCRC16(uint8_t *data, uint16_t len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
    uint16_t CRC16 = 0xFFFF;
 800104c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001050:	82fb      	strh	r3, [r7, #22]
    uint16_t POLY = BitReverse16(0x8005);
 8001052:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001056:	f7ff ffb7 	bl	8000fc8 <BitReverse16>
 800105a:	4603      	mov	r3, r0
 800105c:	817b      	strh	r3, [r7, #10]

    for (int i = 0; i < len; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	e023      	b.n	80010ac <ModBusCRC16+0x6c>
    {
        CRC16 = CRC16 ^ (data[i]);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	8afb      	ldrh	r3, [r7, #22]
 8001070:	4053      	eors	r3, r2
 8001072:	82fb      	strh	r3, [r7, #22]

        for (int j = 0; j < 8; j++)
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e012      	b.n	80010a0 <ModBusCRC16+0x60>
        {
            if (CRC16 & 0x0001)
 800107a:	8afb      	ldrh	r3, [r7, #22]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <ModBusCRC16+0x54>
            {
                CRC16 = CRC16 >> 1;
 8001084:	8afb      	ldrh	r3, [r7, #22]
 8001086:	085b      	lsrs	r3, r3, #1
 8001088:	82fb      	strh	r3, [r7, #22]
                CRC16 = CRC16 ^ POLY;
 800108a:	8afa      	ldrh	r2, [r7, #22]
 800108c:	897b      	ldrh	r3, [r7, #10]
 800108e:	4053      	eors	r3, r2
 8001090:	82fb      	strh	r3, [r7, #22]
 8001092:	e002      	b.n	800109a <ModBusCRC16+0x5a>
            }else{
				CRC16 = CRC16 >> 1;
 8001094:	8afb      	ldrh	r3, [r7, #22]
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	dde9      	ble.n	800107a <ModBusCRC16+0x3a>
    for (int i = 0; i < len; i++)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	3301      	adds	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbd7      	blt.n	8001064 <ModBusCRC16+0x24>
			}
        }
    }

    return CRC16;
 80010b4:	8afb      	ldrh	r3, [r7, #22]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f94f 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fc2a 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f967 	bl	80013f6 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f92f 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000000 	.word	0x20000000
 800115c:	20000010 	.word	0x20000010
 8001160:	2000000c 	.word	0x2000000c

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000010 	.word	0x20000010
 8001188:	200002e4 	.word	0x200002e4

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200002e4 	.word	0x200002e4

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000010 	.word	0x20000010

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4907      	ldr	r1, [pc, #28]	@ (8001288 <__NVIC_EnableIRQ+0x38>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	@ (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	@ (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	@ 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	@ 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff29 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff3e 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff8e 	bl	80012e0 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff31 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa2 	bl	8001348 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e00e      	b.n	800143e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	795b      	ldrb	r3, [r3, #5]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff f855 	bl	80004e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff fe9a 	bl	800118c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e099      	b.n	8001598 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001484:	e00f      	b.n	80014a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001486:	f7ff fe81 	bl	800118c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b05      	cmp	r3, #5
 8001492:	d908      	bls.n	80014a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2220      	movs	r2, #32
 8001498:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e078      	b.n	8001598 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e8      	bne.n	8001486 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <HAL_DMA_Init+0x158>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d107      	bne.n	8001510 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001508:	4313      	orrs	r3, r2
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f023 0307 	bic.w	r3, r3, #7
 8001526:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	4313      	orrs	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	2b04      	cmp	r3, #4
 8001538:	d117      	bne.n	800156a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00e      	beq.n	800156a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fb01 	bl	8001b54 <DMA_CheckFifoParam>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2240      	movs	r2, #64	@ 0x40
 800155c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001566:	2301      	movs	r3, #1
 8001568:	e016      	b.n	8001598 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fab8 	bl	8001ae8 <DMA_CalcBaseAndBitshift>
 8001578:	4603      	mov	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001580:	223f      	movs	r2, #63	@ 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	f010803f 	.word	0xf010803f

080015a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_DMA_Start_IT+0x26>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e040      	b.n	800164c <HAL_DMA_Start_IT+0xa8>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d12f      	bne.n	800163e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2202      	movs	r2, #2
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fa4a 	bl	8001a8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fc:	223f      	movs	r2, #63	@ 0x3f
 80015fe:	409a      	lsls	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0216 	orr.w	r2, r2, #22
 8001612:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0208 	orr.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e005      	b.n	800164a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001646:	2302      	movs	r3, #2
 8001648:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800164a:	7dfb      	ldrb	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001662:	f7ff fd93 	bl	800118c <HAL_GetTick>
 8001666:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d008      	beq.n	8001686 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2280      	movs	r2, #128	@ 0x80
 8001678:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e052      	b.n	800172c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0216 	bic.w	r2, r2, #22
 8001694:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <HAL_DMA_Abort+0x62>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0208 	bic.w	r2, r2, #8
 80016c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0201 	bic.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d6:	e013      	b.n	8001700 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016d8:	f7ff fd58 	bl	800118c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d90c      	bls.n	8001700 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2203      	movs	r2, #3
 80016f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e015      	b.n	800172c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1e4      	bne.n	80016d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	223f      	movs	r2, #63	@ 0x3f
 8001714:	409a      	lsls	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d004      	beq.n	8001752 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2280      	movs	r2, #128	@ 0x80
 800174c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00c      	b.n	800176c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2205      	movs	r2, #5
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001784:	4b8e      	ldr	r3, [pc, #568]	@ (80019c0 <HAL_DMA_IRQHandler+0x248>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a8e      	ldr	r2, [pc, #568]	@ (80019c4 <HAL_DMA_IRQHandler+0x24c>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0a9b      	lsrs	r3, r3, #10
 8001790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a2:	2208      	movs	r2, #8
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01a      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0204 	bic.w	r2, r2, #4
 80017ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d0:	2208      	movs	r2, #8
 80017d2:	409a      	lsls	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e8:	2201      	movs	r2, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d012      	beq.n	800181a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001806:	2201      	movs	r2, #1
 8001808:	409a      	lsls	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001812:	f043 0202 	orr.w	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181e:	2204      	movs	r2, #4
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d012      	beq.n	8001850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183c:	2204      	movs	r2, #4
 800183e:	409a      	lsls	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001848:	f043 0204 	orr.w	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001854:	2210      	movs	r2, #16
 8001856:	409a      	lsls	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d043      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d03c      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001872:	2210      	movs	r2, #16
 8001874:	409a      	lsls	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d018      	beq.n	80018ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d108      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d024      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
 80018a6:	e01f      	b.n	80018e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01b      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
 80018b8:	e016      	b.n	80018e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0208 	bic.w	r2, r2, #8
 80018d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	2220      	movs	r2, #32
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 808f 	beq.w	8001a18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8087 	beq.w	8001a18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190e:	2220      	movs	r2, #32
 8001910:	409a      	lsls	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b05      	cmp	r3, #5
 8001920:	d136      	bne.n	8001990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0216 	bic.w	r2, r2, #22
 8001930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d103      	bne.n	8001952 <HAL_DMA_IRQHandler+0x1da>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0208 	bic.w	r2, r2, #8
 8001960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001966:	223f      	movs	r2, #63	@ 0x3f
 8001968:	409a      	lsls	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001982:	2b00      	cmp	r3, #0
 8001984:	d07e      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
        }
        return;
 800198e:	e079      	b.n	8001a84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01d      	beq.n	80019da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10d      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d031      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
 80019bc:	e02c      	b.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
 80019be:	bf00      	nop
 80019c0:	20000000 	.word	0x20000000
 80019c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d023      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	4798      	blx	r3
 80019d8:	e01e      	b.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10f      	bne.n	8001a08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0210 	bic.w	r2, r2, #16
 80019f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d032      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d022      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2205      	movs	r2, #5
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	3301      	adds	r3, #1
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d307      	bcc.n	8001a60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f2      	bne.n	8001a44 <HAL_DMA_IRQHandler+0x2cc>
 8001a5e:	e000      	b.n	8001a62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
 8001a82:	e000      	b.n	8001a86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a84:	bf00      	nop
    }
  }
}
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001aa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b40      	cmp	r3, #64	@ 0x40
 8001ab8:	d108      	bne.n	8001acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aca:	e007      	b.n	8001adc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3b10      	subs	r3, #16
 8001af8:	4a14      	ldr	r2, [pc, #80]	@ (8001b4c <DMA_CalcBaseAndBitshift+0x64>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b02:	4a13      	ldr	r2, [pc, #76]	@ (8001b50 <DMA_CalcBaseAndBitshift+0x68>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d909      	bls.n	8001b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	1d1a      	adds	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b28:	e007      	b.n	8001b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b32:	f023 0303 	bic.w	r3, r3, #3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	aaaaaaab 	.word	0xaaaaaaab
 8001b50:	08004954 	.word	0x08004954

08001b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d11f      	bne.n	8001bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d856      	bhi.n	8001c22 <DMA_CheckFifoParam+0xce>
 8001b74:	a201      	add	r2, pc, #4	@ (adr r2, 8001b7c <DMA_CheckFifoParam+0x28>)
 8001b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7a:	bf00      	nop
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001b9f 	.word	0x08001b9f
 8001b84:	08001b8d 	.word	0x08001b8d
 8001b88:	08001c23 	.word	0x08001c23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d046      	beq.n	8001c26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b9c:	e043      	b.n	8001c26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ba6:	d140      	bne.n	8001c2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bac:	e03d      	b.n	8001c2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bb6:	d121      	bne.n	8001bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d837      	bhi.n	8001c2e <DMA_CheckFifoParam+0xda>
 8001bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc4 <DMA_CheckFifoParam+0x70>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bd5 	.word	0x08001bd5
 8001bc8:	08001bdb 	.word	0x08001bdb
 8001bcc:	08001bd5 	.word	0x08001bd5
 8001bd0:	08001bed 	.word	0x08001bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd8:	e030      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d025      	beq.n	8001c32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bea:	e022      	b.n	8001c32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bf4:	d11f      	bne.n	8001c36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bfa:	e01c      	b.n	8001c36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d903      	bls.n	8001c0a <DMA_CheckFifoParam+0xb6>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d003      	beq.n	8001c10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c08:	e018      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0e:	e015      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00e      	beq.n	8001c3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c20:	e00b      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      break;
 8001c22:	bf00      	nop
 8001c24:	e00a      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e008      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e006      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c2e:	bf00      	nop
 8001c30:	e004      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c32:	bf00      	nop
 8001c34:	e002      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c36:	bf00      	nop
 8001c38:	e000      	b.n	8001c3c <DMA_CheckFifoParam+0xe8>
      break;
 8001c3a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e16b      	b.n	8001f40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 815a 	bne.w	8001f3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d005      	beq.n	8001c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d130      	bne.n	8001d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 0201 	and.w	r2, r3, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d017      	beq.n	8001d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d123      	bne.n	8001d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	08da      	lsrs	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3208      	adds	r2, #8
 8001d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	08da      	lsrs	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3208      	adds	r2, #8
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0203 	and.w	r2, r3, #3
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80b4 	beq.w	8001f3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b60      	ldr	r3, [pc, #384]	@ (8001f58 <HAL_GPIO_Init+0x30c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a5f      	ldr	r2, [pc, #380]	@ (8001f58 <HAL_GPIO_Init+0x30c>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f58 <HAL_GPIO_Init+0x30c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dee:	4a5b      	ldr	r2, [pc, #364]	@ (8001f5c <HAL_GPIO_Init+0x310>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a52      	ldr	r2, [pc, #328]	@ (8001f60 <HAL_GPIO_Init+0x314>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d02b      	beq.n	8001e72 <HAL_GPIO_Init+0x226>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a51      	ldr	r2, [pc, #324]	@ (8001f64 <HAL_GPIO_Init+0x318>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d025      	beq.n	8001e6e <HAL_GPIO_Init+0x222>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a50      	ldr	r2, [pc, #320]	@ (8001f68 <HAL_GPIO_Init+0x31c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d01f      	beq.n	8001e6a <HAL_GPIO_Init+0x21e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f6c <HAL_GPIO_Init+0x320>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d019      	beq.n	8001e66 <HAL_GPIO_Init+0x21a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4e      	ldr	r2, [pc, #312]	@ (8001f70 <HAL_GPIO_Init+0x324>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0x216>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f74 <HAL_GPIO_Init+0x328>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00d      	beq.n	8001e5e <HAL_GPIO_Init+0x212>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	@ (8001f78 <HAL_GPIO_Init+0x32c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x20e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f7c <HAL_GPIO_Init+0x330>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_GPIO_Init+0x20a>
 8001e52:	2307      	movs	r3, #7
 8001e54:	e00e      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e56:	2308      	movs	r3, #8
 8001e58:	e00c      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	e00a      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e5e:	2305      	movs	r3, #5
 8001e60:	e008      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e62:	2304      	movs	r3, #4
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e66:	2303      	movs	r3, #3
 8001e68:	e004      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e72:	2300      	movs	r3, #0
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f002 0203 	and.w	r2, r2, #3
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	4093      	lsls	r3, r2
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e84:	4935      	ldr	r1, [pc, #212]	@ (8001f5c <HAL_GPIO_Init+0x310>)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e92:	4b3b      	ldr	r3, [pc, #236]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb6:	4a32      	ldr	r2, [pc, #200]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ebc:	4b30      	ldr	r3, [pc, #192]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee0:	4a27      	ldr	r2, [pc, #156]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ee6:	4b26      	ldr	r3, [pc, #152]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f34:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	f67f ae90 	bls.w	8001c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	@ 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020c00 	.word	0x40020c00
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40021400 	.word	0x40021400
 8001f78:	40021800 	.word	0x40021800
 8001f7c:	40021c00 	.word	0x40021c00
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e001      	b.n	8001fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff8:	887a      	ldrh	r2, [r7, #2]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	041a      	lsls	r2, r3, #16
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43d9      	mvns	r1, r3
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	400b      	ands	r3, r1
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	619a      	str	r2, [r3, #24]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002026:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d006      	beq.n	8002040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fb8e 	bl	800075c <HAL_GPIO_EXTI_Callback>
  }
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40013c00 	.word	0x40013c00

0800204c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e12b      	b.n	80022b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fb18 	bl	80006a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2224      	movs	r2, #36	@ 0x24
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800209e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020b0:	f000 fd40 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 80020b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a81      	ldr	r2, [pc, #516]	@ (80022c0 <HAL_I2C_Init+0x274>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d807      	bhi.n	80020d0 <HAL_I2C_Init+0x84>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a80      	ldr	r2, [pc, #512]	@ (80022c4 <HAL_I2C_Init+0x278>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	bf94      	ite	ls
 80020c8:	2301      	movls	r3, #1
 80020ca:	2300      	movhi	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e006      	b.n	80020de <HAL_I2C_Init+0x92>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a7d      	ldr	r2, [pc, #500]	@ (80022c8 <HAL_I2C_Init+0x27c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	bf94      	ite	ls
 80020d8:	2301      	movls	r3, #1
 80020da:	2300      	movhi	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0e7      	b.n	80022b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a78      	ldr	r2, [pc, #480]	@ (80022cc <HAL_I2C_Init+0x280>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0c9b      	lsrs	r3, r3, #18
 80020f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a6a      	ldr	r2, [pc, #424]	@ (80022c0 <HAL_I2C_Init+0x274>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d802      	bhi.n	8002120 <HAL_I2C_Init+0xd4>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3301      	adds	r3, #1
 800211e:	e009      	b.n	8002134 <HAL_I2C_Init+0xe8>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	4a69      	ldr	r2, [pc, #420]	@ (80022d0 <HAL_I2C_Init+0x284>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	3301      	adds	r3, #1
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	430b      	orrs	r3, r1
 800213a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002146:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	495c      	ldr	r1, [pc, #368]	@ (80022c0 <HAL_I2C_Init+0x274>)
 8002150:	428b      	cmp	r3, r1
 8002152:	d819      	bhi.n	8002188 <HAL_I2C_Init+0x13c>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e59      	subs	r1, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002162:	1c59      	adds	r1, r3, #1
 8002164:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002168:	400b      	ands	r3, r1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_I2C_Init+0x138>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1e59      	subs	r1, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fbb1 f3f3 	udiv	r3, r1, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002182:	e051      	b.n	8002228 <HAL_I2C_Init+0x1dc>
 8002184:	2304      	movs	r3, #4
 8002186:	e04f      	b.n	8002228 <HAL_I2C_Init+0x1dc>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d111      	bne.n	80021b4 <HAL_I2C_Init+0x168>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e58      	subs	r0, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	440b      	add	r3, r1
 800219e:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a2:	3301      	adds	r3, #1
 80021a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e012      	b.n	80021da <HAL_I2C_Init+0x18e>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1e58      	subs	r0, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	0099      	lsls	r1, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Init+0x196>
 80021de:	2301      	movs	r3, #1
 80021e0:	e022      	b.n	8002228 <HAL_I2C_Init+0x1dc>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10e      	bne.n	8002208 <HAL_I2C_Init+0x1bc>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1e58      	subs	r0, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6859      	ldr	r1, [r3, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	440b      	add	r3, r1
 80021f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002206:	e00f      	b.n	8002228 <HAL_I2C_Init+0x1dc>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e58      	subs	r0, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	0099      	lsls	r1, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	fbb0 f3f3 	udiv	r3, r0, r3
 800221e:	3301      	adds	r3, #1
 8002220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002224:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	6809      	ldr	r1, [r1, #0]
 800222c:	4313      	orrs	r3, r2
 800222e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002256:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6911      	ldr	r1, [r2, #16]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68d2      	ldr	r2, [r2, #12]
 8002262:	4311      	orrs	r1, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	430b      	orrs	r3, r1
 800226a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	000186a0 	.word	0x000186a0
 80022c4:	001e847f 	.word	0x001e847f
 80022c8:	003d08ff 	.word	0x003d08ff
 80022cc:	431bde83 	.word	0x431bde83
 80022d0:	10624dd3 	.word	0x10624dd3

080022d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e267      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d075      	beq.n	80023de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022f2:	4b88      	ldr	r3, [pc, #544]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d00c      	beq.n	8002318 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	4b85      	ldr	r3, [pc, #532]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002306:	2b08      	cmp	r3, #8
 8002308:	d112      	bne.n	8002330 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4b82      	ldr	r3, [pc, #520]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002312:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002316:	d10b      	bne.n	8002330 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	4b7e      	ldr	r3, [pc, #504]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d05b      	beq.n	80023dc <HAL_RCC_OscConfig+0x108>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d157      	bne.n	80023dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e242      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002338:	d106      	bne.n	8002348 <HAL_RCC_OscConfig+0x74>
 800233a:	4b76      	ldr	r3, [pc, #472]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a75      	ldr	r2, [pc, #468]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xb0>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x98>
 8002352:	4b70      	ldr	r3, [pc, #448]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6f      	ldr	r2, [pc, #444]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b6d      	ldr	r3, [pc, #436]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6c      	ldr	r2, [pc, #432]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xb0>
 800236c:	4b69      	ldr	r3, [pc, #420]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a68      	ldr	r2, [pc, #416]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b66      	ldr	r3, [pc, #408]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a65      	ldr	r2, [pc, #404]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fefe 	bl	800118c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fefa 	bl	800118c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	@ 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e207      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xc0>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe feea 	bl	800118c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fee6 	bl	800118c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1f3      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	4b51      	ldr	r3, [pc, #324]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0xe8>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d063      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d11c      	bne.n	800243c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b44      	ldr	r3, [pc, #272]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	4b41      	ldr	r3, [pc, #260]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x152>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e1c7      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4937      	ldr	r1, [pc, #220]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	e03a      	b.n	80024b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002444:	4b34      	ldr	r3, [pc, #208]	@ (8002518 <HAL_RCC_OscConfig+0x244>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fe9f 	bl	800118c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7fe fe9b 	bl	800118c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1a8      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4925      	ldr	r1, [pc, #148]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCC_OscConfig+0x244>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fe7e 	bl	800118c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002494:	f7fe fe7a 	bl	800118c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e187      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d036      	beq.n	800252c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <HAL_RCC_OscConfig+0x248>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe fe5e 	bl	800118c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe fe5a 	bl	800118c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e167      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCC_OscConfig+0x240>)
 80024e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x200>
 80024f2:	e01b      	b.n	800252c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <HAL_RCC_OscConfig+0x248>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fe47 	bl	800118c <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	e00e      	b.n	8002520 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002502:	f7fe fe43 	bl	800118c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d907      	bls.n	8002520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e150      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
 8002514:	40023800 	.word	0x40023800
 8002518:	42470000 	.word	0x42470000
 800251c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b88      	ldr	r3, [pc, #544]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ea      	bne.n	8002502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8097 	beq.w	8002668 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b81      	ldr	r3, [pc, #516]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b7d      	ldr	r3, [pc, #500]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	4a7c      	ldr	r2, [pc, #496]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	@ 0x40
 800255a:	4b7a      	ldr	r3, [pc, #488]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b77      	ldr	r3, [pc, #476]	@ (8002748 <HAL_RCC_OscConfig+0x474>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d118      	bne.n	80025a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b74      	ldr	r3, [pc, #464]	@ (8002748 <HAL_RCC_OscConfig+0x474>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a73      	ldr	r2, [pc, #460]	@ (8002748 <HAL_RCC_OscConfig+0x474>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe fe03 	bl	800118c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7fe fdff 	bl	800118c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e10c      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b6a      	ldr	r3, [pc, #424]	@ (8002748 <HAL_RCC_OscConfig+0x474>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x2ea>
 80025b0:	4b64      	ldr	r3, [pc, #400]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a63      	ldr	r2, [pc, #396]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x324>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x30c>
 80025c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0x324>
 80025e0:	4b58      	ldr	r3, [pc, #352]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	4a57      	ldr	r2, [pc, #348]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ec:	4b55      	ldr	r3, [pc, #340]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	4a54      	ldr	r2, [pc, #336]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fdc4 	bl	800118c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe fdc0 	bl	800118c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0cb      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	4b49      	ldr	r3, [pc, #292]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ee      	beq.n	8002608 <HAL_RCC_OscConfig+0x334>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7fe fdae 	bl	800118c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe fdaa 	bl	800118c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0b5      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	4b3e      	ldr	r3, [pc, #248]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ee      	bne.n	8002634 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	4a38      	ldr	r2, [pc, #224]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002666:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a1 	beq.w	80027b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002672:	4b34      	ldr	r3, [pc, #208]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d05c      	beq.n	8002738 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d141      	bne.n	800270a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b31      	ldr	r3, [pc, #196]	@ (800274c <HAL_RCC_OscConfig+0x478>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fd7e 	bl	800118c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe fd7a 	bl	800118c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e087      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	491b      	ldr	r1, [pc, #108]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <HAL_RCC_OscConfig+0x478>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fd53 	bl	800118c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fd4f 	bl	800118c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e05c      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fc:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x416>
 8002708:	e054      	b.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_RCC_OscConfig+0x478>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe fd3c 	bl	800118c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fd38 	bl	800118c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e045      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_RCC_OscConfig+0x470>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x444>
 8002736:	e03d      	b.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e038      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
 8002744:	40023800 	.word	0x40023800
 8002748:	40007000 	.word	0x40007000
 800274c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002750:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_RCC_OscConfig+0x4ec>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d028      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d121      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d11a      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002780:	4013      	ands	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002788:	4293      	cmp	r3, r2
 800278a:	d111      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	3b01      	subs	r3, #1
 800279a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800

080027c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0cc      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d8:	4b68      	ldr	r3, [pc, #416]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d90c      	bls.n	8002800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4b65      	ldr	r3, [pc, #404]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b63      	ldr	r3, [pc, #396]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0b8      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d020      	beq.n	800284e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002818:	4b59      	ldr	r3, [pc, #356]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a58      	ldr	r2, [pc, #352]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002830:	4b53      	ldr	r3, [pc, #332]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a52      	ldr	r2, [pc, #328]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800283a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283c:	4b50      	ldr	r3, [pc, #320]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	494d      	ldr	r1, [pc, #308]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d044      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b47      	ldr	r3, [pc, #284]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d119      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e07f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d003      	beq.n	8002882 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	4b3f      	ldr	r3, [pc, #252]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002892:	4b3b      	ldr	r3, [pc, #236]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e067      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a2:	4b37      	ldr	r3, [pc, #220]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 0203 	bic.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4934      	ldr	r1, [pc, #208]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b4:	f7fe fc6a 	bl	800118c <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028bc:	f7fe fc66 	bl	800118c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e04f      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 020c 	and.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1eb      	bne.n	80028bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	4b25      	ldr	r3, [pc, #148]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d20c      	bcs.n	800290c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b22      	ldr	r3, [pc, #136]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b20      	ldr	r3, [pc, #128]	@ (800297c <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e032      	b.n	8002972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002918:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4916      	ldr	r1, [pc, #88]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002936:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	490e      	ldr	r1, [pc, #56]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800294a:	f000 f821 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 800294e:	4602      	mov	r2, r0
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	490a      	ldr	r1, [pc, #40]	@ (8002984 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	5ccb      	ldrb	r3, [r1, r3]
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	4a09      	ldr	r2, [pc, #36]	@ (8002988 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002966:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fbca 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023c00 	.word	0x40023c00
 8002980:	40023800 	.word	0x40023800
 8002984:	0800493c 	.word	0x0800493c
 8002988:	20000000 	.word	0x20000000
 800298c:	2000000c 	.word	0x2000000c

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002994:	b090      	sub	sp, #64	@ 0x40
 8002996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a8:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d00d      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x40>
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	f200 80a1 	bhi.w	8002afc <HAL_RCC_GetSysClockFreq+0x16c>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x34>
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x3a>
 80029c2:	e09b      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x184>)
 80029c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029c8:	e09b      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ca:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80029cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029ce:	e098      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029da:	4b4d      	ldr	r3, [pc, #308]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d028      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	623b      	str	r3, [r7, #32]
 80029f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029f8:	2100      	movs	r1, #0
 80029fa:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80029fc:	fb03 f201 	mul.w	r2, r3, r1
 8002a00:	2300      	movs	r3, #0
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	4a43      	ldr	r2, [pc, #268]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a10:	460a      	mov	r2, r1
 8002a12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a16:	4413      	add	r3, r2
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	61fa      	str	r2, [r7, #28]
 8002a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a2a:	f7fd fbcd 	bl	80001c8 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4613      	mov	r3, r2
 8002a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a36:	e053      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a38:	4b35      	ldr	r3, [pc, #212]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	2200      	movs	r2, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	617a      	str	r2, [r7, #20]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a4a:	f04f 0b00 	mov.w	fp, #0
 8002a4e:	4652      	mov	r2, sl
 8002a50:	465b      	mov	r3, fp
 8002a52:	f04f 0000 	mov.w	r0, #0
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	0159      	lsls	r1, r3, #5
 8002a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a60:	0150      	lsls	r0, r2, #5
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	ebb2 080a 	subs.w	r8, r2, sl
 8002a6a:	eb63 090b 	sbc.w	r9, r3, fp
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a82:	ebb2 0408 	subs.w	r4, r2, r8
 8002a86:	eb63 0509 	sbc.w	r5, r3, r9
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	00eb      	lsls	r3, r5, #3
 8002a94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a98:	00e2      	lsls	r2, r4, #3
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	eb14 030a 	adds.w	r3, r4, sl
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	eb45 030b 	adc.w	r3, r5, fp
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	028b      	lsls	r3, r1, #10
 8002aba:	4621      	mov	r1, r4
 8002abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	028a      	lsls	r2, r1, #10
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aca:	2200      	movs	r2, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	60fa      	str	r2, [r7, #12]
 8002ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad4:	f7fd fb78 	bl	80001c8 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002af0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x184>)
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3740      	adds	r7, #64	@ 0x40
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	00f42400 	.word	0x00f42400
 8002b18:	017d7840 	.word	0x017d7840

08002b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0a9b      	lsrs	r3, r3, #10
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	0800494c 	.word	0x0800494c

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff ffdc 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0b5b      	lsrs	r3, r3, #13
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	@ (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	0800494c 	.word	0x0800494c

08002b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e042      	b.n	8002c1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe f84a 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	@ 0x24
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 ff85 	bl	8003ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	@ 0x28
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d175      	bne.n	8002d30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_UART_Transmit+0x2c>
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e06e      	b.n	8002d32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2221      	movs	r2, #33	@ 0x21
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c62:	f7fe fa93 	bl	800118c <HAL_GetTick>
 8002c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c7c:	d108      	bne.n	8002c90 <HAL_UART_Transmit+0x6c>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d104      	bne.n	8002c90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	e003      	b.n	8002c98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c98:	e02e      	b.n	8002cf8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2180      	movs	r1, #128	@ 0x80
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fc5d 	bl	8003564 <UART_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e03a      	b.n	8002d32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10b      	bne.n	8002cda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	e007      	b.n	8002cea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1cb      	bne.n	8002c9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2140      	movs	r1, #64	@ 0x40
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fc29 	bl	8003564 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e006      	b.n	8002d32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b08c      	sub	sp, #48	@ 0x30
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	4613      	mov	r3, r2
 8002d46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d14a      	bne.n	8002dea <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e043      	b.n	8002dec <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fc4e 	bl	8003618 <UART_Start_Receive_DMA>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002d82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d12c      	bne.n	8002de4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d125      	bne.n	8002dde <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	617b      	str	r3, [r7, #20]
   return(result);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f043 0310 	orr.w	r3, r3, #16
 8002dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6a39      	ldr	r1, [r7, #32]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e5      	bne.n	8002da8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002ddc:	e002      	b.n	8002de4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002de4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002de8:	e000      	b.n	8002dec <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
  }
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3730      	adds	r7, #48	@ 0x30
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0ba      	sub	sp, #232	@ 0xe8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_UART_IRQHandler+0x66>
 8002e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fd81 	bl	800395a <UART_Receive_IT>
      return;
 8002e58:	e25b      	b.n	8003312 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80de 	beq.w	8003020 <HAL_UART_IRQHandler+0x22c>
 8002e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80d1 	beq.w	8003020 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xae>
 8002e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xd2>
 8002eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_UART_IRQHandler+0xf6>
 8002ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	f043 0204 	orr.w	r2, r3, #4
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d011      	beq.n	8002f1a <HAL_UART_IRQHandler+0x126>
 8002ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f12:	f043 0208 	orr.w	r2, r3, #8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 81f2 	beq.w	8003308 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_UART_IRQHandler+0x14e>
 8002f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fd0c 	bl	800395a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4c:	2b40      	cmp	r3, #64	@ 0x40
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <HAL_UART_IRQHandler+0x17a>
 8002f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d04f      	beq.n	800300e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fc14 	bl	800379c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b40      	cmp	r3, #64	@ 0x40
 8002f80:	d141      	bne.n	8003006 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3314      	adds	r3, #20
 8002f88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3314      	adds	r3, #20
 8002faa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1d9      	bne.n	8002f82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d013      	beq.n	8002ffe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	4a7e      	ldr	r2, [pc, #504]	@ (80031d4 <HAL_UART_IRQHandler+0x3e0>)
 8002fdc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fba6 	bl	8001734 <HAL_DMA_Abort_IT>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e00e      	b.n	800301c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9a8 	bl	8003354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	e00a      	b.n	800301c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f9a4 	bl	8003354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300c:	e006      	b.n	800301c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f9a0 	bl	8003354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800301a:	e175      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	bf00      	nop
    return;
 800301e:	e173      	b.n	8003308 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003024:	2b01      	cmp	r3, #1
 8003026:	f040 814f 	bne.w	80032c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8148 	beq.w	80032c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8141 	beq.w	80032c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003066:	2b40      	cmp	r3, #64	@ 0x40
 8003068:	f040 80b6 	bne.w	80031d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003078:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8145 	beq.w	800330c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800308a:	429a      	cmp	r2, r3
 800308c:	f080 813e 	bcs.w	800330c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003096:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a2:	f000 8088 	beq.w	80031b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	330c      	adds	r3, #12
 80030ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1d9      	bne.n	80030a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3314      	adds	r3, #20
 8003112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003116:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800311a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800311e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003122:	e841 2300 	strex	r3, r2, [r1]
 8003126:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1e1      	bne.n	80030f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003136:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003138:	e853 3f00 	ldrex	r3, [r3]
 800313c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800313e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3314      	adds	r3, #20
 800314e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003152:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003154:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003158:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e3      	bne.n	800312e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003186:	f023 0310 	bic.w	r3, r3, #16
 800318a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003198:	65ba      	str	r2, [r7, #88]	@ 0x58
 800319a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800319e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e3      	bne.n	8003174 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fa4f 	bl	8001654 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fd faeb 	bl	80007a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031d2:	e09b      	b.n	800330c <HAL_UART_IRQHandler+0x518>
 80031d4:	08003863 	.word	0x08003863
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 808e 	beq.w	8003310 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8089 	beq.w	8003310 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800320e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003214:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003222:	647a      	str	r2, [r7, #68]	@ 0x44
 8003224:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003228:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e3      	bne.n	80031fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3314      	adds	r3, #20
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	623b      	str	r3, [r7, #32]
   return(result);
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3314      	adds	r3, #20
 8003256:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800325a:	633a      	str	r2, [r7, #48]	@ 0x30
 800325c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e3      	bne.n	8003236 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	e853 3f00 	ldrex	r3, [r3]
 800328a:	60fb      	str	r3, [r7, #12]
   return(result);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0310 	bic.w	r3, r3, #16
 8003292:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032a0:	61fa      	str	r2, [r7, #28]
 80032a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	69b9      	ldr	r1, [r7, #24]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	617b      	str	r3, [r7, #20]
   return(result);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e3      	bne.n	800327c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fd fa71 	bl	80007a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032c6:	e023      	b.n	8003310 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <HAL_UART_IRQHandler+0x4f4>
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fad2 	bl	800388a <UART_Transmit_IT>
    return;
 80032e6:	e014      	b.n	8003312 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <HAL_UART_IRQHandler+0x51e>
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fb12 	bl	800392a <UART_EndTransmit_IT>
    return;
 8003306:	e004      	b.n	8003312 <HAL_UART_IRQHandler+0x51e>
    return;
 8003308:	bf00      	nop
 800330a:	e002      	b.n	8003312 <HAL_UART_IRQHandler+0x51e>
      return;
 800330c:	bf00      	nop
 800330e:	e000      	b.n	8003312 <HAL_UART_IRQHandler+0x51e>
      return;
 8003310:	bf00      	nop
  }
}
 8003312:	37e8      	adds	r7, #232	@ 0xe8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b09c      	sub	sp, #112	@ 0x70
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d172      	bne.n	800346a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003386:	2200      	movs	r2, #0
 8003388:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800338a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800339a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800339c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80033aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e5      	bne.n	800338a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3314      	adds	r3, #20
 80033c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d0:	f023 0301 	bic.w	r3, r3, #1
 80033d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80033d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80033de:	647a      	str	r2, [r7, #68]	@ 0x44
 80033e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e5      	bne.n	80033be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	623b      	str	r3, [r7, #32]
   return(result);
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003408:	663b      	str	r3, [r7, #96]	@ 0x60
 800340a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3314      	adds	r3, #20
 8003410:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003412:	633a      	str	r2, [r7, #48]	@ 0x30
 8003414:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e5      	bne.n	80033f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	2b01      	cmp	r3, #1
 8003434:	d119      	bne.n	800346a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	60fb      	str	r3, [r7, #12]
   return(result);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f023 0310 	bic.w	r3, r3, #16
 800344c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800344e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	330c      	adds	r3, #12
 8003454:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003456:	61fa      	str	r2, [r7, #28]
 8003458:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345a:	69b9      	ldr	r1, [r7, #24]
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	617b      	str	r3, [r7, #20]
   return(result);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e5      	bne.n	8003436 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800346a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346c:	2200      	movs	r2, #0
 800346e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	2b01      	cmp	r3, #1
 8003476:	d106      	bne.n	8003486 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800347a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800347c:	4619      	mov	r1, r3
 800347e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003480:	f7fd f992 	bl	80007a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003484:	e002      	b.n	800348c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003486:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003488:	f7ff ff50 	bl	800332c <HAL_UART_RxCpltCallback>
}
 800348c:	bf00      	nop
 800348e:	3770      	adds	r7, #112	@ 0x70
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034b4:	085b      	lsrs	r3, r3, #1
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4619      	mov	r1, r3
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7fd f974 	bl	80007a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034c0:	e002      	b.n	80034c8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff ff3c 	bl	8003340 <HAL_UART_RxHalfCpltCallback>
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ec:	2b80      	cmp	r3, #128	@ 0x80
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b21      	cmp	r3, #33	@ 0x21
 8003502:	d108      	bne.n	8003516 <UART_DMAError+0x46>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2200      	movs	r2, #0
 800350e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003510:	68b8      	ldr	r0, [r7, #8]
 8003512:	f000 f91b 	bl	800374c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b22      	cmp	r3, #34	@ 0x22
 8003536:	d108      	bne.n	800354a <UART_DMAError+0x7a>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003544:	68b8      	ldr	r0, [r7, #8]
 8003546:	f000 f929 	bl	800379c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	f043 0210 	orr.w	r2, r3, #16
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003556:	68b8      	ldr	r0, [r7, #8]
 8003558:	f7ff fefc 	bl	8003354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003574:	e03b      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d037      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fd fe05 	bl	800118c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	6a3a      	ldr	r2, [r7, #32]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <UART_WaitOnFlagUntilTimeout+0x30>
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e03a      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d023      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b80      	cmp	r3, #128	@ 0x80
 80035aa:	d020      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b40      	cmp	r3, #64	@ 0x40
 80035b0:	d01d      	beq.n	80035ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d116      	bne.n	80035ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f8e0 	bl	800379c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2208      	movs	r2, #8
 80035e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00f      	b.n	800360e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	429a      	cmp	r2, r3
 800360a:	d0b4      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b098      	sub	sp, #96	@ 0x60
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2222      	movs	r2, #34	@ 0x22
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	4a3e      	ldr	r2, [pc, #248]	@ (8003740 <UART_Start_Receive_DMA+0x128>)
 8003646:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364c:	4a3d      	ldr	r2, [pc, #244]	@ (8003744 <UART_Start_Receive_DMA+0x12c>)
 800364e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	4a3c      	ldr	r2, [pc, #240]	@ (8003748 <UART_Start_Receive_DMA+0x130>)
 8003656:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	2200      	movs	r2, #0
 800365e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	f7fd ff94 	bl	80015a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d019      	beq.n	80036ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80036c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80036c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e5      	bne.n	800369a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3314      	adds	r3, #20
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e5      	bne.n	80036ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3314      	adds	r3, #20
 8003708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	617b      	str	r3, [r7, #20]
   return(result);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003718:	653b      	str	r3, [r7, #80]	@ 0x50
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3314      	adds	r3, #20
 8003720:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003722:	627a      	str	r2, [r7, #36]	@ 0x24
 8003724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6a39      	ldr	r1, [r7, #32]
 8003728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e5      	bne.n	8003702 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3760      	adds	r7, #96	@ 0x60
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	08003369 	.word	0x08003369
 8003744:	08003495 	.word	0x08003495
 8003748:	080034d1 	.word	0x080034d1

0800374c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	@ 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	60bb      	str	r3, [r7, #8]
   return(result);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	330c      	adds	r3, #12
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	61ba      	str	r2, [r7, #24]
 8003776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6979      	ldr	r1, [r7, #20]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	613b      	str	r3, [r7, #16]
   return(result);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e5      	bne.n	8003754 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003790:	bf00      	nop
 8003792:	3724      	adds	r7, #36	@ 0x24
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800379c:	b480      	push	{r7}
 800379e:	b095      	sub	sp, #84	@ 0x54
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3314      	adds	r3, #20
 80037de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	2b01      	cmp	r3, #1
 8003812:	d119      	bne.n	8003848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	60bb      	str	r3, [r7, #8]
   return(result);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f023 0310 	bic.w	r3, r3, #16
 800382a:	647b      	str	r3, [r7, #68]	@ 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003834:	61ba      	str	r2, [r7, #24]
 8003836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6979      	ldr	r1, [r7, #20]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	613b      	str	r3, [r7, #16]
   return(result);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003856:	bf00      	nop
 8003858:	3754      	adds	r7, #84	@ 0x54
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff fd69 	bl	8003354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b21      	cmp	r3, #33	@ 0x21
 800389c:	d13e      	bne.n	800391c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a6:	d114      	bne.n	80038d2 <UART_Transmit_IT+0x48>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d110      	bne.n	80038d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	1c9a      	adds	r2, r3, #2
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	621a      	str	r2, [r3, #32]
 80038d0:	e008      	b.n	80038e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	1c59      	adds	r1, r3, #1
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6211      	str	r1, [r2, #32]
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4619      	mov	r1, r3
 80038f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10f      	bne.n	8003918 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003906:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003916:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003940:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff fce4 	bl	8003318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b08c      	sub	sp, #48	@ 0x30
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b22      	cmp	r3, #34	@ 0x22
 800396c:	f040 80ae 	bne.w	8003acc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003978:	d117      	bne.n	80039aa <UART_Receive_IT+0x50>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d113      	bne.n	80039aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003998:	b29a      	uxth	r2, r3
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80039a8:	e026      	b.n	80039f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039bc:	d007      	beq.n	80039ce <UART_Receive_IT+0x74>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <UART_Receive_IT+0x82>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	e008      	b.n	80039ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4619      	mov	r1, r3
 8003a06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d15d      	bne.n	8003ac8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0220 	bic.w	r2, r2, #32
 8003a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d135      	bne.n	8003abe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	613b      	str	r3, [r7, #16]
   return(result);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f023 0310 	bic.w	r3, r3, #16
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a78:	623a      	str	r2, [r7, #32]
 8003a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	69f9      	ldr	r1, [r7, #28]
 8003a7e:	6a3a      	ldr	r2, [r7, #32]
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e5      	bne.n	8003a58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d10a      	bne.n	8003ab0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fc fe76 	bl	80007a8 <HAL_UARTEx_RxEventCallback>
 8003abc:	e002      	b.n	8003ac4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fc34 	bl	800332c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e002      	b.n	8003ace <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3730      	adds	r7, #48	@ 0x30
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003adc:	b0c0      	sub	sp, #256	@ 0x100
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	68d9      	ldr	r1, [r3, #12]
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	ea40 0301 	orr.w	r3, r0, r1
 8003b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b30:	f021 010c 	bic.w	r1, r1, #12
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b52:	6999      	ldr	r1, [r3, #24]
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	ea40 0301 	orr.w	r3, r0, r1
 8003b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4b8f      	ldr	r3, [pc, #572]	@ (8003da4 <UART_SetConfig+0x2cc>)
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d005      	beq.n	8003b78 <UART_SetConfig+0xa0>
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b8d      	ldr	r3, [pc, #564]	@ (8003da8 <UART_SetConfig+0x2d0>)
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d104      	bne.n	8003b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b78:	f7fe fff0 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8003b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b80:	e003      	b.n	8003b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b82:	f7fe ffd7 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8003b86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b94:	f040 810c 	bne.w	8003db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003baa:	4622      	mov	r2, r4
 8003bac:	462b      	mov	r3, r5
 8003bae:	1891      	adds	r1, r2, r2
 8003bb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bba:	4621      	mov	r1, r4
 8003bbc:	eb12 0801 	adds.w	r8, r2, r1
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	eb43 0901 	adc.w	r9, r3, r1
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bda:	4690      	mov	r8, r2
 8003bdc:	4699      	mov	r9, r3
 8003bde:	4623      	mov	r3, r4
 8003be0:	eb18 0303 	adds.w	r3, r8, r3
 8003be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003be8:	462b      	mov	r3, r5
 8003bea:	eb49 0303 	adc.w	r3, r9, r3
 8003bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c06:	460b      	mov	r3, r1
 8003c08:	18db      	adds	r3, r3, r3
 8003c0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	eb42 0303 	adc.w	r3, r2, r3
 8003c12:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c1c:	f7fc fad4 	bl	80001c8 <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4b61      	ldr	r3, [pc, #388]	@ (8003dac <UART_SetConfig+0x2d4>)
 8003c26:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	011c      	lsls	r4, r3, #4
 8003c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c50:	4641      	mov	r1, r8
 8003c52:	eb12 0a01 	adds.w	sl, r2, r1
 8003c56:	4649      	mov	r1, r9
 8003c58:	eb43 0b01 	adc.w	fp, r3, r1
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c70:	4692      	mov	sl, r2
 8003c72:	469b      	mov	fp, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	eb1a 0303 	adds.w	r3, sl, r3
 8003c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	eb4b 0303 	adc.w	r3, fp, r3
 8003c84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	18db      	adds	r3, r3, r3
 8003ca0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	eb42 0303 	adc.w	r3, r2, r3
 8003ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cb2:	f7fc fa89 	bl	80001c8 <__aeabi_uldivmod>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8003dac <UART_SetConfig+0x2d4>)
 8003cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2264      	movs	r2, #100	@ 0x64
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	1acb      	subs	r3, r1, r3
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cd2:	4b36      	ldr	r3, [pc, #216]	@ (8003dac <UART_SetConfig+0x2d4>)
 8003cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ce0:	441c      	add	r4, r3
 8003ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	1891      	adds	r1, r2, r2
 8003cfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d04:	4641      	mov	r1, r8
 8003d06:	1851      	adds	r1, r2, r1
 8003d08:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	414b      	adcs	r3, r1
 8003d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	00cb      	lsls	r3, r1, #3
 8003d20:	4651      	mov	r1, sl
 8003d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d26:	4651      	mov	r1, sl
 8003d28:	00ca      	lsls	r2, r1, #3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4642      	mov	r2, r8
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d38:	464b      	mov	r3, r9
 8003d3a:	460a      	mov	r2, r1
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d58:	460b      	mov	r3, r1
 8003d5a:	18db      	adds	r3, r3, r3
 8003d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d5e:	4613      	mov	r3, r2
 8003d60:	eb42 0303 	adc.w	r3, r2, r3
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d6e:	f7fc fa2b 	bl	80001c8 <__aeabi_uldivmod>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <UART_SetConfig+0x2d4>)
 8003d78:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	2164      	movs	r1, #100	@ 0x64
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	3332      	adds	r3, #50	@ 0x32
 8003d8a:	4a08      	ldr	r2, [pc, #32]	@ (8003dac <UART_SetConfig+0x2d4>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	f003 0207 	and.w	r2, r3, #7
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4422      	add	r2, r4
 8003d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003da0:	e106      	b.n	8003fb0 <UART_SetConfig+0x4d8>
 8003da2:	bf00      	nop
 8003da4:	40011000 	.word	0x40011000
 8003da8:	40011400 	.word	0x40011400
 8003dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dc2:	4642      	mov	r2, r8
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	1891      	adds	r1, r2, r2
 8003dc8:	6239      	str	r1, [r7, #32]
 8003dca:	415b      	adcs	r3, r3
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	1854      	adds	r4, r2, r1
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	eb43 0501 	adc.w	r5, r3, r1
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	00eb      	lsls	r3, r5, #3
 8003de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dea:	00e2      	lsls	r2, r4, #3
 8003dec:	4614      	mov	r4, r2
 8003dee:	461d      	mov	r5, r3
 8003df0:	4643      	mov	r3, r8
 8003df2:	18e3      	adds	r3, r4, r3
 8003df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003df8:	464b      	mov	r3, r9
 8003dfa:	eb45 0303 	adc.w	r3, r5, r3
 8003dfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e1e:	4629      	mov	r1, r5
 8003e20:	008b      	lsls	r3, r1, #2
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e28:	4621      	mov	r1, r4
 8003e2a:	008a      	lsls	r2, r1, #2
 8003e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e30:	f7fc f9ca 	bl	80001c8 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4b60      	ldr	r3, [pc, #384]	@ (8003fbc <UART_SetConfig+0x4e4>)
 8003e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	011c      	lsls	r4, r3, #4
 8003e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e54:	4642      	mov	r2, r8
 8003e56:	464b      	mov	r3, r9
 8003e58:	1891      	adds	r1, r2, r2
 8003e5a:	61b9      	str	r1, [r7, #24]
 8003e5c:	415b      	adcs	r3, r3
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e64:	4641      	mov	r1, r8
 8003e66:	1851      	adds	r1, r2, r1
 8003e68:	6139      	str	r1, [r7, #16]
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	414b      	adcs	r3, r1
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e7c:	4659      	mov	r1, fp
 8003e7e:	00cb      	lsls	r3, r1, #3
 8003e80:	4651      	mov	r1, sl
 8003e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e86:	4651      	mov	r1, sl
 8003e88:	00ca      	lsls	r2, r1, #3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4642      	mov	r2, r8
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e98:	464b      	mov	r3, r9
 8003e9a:	460a      	mov	r2, r1
 8003e9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	008b      	lsls	r3, r1, #2
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	008a      	lsls	r2, r1, #2
 8003eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ece:	f7fc f97b 	bl	80001c8 <__aeabi_uldivmod>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4b38      	ldr	r3, [pc, #224]	@ (8003fbc <UART_SetConfig+0x4e4>)
 8003eda:	fba3 2301 	umull	r2, r3, r3, r1
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2264      	movs	r2, #100	@ 0x64
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	1acb      	subs	r3, r1, r3
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	3332      	adds	r3, #50	@ 0x32
 8003eec:	4a33      	ldr	r2, [pc, #204]	@ (8003fbc <UART_SetConfig+0x4e4>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ef8:	441c      	add	r4, r3
 8003efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003efe:	2200      	movs	r2, #0
 8003f00:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f02:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f08:	4642      	mov	r2, r8
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	1891      	adds	r1, r2, r2
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	415b      	adcs	r3, r3
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f18:	4641      	mov	r1, r8
 8003f1a:	1851      	adds	r1, r2, r1
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	4649      	mov	r1, r9
 8003f20:	414b      	adcs	r3, r1
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f30:	4659      	mov	r1, fp
 8003f32:	00cb      	lsls	r3, r1, #3
 8003f34:	4651      	mov	r1, sl
 8003f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3a:	4651      	mov	r1, sl
 8003f3c:	00ca      	lsls	r2, r1, #3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	4619      	mov	r1, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	4642      	mov	r2, r8
 8003f46:	189b      	adds	r3, r3, r2
 8003f48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	460a      	mov	r2, r1
 8003f4e:	eb42 0303 	adc.w	r3, r2, r3
 8003f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	008b      	lsls	r3, r1, #2
 8003f70:	4641      	mov	r1, r8
 8003f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f76:	4641      	mov	r1, r8
 8003f78:	008a      	lsls	r2, r1, #2
 8003f7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f7e:	f7fc f923 	bl	80001c8 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4b0d      	ldr	r3, [pc, #52]	@ (8003fbc <UART_SetConfig+0x4e4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	@ 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	3332      	adds	r3, #50	@ 0x32
 8003f9a:	4a08      	ldr	r2, [pc, #32]	@ (8003fbc <UART_SetConfig+0x4e4>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4422      	add	r2, r4
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fbc:	51eb851f 	.word	0x51eb851f

08003fc0 <std>:
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	b510      	push	{r4, lr}
 8003fc4:	4604      	mov	r4, r0
 8003fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8003fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fce:	6083      	str	r3, [r0, #8]
 8003fd0:	8181      	strh	r1, [r0, #12]
 8003fd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003fd4:	81c2      	strh	r2, [r0, #14]
 8003fd6:	6183      	str	r3, [r0, #24]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	2208      	movs	r2, #8
 8003fdc:	305c      	adds	r0, #92	@ 0x5c
 8003fde:	f000 f9e7 	bl	80043b0 <memset>
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <std+0x58>)
 8003fe4:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <std+0x5c>)
 8003fe8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fea:	4b0d      	ldr	r3, [pc, #52]	@ (8004020 <std+0x60>)
 8003fec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fee:	4b0d      	ldr	r3, [pc, #52]	@ (8004024 <std+0x64>)
 8003ff0:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <std+0x68>)
 8003ff4:	6224      	str	r4, [r4, #32]
 8003ff6:	429c      	cmp	r4, r3
 8003ff8:	d006      	beq.n	8004008 <std+0x48>
 8003ffa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ffe:	4294      	cmp	r4, r2
 8004000:	d002      	beq.n	8004008 <std+0x48>
 8004002:	33d0      	adds	r3, #208	@ 0xd0
 8004004:	429c      	cmp	r4, r3
 8004006:	d105      	bne.n	8004014 <std+0x54>
 8004008:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800400c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004010:	f000 ba46 	b.w	80044a0 <__retarget_lock_init_recursive>
 8004014:	bd10      	pop	{r4, pc}
 8004016:	bf00      	nop
 8004018:	08004201 	.word	0x08004201
 800401c:	08004223 	.word	0x08004223
 8004020:	0800425b 	.word	0x0800425b
 8004024:	0800427f 	.word	0x0800427f
 8004028:	200002e8 	.word	0x200002e8

0800402c <stdio_exit_handler>:
 800402c:	4a02      	ldr	r2, [pc, #8]	@ (8004038 <stdio_exit_handler+0xc>)
 800402e:	4903      	ldr	r1, [pc, #12]	@ (800403c <stdio_exit_handler+0x10>)
 8004030:	4803      	ldr	r0, [pc, #12]	@ (8004040 <stdio_exit_handler+0x14>)
 8004032:	f000 b869 	b.w	8004108 <_fwalk_sglue>
 8004036:	bf00      	nop
 8004038:	20000014 	.word	0x20000014
 800403c:	080047a1 	.word	0x080047a1
 8004040:	20000024 	.word	0x20000024

08004044 <cleanup_stdio>:
 8004044:	6841      	ldr	r1, [r0, #4]
 8004046:	4b0c      	ldr	r3, [pc, #48]	@ (8004078 <cleanup_stdio+0x34>)
 8004048:	4299      	cmp	r1, r3
 800404a:	b510      	push	{r4, lr}
 800404c:	4604      	mov	r4, r0
 800404e:	d001      	beq.n	8004054 <cleanup_stdio+0x10>
 8004050:	f000 fba6 	bl	80047a0 <_fflush_r>
 8004054:	68a1      	ldr	r1, [r4, #8]
 8004056:	4b09      	ldr	r3, [pc, #36]	@ (800407c <cleanup_stdio+0x38>)
 8004058:	4299      	cmp	r1, r3
 800405a:	d002      	beq.n	8004062 <cleanup_stdio+0x1e>
 800405c:	4620      	mov	r0, r4
 800405e:	f000 fb9f 	bl	80047a0 <_fflush_r>
 8004062:	68e1      	ldr	r1, [r4, #12]
 8004064:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <cleanup_stdio+0x3c>)
 8004066:	4299      	cmp	r1, r3
 8004068:	d004      	beq.n	8004074 <cleanup_stdio+0x30>
 800406a:	4620      	mov	r0, r4
 800406c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004070:	f000 bb96 	b.w	80047a0 <_fflush_r>
 8004074:	bd10      	pop	{r4, pc}
 8004076:	bf00      	nop
 8004078:	200002e8 	.word	0x200002e8
 800407c:	20000350 	.word	0x20000350
 8004080:	200003b8 	.word	0x200003b8

08004084 <global_stdio_init.part.0>:
 8004084:	b510      	push	{r4, lr}
 8004086:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <global_stdio_init.part.0+0x30>)
 8004088:	4c0b      	ldr	r4, [pc, #44]	@ (80040b8 <global_stdio_init.part.0+0x34>)
 800408a:	4a0c      	ldr	r2, [pc, #48]	@ (80040bc <global_stdio_init.part.0+0x38>)
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	4620      	mov	r0, r4
 8004090:	2200      	movs	r2, #0
 8004092:	2104      	movs	r1, #4
 8004094:	f7ff ff94 	bl	8003fc0 <std>
 8004098:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800409c:	2201      	movs	r2, #1
 800409e:	2109      	movs	r1, #9
 80040a0:	f7ff ff8e 	bl	8003fc0 <std>
 80040a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80040a8:	2202      	movs	r2, #2
 80040aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040ae:	2112      	movs	r1, #18
 80040b0:	f7ff bf86 	b.w	8003fc0 <std>
 80040b4:	20000420 	.word	0x20000420
 80040b8:	200002e8 	.word	0x200002e8
 80040bc:	0800402d 	.word	0x0800402d

080040c0 <__sfp_lock_acquire>:
 80040c0:	4801      	ldr	r0, [pc, #4]	@ (80040c8 <__sfp_lock_acquire+0x8>)
 80040c2:	f000 b9ee 	b.w	80044a2 <__retarget_lock_acquire_recursive>
 80040c6:	bf00      	nop
 80040c8:	20000429 	.word	0x20000429

080040cc <__sfp_lock_release>:
 80040cc:	4801      	ldr	r0, [pc, #4]	@ (80040d4 <__sfp_lock_release+0x8>)
 80040ce:	f000 b9e9 	b.w	80044a4 <__retarget_lock_release_recursive>
 80040d2:	bf00      	nop
 80040d4:	20000429 	.word	0x20000429

080040d8 <__sinit>:
 80040d8:	b510      	push	{r4, lr}
 80040da:	4604      	mov	r4, r0
 80040dc:	f7ff fff0 	bl	80040c0 <__sfp_lock_acquire>
 80040e0:	6a23      	ldr	r3, [r4, #32]
 80040e2:	b11b      	cbz	r3, 80040ec <__sinit+0x14>
 80040e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040e8:	f7ff bff0 	b.w	80040cc <__sfp_lock_release>
 80040ec:	4b04      	ldr	r3, [pc, #16]	@ (8004100 <__sinit+0x28>)
 80040ee:	6223      	str	r3, [r4, #32]
 80040f0:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <__sinit+0x2c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f5      	bne.n	80040e4 <__sinit+0xc>
 80040f8:	f7ff ffc4 	bl	8004084 <global_stdio_init.part.0>
 80040fc:	e7f2      	b.n	80040e4 <__sinit+0xc>
 80040fe:	bf00      	nop
 8004100:	08004045 	.word	0x08004045
 8004104:	20000420 	.word	0x20000420

08004108 <_fwalk_sglue>:
 8004108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800410c:	4607      	mov	r7, r0
 800410e:	4688      	mov	r8, r1
 8004110:	4614      	mov	r4, r2
 8004112:	2600      	movs	r6, #0
 8004114:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004118:	f1b9 0901 	subs.w	r9, r9, #1
 800411c:	d505      	bpl.n	800412a <_fwalk_sglue+0x22>
 800411e:	6824      	ldr	r4, [r4, #0]
 8004120:	2c00      	cmp	r4, #0
 8004122:	d1f7      	bne.n	8004114 <_fwalk_sglue+0xc>
 8004124:	4630      	mov	r0, r6
 8004126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800412a:	89ab      	ldrh	r3, [r5, #12]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d907      	bls.n	8004140 <_fwalk_sglue+0x38>
 8004130:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004134:	3301      	adds	r3, #1
 8004136:	d003      	beq.n	8004140 <_fwalk_sglue+0x38>
 8004138:	4629      	mov	r1, r5
 800413a:	4638      	mov	r0, r7
 800413c:	47c0      	blx	r8
 800413e:	4306      	orrs	r6, r0
 8004140:	3568      	adds	r5, #104	@ 0x68
 8004142:	e7e9      	b.n	8004118 <_fwalk_sglue+0x10>

08004144 <_puts_r>:
 8004144:	6a03      	ldr	r3, [r0, #32]
 8004146:	b570      	push	{r4, r5, r6, lr}
 8004148:	6884      	ldr	r4, [r0, #8]
 800414a:	4605      	mov	r5, r0
 800414c:	460e      	mov	r6, r1
 800414e:	b90b      	cbnz	r3, 8004154 <_puts_r+0x10>
 8004150:	f7ff ffc2 	bl	80040d8 <__sinit>
 8004154:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004156:	07db      	lsls	r3, r3, #31
 8004158:	d405      	bmi.n	8004166 <_puts_r+0x22>
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	0598      	lsls	r0, r3, #22
 800415e:	d402      	bmi.n	8004166 <_puts_r+0x22>
 8004160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004162:	f000 f99e 	bl	80044a2 <__retarget_lock_acquire_recursive>
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	0719      	lsls	r1, r3, #28
 800416a:	d502      	bpl.n	8004172 <_puts_r+0x2e>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d135      	bne.n	80041de <_puts_r+0x9a>
 8004172:	4621      	mov	r1, r4
 8004174:	4628      	mov	r0, r5
 8004176:	f000 f8c5 	bl	8004304 <__swsetup_r>
 800417a:	b380      	cbz	r0, 80041de <_puts_r+0x9a>
 800417c:	f04f 35ff 	mov.w	r5, #4294967295
 8004180:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004182:	07da      	lsls	r2, r3, #31
 8004184:	d405      	bmi.n	8004192 <_puts_r+0x4e>
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	059b      	lsls	r3, r3, #22
 800418a:	d402      	bmi.n	8004192 <_puts_r+0x4e>
 800418c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800418e:	f000 f989 	bl	80044a4 <__retarget_lock_release_recursive>
 8004192:	4628      	mov	r0, r5
 8004194:	bd70      	pop	{r4, r5, r6, pc}
 8004196:	2b00      	cmp	r3, #0
 8004198:	da04      	bge.n	80041a4 <_puts_r+0x60>
 800419a:	69a2      	ldr	r2, [r4, #24]
 800419c:	429a      	cmp	r2, r3
 800419e:	dc17      	bgt.n	80041d0 <_puts_r+0x8c>
 80041a0:	290a      	cmp	r1, #10
 80041a2:	d015      	beq.n	80041d0 <_puts_r+0x8c>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	6022      	str	r2, [r4, #0]
 80041aa:	7019      	strb	r1, [r3, #0]
 80041ac:	68a3      	ldr	r3, [r4, #8]
 80041ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041b2:	3b01      	subs	r3, #1
 80041b4:	60a3      	str	r3, [r4, #8]
 80041b6:	2900      	cmp	r1, #0
 80041b8:	d1ed      	bne.n	8004196 <_puts_r+0x52>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	da11      	bge.n	80041e2 <_puts_r+0x9e>
 80041be:	4622      	mov	r2, r4
 80041c0:	210a      	movs	r1, #10
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f85f 	bl	8004286 <__swbuf_r>
 80041c8:	3001      	adds	r0, #1
 80041ca:	d0d7      	beq.n	800417c <_puts_r+0x38>
 80041cc:	250a      	movs	r5, #10
 80041ce:	e7d7      	b.n	8004180 <_puts_r+0x3c>
 80041d0:	4622      	mov	r2, r4
 80041d2:	4628      	mov	r0, r5
 80041d4:	f000 f857 	bl	8004286 <__swbuf_r>
 80041d8:	3001      	adds	r0, #1
 80041da:	d1e7      	bne.n	80041ac <_puts_r+0x68>
 80041dc:	e7ce      	b.n	800417c <_puts_r+0x38>
 80041de:	3e01      	subs	r6, #1
 80041e0:	e7e4      	b.n	80041ac <_puts_r+0x68>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	6022      	str	r2, [r4, #0]
 80041e8:	220a      	movs	r2, #10
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e7ee      	b.n	80041cc <_puts_r+0x88>
	...

080041f0 <puts>:
 80041f0:	4b02      	ldr	r3, [pc, #8]	@ (80041fc <puts+0xc>)
 80041f2:	4601      	mov	r1, r0
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	f7ff bfa5 	b.w	8004144 <_puts_r>
 80041fa:	bf00      	nop
 80041fc:	20000020 	.word	0x20000020

08004200 <__sread>:
 8004200:	b510      	push	{r4, lr}
 8004202:	460c      	mov	r4, r1
 8004204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004208:	f000 f8fc 	bl	8004404 <_read_r>
 800420c:	2800      	cmp	r0, #0
 800420e:	bfab      	itete	ge
 8004210:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004212:	89a3      	ldrhlt	r3, [r4, #12]
 8004214:	181b      	addge	r3, r3, r0
 8004216:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800421a:	bfac      	ite	ge
 800421c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800421e:	81a3      	strhlt	r3, [r4, #12]
 8004220:	bd10      	pop	{r4, pc}

08004222 <__swrite>:
 8004222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004226:	461f      	mov	r7, r3
 8004228:	898b      	ldrh	r3, [r1, #12]
 800422a:	05db      	lsls	r3, r3, #23
 800422c:	4605      	mov	r5, r0
 800422e:	460c      	mov	r4, r1
 8004230:	4616      	mov	r6, r2
 8004232:	d505      	bpl.n	8004240 <__swrite+0x1e>
 8004234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004238:	2302      	movs	r3, #2
 800423a:	2200      	movs	r2, #0
 800423c:	f000 f8d0 	bl	80043e0 <_lseek_r>
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004246:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800424a:	81a3      	strh	r3, [r4, #12]
 800424c:	4632      	mov	r2, r6
 800424e:	463b      	mov	r3, r7
 8004250:	4628      	mov	r0, r5
 8004252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004256:	f000 b8e7 	b.w	8004428 <_write_r>

0800425a <__sseek>:
 800425a:	b510      	push	{r4, lr}
 800425c:	460c      	mov	r4, r1
 800425e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004262:	f000 f8bd 	bl	80043e0 <_lseek_r>
 8004266:	1c43      	adds	r3, r0, #1
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	bf15      	itete	ne
 800426c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800426e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004272:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004276:	81a3      	strheq	r3, [r4, #12]
 8004278:	bf18      	it	ne
 800427a:	81a3      	strhne	r3, [r4, #12]
 800427c:	bd10      	pop	{r4, pc}

0800427e <__sclose>:
 800427e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004282:	f000 b89d 	b.w	80043c0 <_close_r>

08004286 <__swbuf_r>:
 8004286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004288:	460e      	mov	r6, r1
 800428a:	4614      	mov	r4, r2
 800428c:	4605      	mov	r5, r0
 800428e:	b118      	cbz	r0, 8004298 <__swbuf_r+0x12>
 8004290:	6a03      	ldr	r3, [r0, #32]
 8004292:	b90b      	cbnz	r3, 8004298 <__swbuf_r+0x12>
 8004294:	f7ff ff20 	bl	80040d8 <__sinit>
 8004298:	69a3      	ldr	r3, [r4, #24]
 800429a:	60a3      	str	r3, [r4, #8]
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	071a      	lsls	r2, r3, #28
 80042a0:	d501      	bpl.n	80042a6 <__swbuf_r+0x20>
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	b943      	cbnz	r3, 80042b8 <__swbuf_r+0x32>
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 f82b 	bl	8004304 <__swsetup_r>
 80042ae:	b118      	cbz	r0, 80042b8 <__swbuf_r+0x32>
 80042b0:	f04f 37ff 	mov.w	r7, #4294967295
 80042b4:	4638      	mov	r0, r7
 80042b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	6922      	ldr	r2, [r4, #16]
 80042bc:	1a98      	subs	r0, r3, r2
 80042be:	6963      	ldr	r3, [r4, #20]
 80042c0:	b2f6      	uxtb	r6, r6
 80042c2:	4283      	cmp	r3, r0
 80042c4:	4637      	mov	r7, r6
 80042c6:	dc05      	bgt.n	80042d4 <__swbuf_r+0x4e>
 80042c8:	4621      	mov	r1, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	f000 fa68 	bl	80047a0 <_fflush_r>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d1ed      	bne.n	80042b0 <__swbuf_r+0x2a>
 80042d4:	68a3      	ldr	r3, [r4, #8]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	60a3      	str	r3, [r4, #8]
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	6022      	str	r2, [r4, #0]
 80042e0:	701e      	strb	r6, [r3, #0]
 80042e2:	6962      	ldr	r2, [r4, #20]
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d004      	beq.n	80042f4 <__swbuf_r+0x6e>
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	07db      	lsls	r3, r3, #31
 80042ee:	d5e1      	bpl.n	80042b4 <__swbuf_r+0x2e>
 80042f0:	2e0a      	cmp	r6, #10
 80042f2:	d1df      	bne.n	80042b4 <__swbuf_r+0x2e>
 80042f4:	4621      	mov	r1, r4
 80042f6:	4628      	mov	r0, r5
 80042f8:	f000 fa52 	bl	80047a0 <_fflush_r>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d0d9      	beq.n	80042b4 <__swbuf_r+0x2e>
 8004300:	e7d6      	b.n	80042b0 <__swbuf_r+0x2a>
	...

08004304 <__swsetup_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4b29      	ldr	r3, [pc, #164]	@ (80043ac <__swsetup_r+0xa8>)
 8004308:	4605      	mov	r5, r0
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	460c      	mov	r4, r1
 800430e:	b118      	cbz	r0, 8004318 <__swsetup_r+0x14>
 8004310:	6a03      	ldr	r3, [r0, #32]
 8004312:	b90b      	cbnz	r3, 8004318 <__swsetup_r+0x14>
 8004314:	f7ff fee0 	bl	80040d8 <__sinit>
 8004318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431c:	0719      	lsls	r1, r3, #28
 800431e:	d422      	bmi.n	8004366 <__swsetup_r+0x62>
 8004320:	06da      	lsls	r2, r3, #27
 8004322:	d407      	bmi.n	8004334 <__swsetup_r+0x30>
 8004324:	2209      	movs	r2, #9
 8004326:	602a      	str	r2, [r5, #0]
 8004328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	f04f 30ff 	mov.w	r0, #4294967295
 8004332:	e033      	b.n	800439c <__swsetup_r+0x98>
 8004334:	0758      	lsls	r0, r3, #29
 8004336:	d512      	bpl.n	800435e <__swsetup_r+0x5a>
 8004338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800433a:	b141      	cbz	r1, 800434e <__swsetup_r+0x4a>
 800433c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004340:	4299      	cmp	r1, r3
 8004342:	d002      	beq.n	800434a <__swsetup_r+0x46>
 8004344:	4628      	mov	r0, r5
 8004346:	f000 f8af 	bl	80044a8 <_free_r>
 800434a:	2300      	movs	r3, #0
 800434c:	6363      	str	r3, [r4, #52]	@ 0x34
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004354:	81a3      	strh	r3, [r4, #12]
 8004356:	2300      	movs	r3, #0
 8004358:	6063      	str	r3, [r4, #4]
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	f043 0308 	orr.w	r3, r3, #8
 8004364:	81a3      	strh	r3, [r4, #12]
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	b94b      	cbnz	r3, 800437e <__swsetup_r+0x7a>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004374:	d003      	beq.n	800437e <__swsetup_r+0x7a>
 8004376:	4621      	mov	r1, r4
 8004378:	4628      	mov	r0, r5
 800437a:	f000 fa5f 	bl	800483c <__smakebuf_r>
 800437e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004382:	f013 0201 	ands.w	r2, r3, #1
 8004386:	d00a      	beq.n	800439e <__swsetup_r+0x9a>
 8004388:	2200      	movs	r2, #0
 800438a:	60a2      	str	r2, [r4, #8]
 800438c:	6962      	ldr	r2, [r4, #20]
 800438e:	4252      	negs	r2, r2
 8004390:	61a2      	str	r2, [r4, #24]
 8004392:	6922      	ldr	r2, [r4, #16]
 8004394:	b942      	cbnz	r2, 80043a8 <__swsetup_r+0xa4>
 8004396:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800439a:	d1c5      	bne.n	8004328 <__swsetup_r+0x24>
 800439c:	bd38      	pop	{r3, r4, r5, pc}
 800439e:	0799      	lsls	r1, r3, #30
 80043a0:	bf58      	it	pl
 80043a2:	6962      	ldrpl	r2, [r4, #20]
 80043a4:	60a2      	str	r2, [r4, #8]
 80043a6:	e7f4      	b.n	8004392 <__swsetup_r+0x8e>
 80043a8:	2000      	movs	r0, #0
 80043aa:	e7f7      	b.n	800439c <__swsetup_r+0x98>
 80043ac:	20000020 	.word	0x20000020

080043b0 <memset>:
 80043b0:	4402      	add	r2, r0
 80043b2:	4603      	mov	r3, r0
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d100      	bne.n	80043ba <memset+0xa>
 80043b8:	4770      	bx	lr
 80043ba:	f803 1b01 	strb.w	r1, [r3], #1
 80043be:	e7f9      	b.n	80043b4 <memset+0x4>

080043c0 <_close_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4d06      	ldr	r5, [pc, #24]	@ (80043dc <_close_r+0x1c>)
 80043c4:	2300      	movs	r3, #0
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	f7fc fb69 	bl	8000aa2 <_close>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d102      	bne.n	80043da <_close_r+0x1a>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	b103      	cbz	r3, 80043da <_close_r+0x1a>
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	20000424 	.word	0x20000424

080043e0 <_lseek_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d07      	ldr	r5, [pc, #28]	@ (8004400 <_lseek_r+0x20>)
 80043e4:	4604      	mov	r4, r0
 80043e6:	4608      	mov	r0, r1
 80043e8:	4611      	mov	r1, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	602a      	str	r2, [r5, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f7fc fb7e 	bl	8000af0 <_lseek>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	d102      	bne.n	80043fe <_lseek_r+0x1e>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	b103      	cbz	r3, 80043fe <_lseek_r+0x1e>
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	bd38      	pop	{r3, r4, r5, pc}
 8004400:	20000424 	.word	0x20000424

08004404 <_read_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4d07      	ldr	r5, [pc, #28]	@ (8004424 <_read_r+0x20>)
 8004408:	4604      	mov	r4, r0
 800440a:	4608      	mov	r0, r1
 800440c:	4611      	mov	r1, r2
 800440e:	2200      	movs	r2, #0
 8004410:	602a      	str	r2, [r5, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	f7fc fb0c 	bl	8000a30 <_read>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d102      	bne.n	8004422 <_read_r+0x1e>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	b103      	cbz	r3, 8004422 <_read_r+0x1e>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	20000424 	.word	0x20000424

08004428 <_write_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4d07      	ldr	r5, [pc, #28]	@ (8004448 <_write_r+0x20>)
 800442c:	4604      	mov	r4, r0
 800442e:	4608      	mov	r0, r1
 8004430:	4611      	mov	r1, r2
 8004432:	2200      	movs	r2, #0
 8004434:	602a      	str	r2, [r5, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	f7fc fb17 	bl	8000a6a <_write>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_write_r+0x1e>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_write_r+0x1e>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	20000424 	.word	0x20000424

0800444c <__errno>:
 800444c:	4b01      	ldr	r3, [pc, #4]	@ (8004454 <__errno+0x8>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000020 	.word	0x20000020

08004458 <__libc_init_array>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	4d0d      	ldr	r5, [pc, #52]	@ (8004490 <__libc_init_array+0x38>)
 800445c:	4c0d      	ldr	r4, [pc, #52]	@ (8004494 <__libc_init_array+0x3c>)
 800445e:	1b64      	subs	r4, r4, r5
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	2600      	movs	r6, #0
 8004464:	42a6      	cmp	r6, r4
 8004466:	d109      	bne.n	800447c <__libc_init_array+0x24>
 8004468:	4d0b      	ldr	r5, [pc, #44]	@ (8004498 <__libc_init_array+0x40>)
 800446a:	4c0c      	ldr	r4, [pc, #48]	@ (800449c <__libc_init_array+0x44>)
 800446c:	f000 fa54 	bl	8004918 <_init>
 8004470:	1b64      	subs	r4, r4, r5
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	2600      	movs	r6, #0
 8004476:	42a6      	cmp	r6, r4
 8004478:	d105      	bne.n	8004486 <__libc_init_array+0x2e>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004480:	4798      	blx	r3
 8004482:	3601      	adds	r6, #1
 8004484:	e7ee      	b.n	8004464 <__libc_init_array+0xc>
 8004486:	f855 3b04 	ldr.w	r3, [r5], #4
 800448a:	4798      	blx	r3
 800448c:	3601      	adds	r6, #1
 800448e:	e7f2      	b.n	8004476 <__libc_init_array+0x1e>
 8004490:	08004964 	.word	0x08004964
 8004494:	08004964 	.word	0x08004964
 8004498:	08004964 	.word	0x08004964
 800449c:	08004968 	.word	0x08004968

080044a0 <__retarget_lock_init_recursive>:
 80044a0:	4770      	bx	lr

080044a2 <__retarget_lock_acquire_recursive>:
 80044a2:	4770      	bx	lr

080044a4 <__retarget_lock_release_recursive>:
 80044a4:	4770      	bx	lr
	...

080044a8 <_free_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4605      	mov	r5, r0
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d041      	beq.n	8004534 <_free_r+0x8c>
 80044b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b4:	1f0c      	subs	r4, r1, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bfb8      	it	lt
 80044ba:	18e4      	addlt	r4, r4, r3
 80044bc:	f000 f8e0 	bl	8004680 <__malloc_lock>
 80044c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004538 <_free_r+0x90>)
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	b933      	cbnz	r3, 80044d4 <_free_r+0x2c>
 80044c6:	6063      	str	r3, [r4, #4]
 80044c8:	6014      	str	r4, [r2, #0]
 80044ca:	4628      	mov	r0, r5
 80044cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044d0:	f000 b8dc 	b.w	800468c <__malloc_unlock>
 80044d4:	42a3      	cmp	r3, r4
 80044d6:	d908      	bls.n	80044ea <_free_r+0x42>
 80044d8:	6820      	ldr	r0, [r4, #0]
 80044da:	1821      	adds	r1, r4, r0
 80044dc:	428b      	cmp	r3, r1
 80044de:	bf01      	itttt	eq
 80044e0:	6819      	ldreq	r1, [r3, #0]
 80044e2:	685b      	ldreq	r3, [r3, #4]
 80044e4:	1809      	addeq	r1, r1, r0
 80044e6:	6021      	streq	r1, [r4, #0]
 80044e8:	e7ed      	b.n	80044c6 <_free_r+0x1e>
 80044ea:	461a      	mov	r2, r3
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	b10b      	cbz	r3, 80044f4 <_free_r+0x4c>
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d9fa      	bls.n	80044ea <_free_r+0x42>
 80044f4:	6811      	ldr	r1, [r2, #0]
 80044f6:	1850      	adds	r0, r2, r1
 80044f8:	42a0      	cmp	r0, r4
 80044fa:	d10b      	bne.n	8004514 <_free_r+0x6c>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	4401      	add	r1, r0
 8004500:	1850      	adds	r0, r2, r1
 8004502:	4283      	cmp	r3, r0
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	d1e0      	bne.n	80044ca <_free_r+0x22>
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	6053      	str	r3, [r2, #4]
 800450e:	4408      	add	r0, r1
 8004510:	6010      	str	r0, [r2, #0]
 8004512:	e7da      	b.n	80044ca <_free_r+0x22>
 8004514:	d902      	bls.n	800451c <_free_r+0x74>
 8004516:	230c      	movs	r3, #12
 8004518:	602b      	str	r3, [r5, #0]
 800451a:	e7d6      	b.n	80044ca <_free_r+0x22>
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	1821      	adds	r1, r4, r0
 8004520:	428b      	cmp	r3, r1
 8004522:	bf04      	itt	eq
 8004524:	6819      	ldreq	r1, [r3, #0]
 8004526:	685b      	ldreq	r3, [r3, #4]
 8004528:	6063      	str	r3, [r4, #4]
 800452a:	bf04      	itt	eq
 800452c:	1809      	addeq	r1, r1, r0
 800452e:	6021      	streq	r1, [r4, #0]
 8004530:	6054      	str	r4, [r2, #4]
 8004532:	e7ca      	b.n	80044ca <_free_r+0x22>
 8004534:	bd38      	pop	{r3, r4, r5, pc}
 8004536:	bf00      	nop
 8004538:	20000430 	.word	0x20000430

0800453c <sbrk_aligned>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4e0f      	ldr	r6, [pc, #60]	@ (800457c <sbrk_aligned+0x40>)
 8004540:	460c      	mov	r4, r1
 8004542:	6831      	ldr	r1, [r6, #0]
 8004544:	4605      	mov	r5, r0
 8004546:	b911      	cbnz	r1, 800454e <sbrk_aligned+0x12>
 8004548:	f000 f9d6 	bl	80048f8 <_sbrk_r>
 800454c:	6030      	str	r0, [r6, #0]
 800454e:	4621      	mov	r1, r4
 8004550:	4628      	mov	r0, r5
 8004552:	f000 f9d1 	bl	80048f8 <_sbrk_r>
 8004556:	1c43      	adds	r3, r0, #1
 8004558:	d103      	bne.n	8004562 <sbrk_aligned+0x26>
 800455a:	f04f 34ff 	mov.w	r4, #4294967295
 800455e:	4620      	mov	r0, r4
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	1cc4      	adds	r4, r0, #3
 8004564:	f024 0403 	bic.w	r4, r4, #3
 8004568:	42a0      	cmp	r0, r4
 800456a:	d0f8      	beq.n	800455e <sbrk_aligned+0x22>
 800456c:	1a21      	subs	r1, r4, r0
 800456e:	4628      	mov	r0, r5
 8004570:	f000 f9c2 	bl	80048f8 <_sbrk_r>
 8004574:	3001      	adds	r0, #1
 8004576:	d1f2      	bne.n	800455e <sbrk_aligned+0x22>
 8004578:	e7ef      	b.n	800455a <sbrk_aligned+0x1e>
 800457a:	bf00      	nop
 800457c:	2000042c 	.word	0x2000042c

08004580 <_malloc_r>:
 8004580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004584:	1ccd      	adds	r5, r1, #3
 8004586:	f025 0503 	bic.w	r5, r5, #3
 800458a:	3508      	adds	r5, #8
 800458c:	2d0c      	cmp	r5, #12
 800458e:	bf38      	it	cc
 8004590:	250c      	movcc	r5, #12
 8004592:	2d00      	cmp	r5, #0
 8004594:	4606      	mov	r6, r0
 8004596:	db01      	blt.n	800459c <_malloc_r+0x1c>
 8004598:	42a9      	cmp	r1, r5
 800459a:	d904      	bls.n	80045a6 <_malloc_r+0x26>
 800459c:	230c      	movs	r3, #12
 800459e:	6033      	str	r3, [r6, #0]
 80045a0:	2000      	movs	r0, #0
 80045a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800467c <_malloc_r+0xfc>
 80045aa:	f000 f869 	bl	8004680 <__malloc_lock>
 80045ae:	f8d8 3000 	ldr.w	r3, [r8]
 80045b2:	461c      	mov	r4, r3
 80045b4:	bb44      	cbnz	r4, 8004608 <_malloc_r+0x88>
 80045b6:	4629      	mov	r1, r5
 80045b8:	4630      	mov	r0, r6
 80045ba:	f7ff ffbf 	bl	800453c <sbrk_aligned>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	4604      	mov	r4, r0
 80045c2:	d158      	bne.n	8004676 <_malloc_r+0xf6>
 80045c4:	f8d8 4000 	ldr.w	r4, [r8]
 80045c8:	4627      	mov	r7, r4
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	d143      	bne.n	8004656 <_malloc_r+0xd6>
 80045ce:	2c00      	cmp	r4, #0
 80045d0:	d04b      	beq.n	800466a <_malloc_r+0xea>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	4639      	mov	r1, r7
 80045d6:	4630      	mov	r0, r6
 80045d8:	eb04 0903 	add.w	r9, r4, r3
 80045dc:	f000 f98c 	bl	80048f8 <_sbrk_r>
 80045e0:	4581      	cmp	r9, r0
 80045e2:	d142      	bne.n	800466a <_malloc_r+0xea>
 80045e4:	6821      	ldr	r1, [r4, #0]
 80045e6:	1a6d      	subs	r5, r5, r1
 80045e8:	4629      	mov	r1, r5
 80045ea:	4630      	mov	r0, r6
 80045ec:	f7ff ffa6 	bl	800453c <sbrk_aligned>
 80045f0:	3001      	adds	r0, #1
 80045f2:	d03a      	beq.n	800466a <_malloc_r+0xea>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	442b      	add	r3, r5
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	f8d8 3000 	ldr.w	r3, [r8]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	bb62      	cbnz	r2, 800465c <_malloc_r+0xdc>
 8004602:	f8c8 7000 	str.w	r7, [r8]
 8004606:	e00f      	b.n	8004628 <_malloc_r+0xa8>
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	1b52      	subs	r2, r2, r5
 800460c:	d420      	bmi.n	8004650 <_malloc_r+0xd0>
 800460e:	2a0b      	cmp	r2, #11
 8004610:	d917      	bls.n	8004642 <_malloc_r+0xc2>
 8004612:	1961      	adds	r1, r4, r5
 8004614:	42a3      	cmp	r3, r4
 8004616:	6025      	str	r5, [r4, #0]
 8004618:	bf18      	it	ne
 800461a:	6059      	strne	r1, [r3, #4]
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	bf08      	it	eq
 8004620:	f8c8 1000 	streq.w	r1, [r8]
 8004624:	5162      	str	r2, [r4, r5]
 8004626:	604b      	str	r3, [r1, #4]
 8004628:	4630      	mov	r0, r6
 800462a:	f000 f82f 	bl	800468c <__malloc_unlock>
 800462e:	f104 000b 	add.w	r0, r4, #11
 8004632:	1d23      	adds	r3, r4, #4
 8004634:	f020 0007 	bic.w	r0, r0, #7
 8004638:	1ac2      	subs	r2, r0, r3
 800463a:	bf1c      	itt	ne
 800463c:	1a1b      	subne	r3, r3, r0
 800463e:	50a3      	strne	r3, [r4, r2]
 8004640:	e7af      	b.n	80045a2 <_malloc_r+0x22>
 8004642:	6862      	ldr	r2, [r4, #4]
 8004644:	42a3      	cmp	r3, r4
 8004646:	bf0c      	ite	eq
 8004648:	f8c8 2000 	streq.w	r2, [r8]
 800464c:	605a      	strne	r2, [r3, #4]
 800464e:	e7eb      	b.n	8004628 <_malloc_r+0xa8>
 8004650:	4623      	mov	r3, r4
 8004652:	6864      	ldr	r4, [r4, #4]
 8004654:	e7ae      	b.n	80045b4 <_malloc_r+0x34>
 8004656:	463c      	mov	r4, r7
 8004658:	687f      	ldr	r7, [r7, #4]
 800465a:	e7b6      	b.n	80045ca <_malloc_r+0x4a>
 800465c:	461a      	mov	r2, r3
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	42a3      	cmp	r3, r4
 8004662:	d1fb      	bne.n	800465c <_malloc_r+0xdc>
 8004664:	2300      	movs	r3, #0
 8004666:	6053      	str	r3, [r2, #4]
 8004668:	e7de      	b.n	8004628 <_malloc_r+0xa8>
 800466a:	230c      	movs	r3, #12
 800466c:	6033      	str	r3, [r6, #0]
 800466e:	4630      	mov	r0, r6
 8004670:	f000 f80c 	bl	800468c <__malloc_unlock>
 8004674:	e794      	b.n	80045a0 <_malloc_r+0x20>
 8004676:	6005      	str	r5, [r0, #0]
 8004678:	e7d6      	b.n	8004628 <_malloc_r+0xa8>
 800467a:	bf00      	nop
 800467c:	20000430 	.word	0x20000430

08004680 <__malloc_lock>:
 8004680:	4801      	ldr	r0, [pc, #4]	@ (8004688 <__malloc_lock+0x8>)
 8004682:	f7ff bf0e 	b.w	80044a2 <__retarget_lock_acquire_recursive>
 8004686:	bf00      	nop
 8004688:	20000428 	.word	0x20000428

0800468c <__malloc_unlock>:
 800468c:	4801      	ldr	r0, [pc, #4]	@ (8004694 <__malloc_unlock+0x8>)
 800468e:	f7ff bf09 	b.w	80044a4 <__retarget_lock_release_recursive>
 8004692:	bf00      	nop
 8004694:	20000428 	.word	0x20000428

08004698 <__sflush_r>:
 8004698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	0716      	lsls	r6, r2, #28
 80046a2:	4605      	mov	r5, r0
 80046a4:	460c      	mov	r4, r1
 80046a6:	d454      	bmi.n	8004752 <__sflush_r+0xba>
 80046a8:	684b      	ldr	r3, [r1, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	dc02      	bgt.n	80046b4 <__sflush_r+0x1c>
 80046ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	dd48      	ble.n	8004746 <__sflush_r+0xae>
 80046b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046b6:	2e00      	cmp	r6, #0
 80046b8:	d045      	beq.n	8004746 <__sflush_r+0xae>
 80046ba:	2300      	movs	r3, #0
 80046bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80046c0:	682f      	ldr	r7, [r5, #0]
 80046c2:	6a21      	ldr	r1, [r4, #32]
 80046c4:	602b      	str	r3, [r5, #0]
 80046c6:	d030      	beq.n	800472a <__sflush_r+0x92>
 80046c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	0759      	lsls	r1, r3, #29
 80046ce:	d505      	bpl.n	80046dc <__sflush_r+0x44>
 80046d0:	6863      	ldr	r3, [r4, #4]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046d6:	b10b      	cbz	r3, 80046dc <__sflush_r+0x44>
 80046d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046da:	1ad2      	subs	r2, r2, r3
 80046dc:	2300      	movs	r3, #0
 80046de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046e0:	6a21      	ldr	r1, [r4, #32]
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b0      	blx	r6
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	d106      	bne.n	80046fa <__sflush_r+0x62>
 80046ec:	6829      	ldr	r1, [r5, #0]
 80046ee:	291d      	cmp	r1, #29
 80046f0:	d82b      	bhi.n	800474a <__sflush_r+0xb2>
 80046f2:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <__sflush_r+0x104>)
 80046f4:	410a      	asrs	r2, r1
 80046f6:	07d6      	lsls	r6, r2, #31
 80046f8:	d427      	bmi.n	800474a <__sflush_r+0xb2>
 80046fa:	2200      	movs	r2, #0
 80046fc:	6062      	str	r2, [r4, #4]
 80046fe:	04d9      	lsls	r1, r3, #19
 8004700:	6922      	ldr	r2, [r4, #16]
 8004702:	6022      	str	r2, [r4, #0]
 8004704:	d504      	bpl.n	8004710 <__sflush_r+0x78>
 8004706:	1c42      	adds	r2, r0, #1
 8004708:	d101      	bne.n	800470e <__sflush_r+0x76>
 800470a:	682b      	ldr	r3, [r5, #0]
 800470c:	b903      	cbnz	r3, 8004710 <__sflush_r+0x78>
 800470e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004712:	602f      	str	r7, [r5, #0]
 8004714:	b1b9      	cbz	r1, 8004746 <__sflush_r+0xae>
 8004716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800471a:	4299      	cmp	r1, r3
 800471c:	d002      	beq.n	8004724 <__sflush_r+0x8c>
 800471e:	4628      	mov	r0, r5
 8004720:	f7ff fec2 	bl	80044a8 <_free_r>
 8004724:	2300      	movs	r3, #0
 8004726:	6363      	str	r3, [r4, #52]	@ 0x34
 8004728:	e00d      	b.n	8004746 <__sflush_r+0xae>
 800472a:	2301      	movs	r3, #1
 800472c:	4628      	mov	r0, r5
 800472e:	47b0      	blx	r6
 8004730:	4602      	mov	r2, r0
 8004732:	1c50      	adds	r0, r2, #1
 8004734:	d1c9      	bne.n	80046ca <__sflush_r+0x32>
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0c6      	beq.n	80046ca <__sflush_r+0x32>
 800473c:	2b1d      	cmp	r3, #29
 800473e:	d001      	beq.n	8004744 <__sflush_r+0xac>
 8004740:	2b16      	cmp	r3, #22
 8004742:	d11e      	bne.n	8004782 <__sflush_r+0xea>
 8004744:	602f      	str	r7, [r5, #0]
 8004746:	2000      	movs	r0, #0
 8004748:	e022      	b.n	8004790 <__sflush_r+0xf8>
 800474a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474e:	b21b      	sxth	r3, r3
 8004750:	e01b      	b.n	800478a <__sflush_r+0xf2>
 8004752:	690f      	ldr	r7, [r1, #16]
 8004754:	2f00      	cmp	r7, #0
 8004756:	d0f6      	beq.n	8004746 <__sflush_r+0xae>
 8004758:	0793      	lsls	r3, r2, #30
 800475a:	680e      	ldr	r6, [r1, #0]
 800475c:	bf08      	it	eq
 800475e:	694b      	ldreq	r3, [r1, #20]
 8004760:	600f      	str	r7, [r1, #0]
 8004762:	bf18      	it	ne
 8004764:	2300      	movne	r3, #0
 8004766:	eba6 0807 	sub.w	r8, r6, r7
 800476a:	608b      	str	r3, [r1, #8]
 800476c:	f1b8 0f00 	cmp.w	r8, #0
 8004770:	dde9      	ble.n	8004746 <__sflush_r+0xae>
 8004772:	6a21      	ldr	r1, [r4, #32]
 8004774:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004776:	4643      	mov	r3, r8
 8004778:	463a      	mov	r2, r7
 800477a:	4628      	mov	r0, r5
 800477c:	47b0      	blx	r6
 800477e:	2800      	cmp	r0, #0
 8004780:	dc08      	bgt.n	8004794 <__sflush_r+0xfc>
 8004782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800478a:	81a3      	strh	r3, [r4, #12]
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004794:	4407      	add	r7, r0
 8004796:	eba8 0800 	sub.w	r8, r8, r0
 800479a:	e7e7      	b.n	800476c <__sflush_r+0xd4>
 800479c:	dfbffffe 	.word	0xdfbffffe

080047a0 <_fflush_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	690b      	ldr	r3, [r1, #16]
 80047a4:	4605      	mov	r5, r0
 80047a6:	460c      	mov	r4, r1
 80047a8:	b913      	cbnz	r3, 80047b0 <_fflush_r+0x10>
 80047aa:	2500      	movs	r5, #0
 80047ac:	4628      	mov	r0, r5
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	b118      	cbz	r0, 80047ba <_fflush_r+0x1a>
 80047b2:	6a03      	ldr	r3, [r0, #32]
 80047b4:	b90b      	cbnz	r3, 80047ba <_fflush_r+0x1a>
 80047b6:	f7ff fc8f 	bl	80040d8 <__sinit>
 80047ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f3      	beq.n	80047aa <_fflush_r+0xa>
 80047c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047c4:	07d0      	lsls	r0, r2, #31
 80047c6:	d404      	bmi.n	80047d2 <_fflush_r+0x32>
 80047c8:	0599      	lsls	r1, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_fflush_r+0x32>
 80047cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ce:	f7ff fe68 	bl	80044a2 <__retarget_lock_acquire_recursive>
 80047d2:	4628      	mov	r0, r5
 80047d4:	4621      	mov	r1, r4
 80047d6:	f7ff ff5f 	bl	8004698 <__sflush_r>
 80047da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047dc:	07da      	lsls	r2, r3, #31
 80047de:	4605      	mov	r5, r0
 80047e0:	d4e4      	bmi.n	80047ac <_fflush_r+0xc>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	059b      	lsls	r3, r3, #22
 80047e6:	d4e1      	bmi.n	80047ac <_fflush_r+0xc>
 80047e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ea:	f7ff fe5b 	bl	80044a4 <__retarget_lock_release_recursive>
 80047ee:	e7dd      	b.n	80047ac <_fflush_r+0xc>

080047f0 <__swhatbuf_r>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	460c      	mov	r4, r1
 80047f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f8:	2900      	cmp	r1, #0
 80047fa:	b096      	sub	sp, #88	@ 0x58
 80047fc:	4615      	mov	r5, r2
 80047fe:	461e      	mov	r6, r3
 8004800:	da0d      	bge.n	800481e <__swhatbuf_r+0x2e>
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	bf14      	ite	ne
 800480e:	2340      	movne	r3, #64	@ 0x40
 8004810:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004814:	2000      	movs	r0, #0
 8004816:	6031      	str	r1, [r6, #0]
 8004818:	602b      	str	r3, [r5, #0]
 800481a:	b016      	add	sp, #88	@ 0x58
 800481c:	bd70      	pop	{r4, r5, r6, pc}
 800481e:	466a      	mov	r2, sp
 8004820:	f000 f848 	bl	80048b4 <_fstat_r>
 8004824:	2800      	cmp	r0, #0
 8004826:	dbec      	blt.n	8004802 <__swhatbuf_r+0x12>
 8004828:	9901      	ldr	r1, [sp, #4]
 800482a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800482e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004832:	4259      	negs	r1, r3
 8004834:	4159      	adcs	r1, r3
 8004836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800483a:	e7eb      	b.n	8004814 <__swhatbuf_r+0x24>

0800483c <__smakebuf_r>:
 800483c:	898b      	ldrh	r3, [r1, #12]
 800483e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004840:	079d      	lsls	r5, r3, #30
 8004842:	4606      	mov	r6, r0
 8004844:	460c      	mov	r4, r1
 8004846:	d507      	bpl.n	8004858 <__smakebuf_r+0x1c>
 8004848:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	6123      	str	r3, [r4, #16]
 8004850:	2301      	movs	r3, #1
 8004852:	6163      	str	r3, [r4, #20]
 8004854:	b003      	add	sp, #12
 8004856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004858:	ab01      	add	r3, sp, #4
 800485a:	466a      	mov	r2, sp
 800485c:	f7ff ffc8 	bl	80047f0 <__swhatbuf_r>
 8004860:	9f00      	ldr	r7, [sp, #0]
 8004862:	4605      	mov	r5, r0
 8004864:	4639      	mov	r1, r7
 8004866:	4630      	mov	r0, r6
 8004868:	f7ff fe8a 	bl	8004580 <_malloc_r>
 800486c:	b948      	cbnz	r0, 8004882 <__smakebuf_r+0x46>
 800486e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004872:	059a      	lsls	r2, r3, #22
 8004874:	d4ee      	bmi.n	8004854 <__smakebuf_r+0x18>
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	f043 0302 	orr.w	r3, r3, #2
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	e7e2      	b.n	8004848 <__smakebuf_r+0xc>
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	6020      	str	r0, [r4, #0]
 8004886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488a:	81a3      	strh	r3, [r4, #12]
 800488c:	9b01      	ldr	r3, [sp, #4]
 800488e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004892:	b15b      	cbz	r3, 80048ac <__smakebuf_r+0x70>
 8004894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004898:	4630      	mov	r0, r6
 800489a:	f000 f81d 	bl	80048d8 <_isatty_r>
 800489e:	b128      	cbz	r0, 80048ac <__smakebuf_r+0x70>
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	f023 0303 	bic.w	r3, r3, #3
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	81a3      	strh	r3, [r4, #12]
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	431d      	orrs	r5, r3
 80048b0:	81a5      	strh	r5, [r4, #12]
 80048b2:	e7cf      	b.n	8004854 <__smakebuf_r+0x18>

080048b4 <_fstat_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4d07      	ldr	r5, [pc, #28]	@ (80048d4 <_fstat_r+0x20>)
 80048b8:	2300      	movs	r3, #0
 80048ba:	4604      	mov	r4, r0
 80048bc:	4608      	mov	r0, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	602b      	str	r3, [r5, #0]
 80048c2:	f7fc f8fa 	bl	8000aba <_fstat>
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	d102      	bne.n	80048d0 <_fstat_r+0x1c>
 80048ca:	682b      	ldr	r3, [r5, #0]
 80048cc:	b103      	cbz	r3, 80048d0 <_fstat_r+0x1c>
 80048ce:	6023      	str	r3, [r4, #0]
 80048d0:	bd38      	pop	{r3, r4, r5, pc}
 80048d2:	bf00      	nop
 80048d4:	20000424 	.word	0x20000424

080048d8 <_isatty_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d06      	ldr	r5, [pc, #24]	@ (80048f4 <_isatty_r+0x1c>)
 80048dc:	2300      	movs	r3, #0
 80048de:	4604      	mov	r4, r0
 80048e0:	4608      	mov	r0, r1
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	f7fc f8f9 	bl	8000ada <_isatty>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_isatty_r+0x1a>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_isatty_r+0x1a>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	20000424 	.word	0x20000424

080048f8 <_sbrk_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	4d06      	ldr	r5, [pc, #24]	@ (8004914 <_sbrk_r+0x1c>)
 80048fc:	2300      	movs	r3, #0
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	602b      	str	r3, [r5, #0]
 8004904:	f7fc f902 	bl	8000b0c <_sbrk>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_sbrk_r+0x1a>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_sbrk_r+0x1a>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20000424 	.word	0x20000424

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
