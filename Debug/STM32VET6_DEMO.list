
STM32VET6_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d04  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004e8c  08004e8c  00005e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eac  08004eac  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004eac  08004eac  00005eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eb4  08004eb4  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb4  08004eb4  00005eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004eb8  08004eb8  00005eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004ebc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          0000027c  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de92  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027bd  00000000  00000000  00013ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00016698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000910  00000000  00000000  00017268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221b9  00000000  00000000  00017b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b06  00000000  00000000  00039d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c58e1  00000000  00000000  0004c837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112118  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002edc  00000000  00000000  0011215c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00115038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e74 	.word	0x08004e74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004e74 	.word	0x08004e74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <MX_CRC_Init+0x20>)
 80004be:	4a07      	ldr	r2, [pc, #28]	@ (80004dc <MX_CRC_Init+0x24>)
 80004c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <MX_CRC_Init+0x20>)
 80004c4:	f000 fff1 	bl	80014aa <HAL_CRC_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004ce:	f000 fa35 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000030 	.word	0x20000030
 80004dc:	40023000 	.word	0x40023000

080004e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0b      	ldr	r2, [pc, #44]	@ (800051c <HAL_CRC_MspInit+0x3c>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d10d      	bne.n	800050e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <HAL_CRC_MspInit+0x40>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a09      	ldr	r2, [pc, #36]	@ (8000520 <HAL_CRC_MspInit+0x40>)
 80004fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <HAL_CRC_MspInit+0x40>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40023000 	.word	0x40023000
 8000520:	40023800 	.word	0x40023800

08000524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <MX_DMA_Init+0x3c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <MX_DMA_Init+0x3c>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <MX_DMA_Init+0x3c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	2044      	movs	r0, #68	@ 0x44
 800054c:	f000 ff77 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000550:	2044      	movs	r0, #68	@ 0x44
 8000552:	f000 ff90 	bl	8001476 <HAL_NVIC_EnableIRQ>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40023800 	.word	0x40023800

08000564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <MX_GPIO_Init+0xe0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a30      	ldr	r2, [pc, #192]	@ (8000644 <MX_GPIO_Init+0xe0>)
 8000584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b2e      	ldr	r3, [pc, #184]	@ (8000644 <MX_GPIO_Init+0xe0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	4b2a      	ldr	r3, [pc, #168]	@ (8000644 <MX_GPIO_Init+0xe0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a29      	ldr	r2, [pc, #164]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_GPIO_Init+0xe0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2106      	movs	r1, #6
 80005ee:	4816      	ldr	r0, [pc, #88]	@ (8000648 <MX_GPIO_Init+0xe4>)
 80005f0:	f001 fd2e 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80005f4:	2301      	movs	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	480f      	ldr	r0, [pc, #60]	@ (8000648 <MX_GPIO_Init+0xe4>)
 800060a:	f001 fb6d 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800060e:	2306      	movs	r3, #6
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000616:	2301      	movs	r3, #1
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	4808      	ldr	r0, [pc, #32]	@ (8000648 <MX_GPIO_Init+0xe4>)
 8000626:	f001 fb5f 	bl	8001ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2006      	movs	r0, #6
 8000630:	f000 ff05 	bl	800143e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000634:	2006      	movs	r0, #6
 8000636:	f000 ff1e 	bl	8001476 <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	@ 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000

0800064c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_I2C1_Init+0x50>)
 8000652:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <MX_I2C1_Init+0x54>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_I2C1_Init+0x50>)
 8000658:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <MX_I2C1_Init+0x58>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_I2C1_Init+0x50>)
 800066a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800066e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_I2C1_Init+0x50>)
 800068a:	f001 fd2d 	bl	80020e8 <HAL_I2C_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 f952 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000038 	.word	0x20000038
 80006a0:	40005400 	.word	0x40005400
 80006a4:	000186a0 	.word	0x000186a0

080006a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a19      	ldr	r2, [pc, #100]	@ (800072c <HAL_I2C_MspInit+0x84>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d12c      	bne.n	8000724 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a17      	ldr	r2, [pc, #92]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ec:	2312      	movs	r3, #18
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006f8:	2304      	movs	r3, #4
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <HAL_I2C_MspInit+0x8c>)
 8000704:	f001 faf0 	bl	8001ce8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	4a07      	ldr	r2, [pc, #28]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 8000712:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000716:	6413      	str	r3, [r2, #64]	@ 0x40
 8000718:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_I2C_MspInit+0x88>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40005400 	.word	0x40005400
 8000730:	40023800 	.word	0x40023800
 8000734:	40020400 	.word	0x40020400

08000738 <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_SET)
 8000742:	2101      	movs	r1, #1
 8000744:	480d      	ldr	r0, [pc, #52]	@ (800077c <HAL_GPIO_EXTI_Callback+0x44>)
 8000746:	f001 fc6b 	bl	8002020 <HAL_GPIO_ReadPin>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d110      	bne.n	8000772 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		for(int temp = 65536*50;temp != 0;temp--);
 8000750:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e002      	b.n	800075e <HAL_GPIO_EXTI_Callback+0x26>
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3b01      	subs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f9      	bne.n	8000758 <HAL_GPIO_EXTI_Callback+0x20>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 8000764:	2104      	movs	r1, #4
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <HAL_GPIO_EXTI_Callback+0x44>)
 8000768:	f001 fc8b 	bl	8002082 <HAL_GPIO_TogglePin>
		key_flag = 1;
 800076c:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x48>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
	}
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40020000 	.word	0x40020000
 8000780:	2000008c 	.word	0x2000008c

08000784 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d117      	bne.n	80007c8 <HAL_UARTEx_RxEventCallback+0x44>
    {
    	rx_num = Size;
 8000798:	887b      	ldrh	r3, [r7, #2]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <HAL_UARTEx_RxEventCallback+0x50>)
 800079e:	701a      	strb	r2, [r3, #0]
    	uart_flag = 1;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <HAL_UARTEx_RxEventCallback+0x54>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 80007a6:	2104      	movs	r1, #4
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x58>)
 80007aa:	f001 fc6a 	bl	8002082 <HAL_GPIO_TogglePin>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer,BUF_SIZE);
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	490b      	ldr	r1, [pc, #44]	@ (80007e0 <HAL_UARTEx_RxEventCallback+0x5c>)
 80007b2:	4807      	ldr	r0, [pc, #28]	@ (80007d0 <HAL_UARTEx_RxEventCallback+0x4c>)
 80007b4:	f003 f9ef 	bl	8003b96 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_UARTEx_RxEventCallback+0x60>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_UARTEx_RxEventCallback+0x60>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f022 0208 	bic.w	r2, r2, #8
 80007c6:	601a      	str	r2, [r3, #0]
    }
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000090 	.word	0x20000090
 80007d4:	20000280 	.word	0x20000280
 80007d8:	2000008d 	.word	0x2000008d
 80007dc:	40020000 	.word	0x40020000
 80007e0:	20000180 	.word	0x20000180
 80007e4:	20000120 	.word	0x20000120

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 fcb6 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f83a 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff feb6 	bl	8000564 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f8:	f7ff fe94 	bl	8000524 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007fc:	f000 f928 	bl	8000a50 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000800:	f7ff ff24 	bl	800064c <MX_I2C1_Init>
  MX_CRC_Init();
 8000804:	f7ff fe58 	bl	80004b8 <MX_CRC_Init>
  MX_USART6_UART_Init();
 8000808:	f000 f94c 	bl	8000aa4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer,BUF_SIZE);
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	4910      	ldr	r1, [pc, #64]	@ (8000850 <main+0x68>)
 8000810:	4810      	ldr	r0, [pc, #64]	@ (8000854 <main+0x6c>)
 8000812:	f003 f9c0 	bl	8003b96 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000816:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081a:	f000 fd11 	bl	8001240 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
 800081e:	2102      	movs	r1, #2
 8000820:	480d      	ldr	r0, [pc, #52]	@ (8000858 <main+0x70>)
 8000822:	f001 fc2e 	bl	8002082 <HAL_GPIO_TogglePin>
//	  CMD_ReadButtonStatus(5,9);
//	  printf("\r\n");



	  if(uart_flag == 1)
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <main+0x74>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d107      	bne.n	800083e <main+0x56>
	  {
		  uart_flag = 0;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <main+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]


		  pc_test();
 8000834:	f000 fc24 	bl	8001080 <pc_test>


		  rx_num = 0;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <main+0x78>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	  }



	  if(key_flag == 1)
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <main+0x7c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d1e7      	bne.n	8000816 <main+0x2e>
	  {
		  key_flag = 0;
 8000846:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <main+0x7c>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 800084c:	e7e3      	b.n	8000816 <main+0x2e>
 800084e:	bf00      	nop
 8000850:	20000180 	.word	0x20000180
 8000854:	20000090 	.word	0x20000090
 8000858:	40020000 	.word	0x40020000
 800085c:	2000008d 	.word	0x2000008d
 8000860:	20000280 	.word	0x20000280
 8000864:	2000008c 	.word	0x2000008c

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	@ 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	@ 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f004 fad0 	bl	8004e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <SystemClock_Config+0xcc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a27      	ldr	r2, [pc, #156]	@ (8000934 <SystemClock_Config+0xcc>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
 800089c:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <SystemClock_Config+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a21      	ldr	r2, [pc, #132]	@ (8000938 <SystemClock_Config+0xd0>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d8:	2308      	movs	r3, #8
 80008da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008dc:	23a8      	movs	r3, #168	@ 0xa8
 80008de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fc1f 	bl	8003130 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f8:	f000 f820 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000908:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2105      	movs	r1, #5
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fe80 	bl	8003620 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000926:	f000 f809 	bl	800093c <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	@ 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <NMI_Handler+0x4>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <MemManage_Handler+0x4>

080009b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <UsageFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ee:	f000 fc07 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WK_UP_Pin);
 80009fa:	2001      	movs	r0, #1
 80009fc:	f001 fb5c 	bl	80020b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <USART1_IRQHandler+0x10>)
 8000a0a:	f003 f921 	bl	8003c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000090 	.word	0x20000090

08000a18 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a1c:	4802      	ldr	r0, [pc, #8]	@ (8000a28 <DMA2_Stream5_IRQHandler+0x10>)
 8000a1e:	f000 fef9 	bl	8001814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000120 	.word	0x20000120

08000a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <MX_USART1_UART_Init+0x50>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_USART1_UART_Init+0x4c>)
 8000a88:	f002 ffaa 	bl	80039e0 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a92:	f7ff ff53 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000090 	.word	0x20000090
 8000aa0:	40011000 	.word	0x40011000

08000aa4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <MX_USART6_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_USART6_UART_Init+0x4c>)
 8000adc:	f002 ff80 	bl	80039e0 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f7ff ff29 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000d8 	.word	0x200000d8
 8000af4:	40011400 	.word	0x40011400

08000af8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	@ 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a50      	ldr	r2, [pc, #320]	@ (8000c58 <HAL_UART_MspInit+0x160>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d168      	bne.n	8000bec <HAL_UART_MspInit+0xf4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */
  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	4b4f      	ldr	r3, [pc, #316]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a4e      	ldr	r2, [pc, #312]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	4b48      	ldr	r3, [pc, #288]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a47      	ldr	r2, [pc, #284]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b45      	ldr	r3, [pc, #276]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b64:	2307      	movs	r3, #7
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	483c      	ldr	r0, [pc, #240]	@ (8000c60 <HAL_UART_MspInit+0x168>)
 8000b70:	f001 f8ba 	bl	8001ce8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8000b74:	4b3b      	ldr	r3, [pc, #236]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000b76:	4a3c      	ldr	r2, [pc, #240]	@ (8000c68 <HAL_UART_MspInit+0x170>)
 8000b78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000b7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b80:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b82:	4b38      	ldr	r3, [pc, #224]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b88:	4b36      	ldr	r3, [pc, #216]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	4b35      	ldr	r3, [pc, #212]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000b90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b94:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b96:	4b33      	ldr	r3, [pc, #204]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b9c:	4b31      	ldr	r3, [pc, #196]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ba2:	4b30      	ldr	r3, [pc, #192]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000baa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bae:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bb6:	482b      	ldr	r0, [pc, #172]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000bb8:	f000 fc94 	bl	80014e4 <HAL_DMA_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000bc2:	f7ff febb 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a26      	ldr	r2, [pc, #152]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000bca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bcc:	4a25      	ldr	r2, [pc, #148]	@ (8000c64 <HAL_UART_MspInit+0x16c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2025      	movs	r0, #37	@ 0x25
 8000bd8:	f000 fc31 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bdc:	2025      	movs	r0, #37	@ 0x25
 8000bde:	f000 fc4a 	bl	8001476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 8000be2:	2104      	movs	r1, #4
 8000be4:	481e      	ldr	r0, [pc, #120]	@ (8000c60 <HAL_UART_MspInit+0x168>)
 8000be6:	f001 fa4c 	bl	8002082 <HAL_GPIO_TogglePin>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000bea:	e030      	b.n	8000c4e <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART6)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c6c <HAL_UART_MspInit+0x174>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	4a17      	ldr	r2, [pc, #92]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_UART_MspInit+0x164>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c2e:	23c0      	movs	r3, #192	@ 0xc0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <HAL_UART_MspInit+0x178>)
 8000c4a:	f001 f84d 	bl	8001ce8 <HAL_GPIO_Init>
}
 8000c4e:	bf00      	nop
 8000c50:	3730      	adds	r7, #48	@ 0x30
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40011000 	.word	0x40011000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000
 8000c64:	20000120 	.word	0x20000120
 8000c68:	40026488 	.word	0x40026488
 8000c6c:	40011400 	.word	0x40011400
 8000c70:	40020800 	.word	0x40020800

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c78:	f7ff fed8 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f004 f8c3 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fd9f 	bl	80007e8 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cb8:	08004ebc 	.word	0x08004ebc
  ldr r2, =_sbss
 8000cbc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cc0:	20000290 	.word	0x20000290

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <AT24Write>:
	return data_code;
}


void AT24Write(int position,void* pstruct,int index)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af04      	add	r7, sp, #16
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, AT24CXX_Write_ADDR,position,I2C_MEMADD_SIZE_8BIT, (uint8_t*)pstruct+index,1,1000);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ce2:	9202      	str	r2, [sp, #8]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	9201      	str	r2, [sp, #4]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2301      	movs	r3, #1
 8000cec:	460a      	mov	r2, r1
 8000cee:	21a0      	movs	r1, #160	@ 0xa0
 8000cf0:	480f      	ldr	r0, [pc, #60]	@ (8000d30 <AT24Write+0x68>)
 8000cf2:	f001 fb3d 	bl	8002370 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000cf6:	200a      	movs	r0, #10
 8000cf8:	f000 faa2 	bl	8001240 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1, AT24CXX_Write_ADDR,128+position,I2C_MEMADD_SIZE_8BIT, (uint8_t*)pstruct+index,1,1000);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	3380      	adds	r3, #128	@ 0x80
 8000d02:	b299      	uxth	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	4413      	add	r3, r2
 8000d0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d0e:	9202      	str	r2, [sp, #8]
 8000d10:	2201      	movs	r2, #1
 8000d12:	9201      	str	r2, [sp, #4]
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2301      	movs	r3, #1
 8000d18:	460a      	mov	r2, r1
 8000d1a:	21a0      	movs	r1, #160	@ 0xa0
 8000d1c:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <AT24Write+0x68>)
 8000d1e:	f001 fb27 	bl	8002370 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000d22:	200a      	movs	r0, #10
 8000d24:	f000 fa8c 	bl	8001240 <HAL_Delay>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000038 	.word	0x20000038

08000d34 <AT24Read>:


void AT24Read(int position,void* pstruct,int index)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af04      	add	r7, sp, #16
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, AT24CXX_Read_ADDR,position,I2C_MEMADD_SIZE_8BIT, (uint8_t*)pstruct+index,1,1000);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	b299      	uxth	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	4413      	add	r3, r2
 8000d4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d4e:	9202      	str	r2, [sp, #8]
 8000d50:	2201      	movs	r2, #1
 8000d52:	9201      	str	r2, [sp, #4]
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2301      	movs	r3, #1
 8000d58:	460a      	mov	r2, r1
 8000d5a:	21a1      	movs	r1, #161	@ 0xa1
 8000d5c:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <AT24Read+0x38>)
 8000d5e:	f001 fc01 	bl	8002564 <HAL_I2C_Mem_Read>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000038 	.word	0x20000038

08000d70 <frame_send>:



#define FRAME_SEND(head,tail) frame_send(head,tail,sizeof(head),sizeof(tail))
void frame_send(uint8_t* head,uint8_t* tail,uint8_t head_size,uint8_t tail_size)
{
 8000d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d74:	b089      	sub	sp, #36	@ 0x24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	461a      	mov	r2, r3
 8000d80:	460b      	mov	r3, r1
 8000d82:	71fb      	strb	r3, [r7, #7]
 8000d84:	4613      	mov	r3, r2
 8000d86:	71bb      	strb	r3, [r7, #6]
 8000d88:	466b      	mov	r3, sp
 8000d8a:	461e      	mov	r6, r3
	uint8_t frame_size = head_size + tail_size + tx_num;
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	4413      	add	r3, r2
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b3b      	ldr	r3, [pc, #236]	@ (8000e84 <frame_send+0x114>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4413      	add	r3, r2
 8000d9a:	777b      	strb	r3, [r7, #29]
	uint8_t frame[frame_size];
 8000d9c:	7f79      	ldrb	r1, [r7, #29]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	3b01      	subs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	b2cb      	uxtb	r3, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	4698      	mov	r8, r3
 8000daa:	4691      	mov	r9, r2
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000db8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000dc0:	b2cb      	uxtb	r3, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	4615      	mov	r5, r2
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	00eb      	lsls	r3, r5, #3
 8000dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dd6:	00e2      	lsls	r2, r4, #3
 8000dd8:	460b      	mov	r3, r1
 8000dda:	3307      	adds	r3, #7
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	ebad 0d03 	sub.w	sp, sp, r3
 8000de4:	466b      	mov	r3, sp
 8000de6:	3300      	adds	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
	uint8_t i,j = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	77bb      	strb	r3, [r7, #30]
	for(i = 0;i < head_size;i++,j++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	77fb      	strb	r3, [r7, #31]
 8000df2:	e00c      	b.n	8000e0e <frame_send+0x9e>
	{
		frame[j] = head[i];
 8000df4:	7ffb      	ldrb	r3, [r7, #31]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	441a      	add	r2, r3
 8000dfa:	7fbb      	ldrb	r3, [r7, #30]
 8000dfc:	7811      	ldrb	r1, [r2, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < head_size;i++,j++)
 8000e02:	7ffb      	ldrb	r3, [r7, #31]
 8000e04:	3301      	adds	r3, #1
 8000e06:	77fb      	strb	r3, [r7, #31]
 8000e08:	7fbb      	ldrb	r3, [r7, #30]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	77bb      	strb	r3, [r7, #30]
 8000e0e:	7ffa      	ldrb	r2, [r7, #31]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3ee      	bcc.n	8000df4 <frame_send+0x84>
	}
	for(i = 0;i < tx_num;i++,j++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	77fb      	strb	r3, [r7, #31]
 8000e1a:	e00b      	b.n	8000e34 <frame_send+0xc4>
	{
		frame[j] = tx_buffer[i];
 8000e1c:	7ffa      	ldrb	r2, [r7, #31]
 8000e1e:	7fbb      	ldrb	r3, [r7, #30]
 8000e20:	4919      	ldr	r1, [pc, #100]	@ (8000e88 <frame_send+0x118>)
 8000e22:	5c89      	ldrb	r1, [r1, r2]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < tx_num;i++,j++)
 8000e28:	7ffb      	ldrb	r3, [r7, #31]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	77fb      	strb	r3, [r7, #31]
 8000e2e:	7fbb      	ldrb	r3, [r7, #30]
 8000e30:	3301      	adds	r3, #1
 8000e32:	77bb      	strb	r3, [r7, #30]
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <frame_send+0x114>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	7ffa      	ldrb	r2, [r7, #31]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3ee      	bcc.n	8000e1c <frame_send+0xac>
	}
	for(i = 0;i < tail_size;i++,j++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	77fb      	strb	r3, [r7, #31]
 8000e42:	e00c      	b.n	8000e5e <frame_send+0xee>
	{
		frame[j] = tail[i];
 8000e44:	7ffb      	ldrb	r3, [r7, #31]
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	441a      	add	r2, r3
 8000e4a:	7fbb      	ldrb	r3, [r7, #30]
 8000e4c:	7811      	ldrb	r1, [r2, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	54d1      	strb	r1, [r2, r3]
	for(i = 0;i < tail_size;i++,j++)
 8000e52:	7ffb      	ldrb	r3, [r7, #31]
 8000e54:	3301      	adds	r3, #1
 8000e56:	77fb      	strb	r3, [r7, #31]
 8000e58:	7fbb      	ldrb	r3, [r7, #30]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	77bb      	strb	r3, [r7, #30]
 8000e5e:	7ffa      	ldrb	r2, [r7, #31]
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d3ee      	bcc.n	8000e44 <frame_send+0xd4>
	}
	HAL_UART_Transmit(&huart1,&frame,frame_size, 0xFFFF);
 8000e66:	7f7b      	ldrb	r3, [r7, #29]
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e6e:	6979      	ldr	r1, [r7, #20]
 8000e70:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <frame_send+0x11c>)
 8000e72:	f002 fe05 	bl	8003a80 <HAL_UART_Transmit>
 8000e76:	46b5      	mov	sp, r6
}
 8000e78:	bf00      	nop
 8000e7a:	3724      	adds	r7, #36	@ 0x24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e82:	bf00      	nop
 8000e84:	20000281 	.word	0x20000281
 8000e88:	20000200 	.word	0x20000200
 8000e8c:	20000090 	.word	0x20000090

08000e90 <head_verification>:



# define HEAD_VERIFICATION(head) head_verification(head,sizeof(head))
int head_verification(uint8_t* head,uint8_t head_size)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0;i < head_size;i++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	e00e      	b.n	8000ec0 <head_verification+0x30>
	{
		if(rx_buffer[i] != head[i]){return 0;}
 8000ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <head_verification+0x48>)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	440b      	add	r3, r1
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d001      	beq.n	8000eba <head_verification+0x2a>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e007      	b.n	8000eca <head_verification+0x3a>
	for(int i = 0;i < head_size;i++)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbec      	blt.n	8000ea2 <head_verification+0x12>
	}
	return 1;
 8000ec8:	2301      	movs	r3, #1
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000180 	.word	0x20000180

08000edc <tail_verification>:



# define TIAL_VERIFICATION(tail) tail_verification(tail,sizeof(tail))
int tail_verification(uint8_t* tail,uint8_t tail_size)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
	for(int i = 0;i < tail_size;i++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e013      	b.n	8000f16 <tail_verification+0x3a>
	{
		if(rx_buffer[rx_num-tail_size+i] != tail[i]){return 0;}
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <tail_verification+0x50>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	1ad2      	subs	r2, r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <tail_verification+0x54>)
 8000efe:	5cd2      	ldrb	r2, [r2, r3]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	440b      	add	r3, r1
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d001      	beq.n	8000f10 <tail_verification+0x34>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e007      	b.n	8000f20 <tail_verification+0x44>
	for(int i = 0;i < tail_size;i++)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dbe7      	blt.n	8000eee <tail_verification+0x12>
	}
	return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	20000280 	.word	0x20000280
 8000f30:	20000180 	.word	0x20000180

08000f34 <PConectRceive>:
}



void PConectRceive(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	if(HEAD_VERIFICATION(pc_head))
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4813      	ldr	r0, [pc, #76]	@ (8000f8c <PConectRceive+0x58>)
 8000f3e:	f7ff ffa7 	bl	8000e90 <head_verification>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d01c      	beq.n	8000f82 <PConectRceive+0x4e>
	{
		if(TIAL_VERIFICATION(pc_tail))
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <PConectRceive+0x5c>)
 8000f4c:	f7ff ffc6 	bl	8000edc <tail_verification>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d015      	beq.n	8000f82 <PConectRceive+0x4e>
		{
			PC_Conect_t* pstruct = (PC_Conect_t*)&rx_buffer[sizeof(pc_head)];
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <PConectRceive+0x60>)
 8000f58:	607b      	str	r3, [r7, #4]
			pc_connect.mode = pstruct->mode;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <PConectRceive+0x64>)
 8000f60:	701a      	strb	r2, [r3, #0]
			pc_connect.data_len = pstruct->data_len;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	785a      	ldrb	r2, [r3, #1]
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <PConectRceive+0x64>)
 8000f68:	705a      	strb	r2, [r3, #1]
			pc_connect.addr = pstruct->addr;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	885a      	ldrh	r2, [r3, #2]
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <PConectRceive+0x64>)
 8000f70:	805a      	strh	r2, [r3, #2]
			pc_connect.addr_num = pstruct->addr_num;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	889a      	ldrh	r2, [r3, #4]
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <PConectRceive+0x64>)
 8000f78:	809a      	strh	r2, [r3, #4]
			pc_connect.crc16 = pstruct->crc16;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	88da      	ldrh	r2, [r3, #6]
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <PConectRceive+0x64>)
 8000f80:	80da      	strh	r2, [r3, #6]
//			printf("rx_data_num= %d \r\n",rx_num-sizeof(pc_head)-sizeof(pc_tail));
//			for(int i = 0;i < rx_num;i++){printf("0x%d ",rx_buffer[i]);}
//			printf("\r\n");
		}
	}
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000182 	.word	0x20000182
 8000f98:	20000284 	.word	0x20000284

08000f9c <PConectSend>:




void PConectSend(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
	uint16_t i,crc16;

	tx_buffer[0] = 0x81;
 8000fa2:	4b30      	ldr	r3, [pc, #192]	@ (8001064 <PConectSend+0xc8>)
 8000fa4:	2281      	movs	r2, #129	@ 0x81
 8000fa6:	701a      	strb	r2, [r3, #0]
	tx_buffer[1] = (pc_connect.addr_num + 1+1+2+2);
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <PConectSend+0xcc>)
 8000faa:	889b      	ldrh	r3, [r3, #4]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	3306      	adds	r3, #6
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <PConectSend+0xc8>)
 8000fb4:	705a      	strb	r2, [r3, #1]
	tx_buffer[2] = (pc_connect.addr&0x00FF);
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <PConectSend+0xcc>)
 8000fb8:	885b      	ldrh	r3, [r3, #2]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <PConectSend+0xc8>)
 8000fbe:	709a      	strb	r2, [r3, #2]
	tx_buffer[3] = (pc_connect.addr&0xFF00)>>8;
 8000fc0:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <PConectSend+0xcc>)
 8000fc2:	885b      	ldrh	r3, [r3, #2]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <PConectSend+0xc8>)
 8000fcc:	70da      	strb	r2, [r3, #3]

	for(i = 0;i < 14;i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	e00f      	b.n	8000ff4 <PConectSend+0x58>
	{
		rx_buffer[i] = i;
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	b2d1      	uxtb	r1, r2
 8000fda:	4a24      	ldr	r2, [pc, #144]	@ (800106c <PConectSend+0xd0>)
 8000fdc:	54d1      	strb	r1, [r2, r3]
		AT24Write(i,&rx_buffer[i],0);
 8000fde:	88f8      	ldrh	r0, [r7, #6]
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	4a22      	ldr	r2, [pc, #136]	@ (800106c <PConectSend+0xd0>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fe6d 	bl	8000cc8 <AT24Write>
	for(i = 0;i < 14;i++)
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	2b0d      	cmp	r3, #13
 8000ff8:	d9ec      	bls.n	8000fd4 <PConectSend+0x38>
	}


	for(i = 0;i < pc_connect.addr_num;i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	80fb      	strh	r3, [r7, #6]
 8000ffe:	e00c      	b.n	800101a <PConectSend+0x7e>
	{
		AT24Read(pc_connect.addr+i,&tx_buffer[4],i);
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <PConectSend+0xcc>)
 8001002:	885b      	ldrh	r3, [r3, #2]
 8001004:	461a      	mov	r2, r3
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	4413      	add	r3, r2
 800100a:	88fa      	ldrh	r2, [r7, #6]
 800100c:	4918      	ldr	r1, [pc, #96]	@ (8001070 <PConectSend+0xd4>)
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe90 	bl	8000d34 <AT24Read>
	for(i = 0;i < pc_connect.addr_num;i++)
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	3301      	adds	r3, #1
 8001018:	80fb      	strh	r3, [r7, #6]
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <PConectSend+0xcc>)
 800101c:	889b      	ldrh	r3, [r3, #4]
 800101e:	88fa      	ldrh	r2, [r7, #6]
 8001020:	429a      	cmp	r2, r3
 8001022:	d3ed      	bcc.n	8001000 <PConectSend+0x64>
	}

	tx_num = tx_buffer[1];
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <PConectSend+0xc8>)
 8001026:	785a      	ldrb	r2, [r3, #1]
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <PConectSend+0xd8>)
 800102a:	701a      	strb	r2, [r3, #0]
	crc16 = ModBusCRC16(tx_buffer,tx_num-sizeof(crc16));
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <PConectSend+0xd8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	3b02      	subs	r3, #2
 8001032:	b29b      	uxth	r3, r3
 8001034:	4619      	mov	r1, r3
 8001036:	480b      	ldr	r0, [pc, #44]	@ (8001064 <PConectSend+0xc8>)
 8001038:	f000 f851 	bl	80010de <ModBusCRC16>
 800103c:	4603      	mov	r3, r0
 800103e:	80bb      	strh	r3, [r7, #4]
	memcpy(&tx_buffer[tx_num-sizeof(crc16)],(uint8_t*)&crc16,sizeof(crc16));
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <PConectSend+0xd8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	3b02      	subs	r3, #2
 8001046:	4a07      	ldr	r2, [pc, #28]	@ (8001064 <PConectSend+0xc8>)
 8001048:	4413      	add	r3, r2
 800104a:	88ba      	ldrh	r2, [r7, #4]
 800104c:	801a      	strh	r2, [r3, #0]

	FRAME_SEND(pc_head,pc_tail);
 800104e:	2302      	movs	r3, #2
 8001050:	2202      	movs	r2, #2
 8001052:	4909      	ldr	r1, [pc, #36]	@ (8001078 <PConectSend+0xdc>)
 8001054:	4809      	ldr	r0, [pc, #36]	@ (800107c <PConectSend+0xe0>)
 8001056:	f7ff fe8b 	bl	8000d70 <frame_send>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000200 	.word	0x20000200
 8001068:	20000284 	.word	0x20000284
 800106c:	20000180 	.word	0x20000180
 8001070:	20000204 	.word	0x20000204
 8001074:	20000281 	.word	0x20000281
 8001078:	20000008 	.word	0x20000008
 800107c:	20000004 	.word	0x20000004

08001080 <pc_test>:




void pc_test(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	PConectRceive();
 8001084:	f7ff ff56 	bl	8000f34 <PConectRceive>
	PConectSend();
 8001088:	f7ff ff88 	bl	8000f9c <PConectSend>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <BitReverse16>:
    }
    return revers;
}

uint16_t BitReverse16(uint16_t data)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
	uint16_t revers = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	e012      	b.n	80010ca <BitReverse16+0x3a>
    	revers = revers << 1;
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	81fb      	strh	r3, [r7, #14]
    	revers = revers | (data & 0x0001);
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	81fb      	strh	r3, [r7, #14]
        data >>= 1;
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	085b      	lsrs	r3, r3, #1
 80010c2:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < 16; i++) {
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	3301      	adds	r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	dde9      	ble.n	80010a4 <BitReverse16+0x14>
    }
    return revers;
 80010d0:	89fb      	ldrh	r3, [r7, #14]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <ModBusCRC16>:
  return CRC32 ^ 0xFFFFFFFF;;
}


uint16_t ModBusCRC16(uint8_t *data, uint16_t len)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	807b      	strh	r3, [r7, #2]
    uint16_t CRC16 = 0xFFFF;
 80010ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ee:	82fb      	strh	r3, [r7, #22]
    uint16_t POLY = BitReverse16(0x8005);
 80010f0:	f248 0005 	movw	r0, #32773	@ 0x8005
 80010f4:	f7ff ffcc 	bl	8001090 <BitReverse16>
 80010f8:	4603      	mov	r3, r0
 80010fa:	817b      	strh	r3, [r7, #10]

    for (int i = 0; i < len; i++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	e023      	b.n	800114a <ModBusCRC16+0x6c>
    {
        CRC16 = CRC16 ^ (data[i]);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	8afb      	ldrh	r3, [r7, #22]
 800110e:	4053      	eors	r3, r2
 8001110:	82fb      	strh	r3, [r7, #22]

        for (int j = 0; j < 8; j++)
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e012      	b.n	800113e <ModBusCRC16+0x60>
        {
            if (CRC16 & 0x0001)
 8001118:	8afb      	ldrh	r3, [r7, #22]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <ModBusCRC16+0x54>
            {
                CRC16 = CRC16 >> 1;
 8001122:	8afb      	ldrh	r3, [r7, #22]
 8001124:	085b      	lsrs	r3, r3, #1
 8001126:	82fb      	strh	r3, [r7, #22]
                CRC16 = CRC16 ^ POLY;
 8001128:	8afa      	ldrh	r2, [r7, #22]
 800112a:	897b      	ldrh	r3, [r7, #10]
 800112c:	4053      	eors	r3, r2
 800112e:	82fb      	strh	r3, [r7, #22]
 8001130:	e002      	b.n	8001138 <ModBusCRC16+0x5a>
            }else{
				CRC16 = CRC16 >> 1;
 8001132:	8afb      	ldrh	r3, [r7, #22]
 8001134:	085b      	lsrs	r3, r3, #1
 8001136:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; j++)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b07      	cmp	r3, #7
 8001142:	dde9      	ble.n	8001118 <ModBusCRC16+0x3a>
    for (int i = 0; i < len; i++)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	3301      	adds	r3, #1
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	429a      	cmp	r2, r3
 8001150:	dbd7      	blt.n	8001102 <ModBusCRC16+0x24>
			}
        }
    }

    return CRC16;
 8001152:	8afb      	ldrh	r3, [r7, #22]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <HAL_Init+0x40>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <HAL_Init+0x40>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	@ (800119c <HAL_Init+0x40>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f94f 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	200f      	movs	r0, #15
 800118c:	f000 f808 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff fbda 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023c00 	.word	0x40023c00

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_InitTick+0x54>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x58>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f967 	bl	8001492 <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f92f 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	@ (80011fc <HAL_InitTick+0x5c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000010 	.word	0x20000010
 80011fc:	2000000c 	.word	0x2000000c

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000010 	.word	0x20000010
 8001224:	2000028c 	.word	0x2000028c

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	@ (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	2000028c 	.word	0x2000028c

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000010 	.word	0x20000010

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	@ (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	@ (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	@ (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	@ (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001450:	f7ff ff3e 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	6978      	ldr	r0, [r7, #20]
 800145c:	f7ff ff8e 	bl	800137c <NVIC_EncodePriority>
 8001460:	4602      	mov	r2, r0
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff5d 	bl	8001328 <__NVIC_SetPriority>
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff31 	bl	80012ec <__NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffa2 	bl	80013e4 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e00e      	b.n	80014da <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	795b      	ldrb	r3, [r3, #5]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d105      	bne.n	80014d2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff f807 	bl	80004e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff fe9a 	bl	8001228 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e099      	b.n	8001634 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001520:	e00f      	b.n	8001542 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001522:	f7ff fe81 	bl	8001228 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b05      	cmp	r3, #5
 800152e:	d908      	bls.n	8001542 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2220      	movs	r2, #32
 8001534:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e078      	b.n	8001634 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e8      	bne.n	8001522 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	4b38      	ldr	r3, [pc, #224]	@ (800163c <HAL_DMA_Init+0x158>)
 800155c:	4013      	ands	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800156e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4313      	orrs	r3, r2
 8001592:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001598:	2b04      	cmp	r3, #4
 800159a:	d107      	bne.n	80015ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	4313      	orrs	r3, r2
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f023 0307 	bic.w	r3, r3, #7
 80015c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d117      	bne.n	8001606 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00e      	beq.n	8001606 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fb01 	bl	8001bf0 <DMA_CheckFifoParam>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2240      	movs	r2, #64	@ 0x40
 80015f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001602:	2301      	movs	r3, #1
 8001604:	e016      	b.n	8001634 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fab8 	bl	8001b84 <DMA_CalcBaseAndBitshift>
 8001614:	4603      	mov	r3, r0
 8001616:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161c:	223f      	movs	r2, #63	@ 0x3f
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	f010803f 	.word	0xf010803f

08001640 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_DMA_Start_IT+0x26>
 8001662:	2302      	movs	r3, #2
 8001664:	e040      	b.n	80016e8 <HAL_DMA_Start_IT+0xa8>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d12f      	bne.n	80016da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2202      	movs	r2, #2
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 fa4a 	bl	8001b28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001698:	223f      	movs	r2, #63	@ 0x3f
 800169a:	409a      	lsls	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0216 	orr.w	r2, r2, #22
 80016ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0208 	orr.w	r2, r2, #8
 80016c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e005      	b.n	80016e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016e2:	2302      	movs	r3, #2
 80016e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016fe:	f7ff fd93 	bl	8001228 <HAL_GetTick>
 8001702:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d008      	beq.n	8001722 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2280      	movs	r2, #128	@ 0x80
 8001714:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e052      	b.n	80017c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0216 	bic.w	r2, r2, #22
 8001730:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001740:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d103      	bne.n	8001752 <HAL_DMA_Abort+0x62>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0208 	bic.w	r2, r2, #8
 8001760:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0201 	bic.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001772:	e013      	b.n	800179c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001774:	f7ff fd58 	bl	8001228 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b05      	cmp	r3, #5
 8001780:	d90c      	bls.n	800179c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2203      	movs	r2, #3
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e015      	b.n	80017c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1e4      	bne.n	8001774 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ae:	223f      	movs	r2, #63	@ 0x3f
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d004      	beq.n	80017ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2280      	movs	r2, #128	@ 0x80
 80017e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00c      	b.n	8001808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2205      	movs	r2, #5
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0201 	bic.w	r2, r2, #1
 8001804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001820:	4b8e      	ldr	r3, [pc, #568]	@ (8001a5c <HAL_DMA_IRQHandler+0x248>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a8e      	ldr	r2, [pc, #568]	@ (8001a60 <HAL_DMA_IRQHandler+0x24c>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0a9b      	lsrs	r3, r3, #10
 800182c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183e:	2208      	movs	r2, #8
 8001840:	409a      	lsls	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d01a      	beq.n	8001880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0204 	bic.w	r2, r2, #4
 8001866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186c:	2208      	movs	r2, #8
 800186e:	409a      	lsls	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001884:	2201      	movs	r2, #1
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d012      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a2:	2201      	movs	r2, #1
 80018a4:	409a      	lsls	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ae:	f043 0202 	orr.w	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ba:	2204      	movs	r2, #4
 80018bc:	409a      	lsls	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d012      	beq.n	80018ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00b      	beq.n	80018ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d8:	2204      	movs	r2, #4
 80018da:	409a      	lsls	r2, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e4:	f043 0204 	orr.w	r2, r3, #4
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f0:	2210      	movs	r2, #16
 80018f2:	409a      	lsls	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d043      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03c      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190e:	2210      	movs	r2, #16
 8001910:	409a      	lsls	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d018      	beq.n	8001956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d108      	bne.n	8001944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d024      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4798      	blx	r3
 8001942:	e01f      	b.n	8001984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01b      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	4798      	blx	r3
 8001954:	e016      	b.n	8001984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0208 	bic.w	r2, r2, #8
 8001972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001988:	2220      	movs	r2, #32
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 808f 	beq.w	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 8087 	beq.w	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019aa:	2220      	movs	r2, #32
 80019ac:	409a      	lsls	r2, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d136      	bne.n	8001a2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0216 	bic.w	r2, r2, #22
 80019cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <HAL_DMA_IRQHandler+0x1da>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0208 	bic.w	r2, r2, #8
 80019fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a02:	223f      	movs	r2, #63	@ 0x3f
 8001a04:	409a      	lsls	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d07e      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
        }
        return;
 8001a2a:	e079      	b.n	8001b20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01d      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10d      	bne.n	8001a64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d031      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
 8001a58:	e02c      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
 8001a5a:	bf00      	nop
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d023      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	4798      	blx	r3
 8001a74:	e01e      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10f      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0210 	bic.w	r2, r2, #16
 8001a92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d032      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d022      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2205      	movs	r2, #5
 8001acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d307      	bcc.n	8001afc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f2      	bne.n	8001ae0 <HAL_DMA_IRQHandler+0x2cc>
 8001afa:	e000      	b.n	8001afe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001afc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	4798      	blx	r3
 8001b1e:	e000      	b.n	8001b22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b20:	bf00      	nop
    }
  }
}
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b40      	cmp	r3, #64	@ 0x40
 8001b54:	d108      	bne.n	8001b68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b66:	e007      	b.n	8001b78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	60da      	str	r2, [r3, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3b10      	subs	r3, #16
 8001b94:	4a14      	ldr	r2, [pc, #80]	@ (8001be8 <DMA_CalcBaseAndBitshift+0x64>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b9e:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <DMA_CalcBaseAndBitshift+0x68>)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d909      	bls.n	8001bc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	1d1a      	adds	r2, r3, #4
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bc4:	e007      	b.n	8001bd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bce:	f023 0303 	bic.w	r3, r3, #3
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	aaaaaaab 	.word	0xaaaaaaab
 8001bec:	08004ea4 	.word	0x08004ea4

08001bf0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d11f      	bne.n	8001c4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d856      	bhi.n	8001cbe <DMA_CheckFifoParam+0xce>
 8001c10:	a201      	add	r2, pc, #4	@ (adr r2, 8001c18 <DMA_CheckFifoParam+0x28>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001c3b 	.word	0x08001c3b
 8001c20:	08001c29 	.word	0x08001c29
 8001c24:	08001cbf 	.word	0x08001cbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d046      	beq.n	8001cc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c38:	e043      	b.n	8001cc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c42:	d140      	bne.n	8001cc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c48:	e03d      	b.n	8001cc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c52:	d121      	bne.n	8001c98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d837      	bhi.n	8001cca <DMA_CheckFifoParam+0xda>
 8001c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c60 <DMA_CheckFifoParam+0x70>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001c71 	.word	0x08001c71
 8001c64:	08001c77 	.word	0x08001c77
 8001c68:	08001c71 	.word	0x08001c71
 8001c6c:	08001c89 	.word	0x08001c89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
      break;
 8001c74:	e030      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d025      	beq.n	8001cce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c86:	e022      	b.n	8001cce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c90:	d11f      	bne.n	8001cd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c96:	e01c      	b.n	8001cd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d903      	bls.n	8001ca6 <DMA_CheckFifoParam+0xb6>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d003      	beq.n	8001cac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ca4:	e018      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8001caa:	e015      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00e      	beq.n	8001cd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
      break;
 8001cbc:	e00b      	b.n	8001cd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cbe:	bf00      	nop
 8001cc0:	e00a      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc2:	bf00      	nop
 8001cc4:	e008      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
 8001cc8:	e006      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cca:	bf00      	nop
 8001ccc:	e004      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cce:	bf00      	nop
 8001cd0:	e002      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cd2:	bf00      	nop
 8001cd4:	e000      	b.n	8001cd8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cd6:	bf00      	nop
    }
  } 
  
  return status; 
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	@ 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	e16b      	b.n	8001fdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	f040 815a 	bne.w	8001fd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d005      	beq.n	8001d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d130      	bne.n	8001d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 0201 	and.w	r2, r3, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d017      	beq.n	8001dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d123      	bne.n	8001e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	08da      	lsrs	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3208      	adds	r2, #8
 8001dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	69b9      	ldr	r1, [r7, #24]
 8001e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80b4 	beq.w	8001fd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b60      	ldr	r3, [pc, #384]	@ (8001ff4 <HAL_GPIO_Init+0x30c>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4a5f      	ldr	r2, [pc, #380]	@ (8001ff4 <HAL_GPIO_Init+0x30c>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff4 <HAL_GPIO_Init+0x30c>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ff8 <HAL_GPIO_Init+0x310>)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	@ (8001ffc <HAL_GPIO_Init+0x314>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02b      	beq.n	8001f0e <HAL_GPIO_Init+0x226>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	@ (8002000 <HAL_GPIO_Init+0x318>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d025      	beq.n	8001f0a <HAL_GPIO_Init+0x222>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a50      	ldr	r2, [pc, #320]	@ (8002004 <HAL_GPIO_Init+0x31c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01f      	beq.n	8001f06 <HAL_GPIO_Init+0x21e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8002008 <HAL_GPIO_Init+0x320>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x21a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4e      	ldr	r2, [pc, #312]	@ (800200c <HAL_GPIO_Init+0x324>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x216>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8002010 <HAL_GPIO_Init+0x328>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x212>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4c      	ldr	r2, [pc, #304]	@ (8002014 <HAL_GPIO_Init+0x32c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x20e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8002018 <HAL_GPIO_Init+0x330>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x20a>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e00e      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	e00c      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001ef6:	2306      	movs	r3, #6
 8001ef8:	e00a      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001efe:	2304      	movs	r3, #4
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f002 0203 	and.w	r2, r2, #3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f20:	4935      	ldr	r1, [pc, #212]	@ (8001ff8 <HAL_GPIO_Init+0x310>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <HAL_GPIO_Init+0x334>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f52:	4a32      	ldr	r2, [pc, #200]	@ (800201c <HAL_GPIO_Init+0x334>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f58:	4b30      	ldr	r3, [pc, #192]	@ (800201c <HAL_GPIO_Init+0x334>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f7c:	4a27      	ldr	r2, [pc, #156]	@ (800201c <HAL_GPIO_Init+0x334>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f82:	4b26      	ldr	r3, [pc, #152]	@ (800201c <HAL_GPIO_Init+0x334>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800201c <HAL_GPIO_Init+0x334>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_GPIO_Init+0x334>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd0:	4a12      	ldr	r2, [pc, #72]	@ (800201c <HAL_GPIO_Init+0x334>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	f67f ae90 	bls.w	8001d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40021400 	.word	0x40021400
 8002014:	40021800 	.word	0x40021800
 8002018:	40021c00 	.word	0x40021c00
 800201c:	40013c00 	.word	0x40013c00

08002020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800206c:	e003      	b.n	8002076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002094:	887a      	ldrh	r2, [r7, #2]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	041a      	lsls	r2, r3, #16
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43d9      	mvns	r1, r3
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	400b      	ands	r3, r1
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ce:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fb2e 	bl	8000738 <HAL_GPIO_EXTI_Callback>
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40013c00 	.word	0x40013c00

080020e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e12b      	b.n	8002352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe faca 	bl	80006a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	@ 0x24
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800213a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800214a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800214c:	f001 fc20 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8002150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4a81      	ldr	r2, [pc, #516]	@ (800235c <HAL_I2C_Init+0x274>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d807      	bhi.n	800216c <HAL_I2C_Init+0x84>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a80      	ldr	r2, [pc, #512]	@ (8002360 <HAL_I2C_Init+0x278>)
 8002160:	4293      	cmp	r3, r2
 8002162:	bf94      	ite	ls
 8002164:	2301      	movls	r3, #1
 8002166:	2300      	movhi	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	e006      	b.n	800217a <HAL_I2C_Init+0x92>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4a7d      	ldr	r2, [pc, #500]	@ (8002364 <HAL_I2C_Init+0x27c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	bf94      	ite	ls
 8002174:	2301      	movls	r3, #1
 8002176:	2300      	movhi	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e0e7      	b.n	8002352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4a78      	ldr	r2, [pc, #480]	@ (8002368 <HAL_I2C_Init+0x280>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a6a      	ldr	r2, [pc, #424]	@ (800235c <HAL_I2C_Init+0x274>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d802      	bhi.n	80021bc <HAL_I2C_Init+0xd4>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3301      	adds	r3, #1
 80021ba:	e009      	b.n	80021d0 <HAL_I2C_Init+0xe8>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	4a69      	ldr	r2, [pc, #420]	@ (800236c <HAL_I2C_Init+0x284>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	3301      	adds	r3, #1
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	495c      	ldr	r1, [pc, #368]	@ (800235c <HAL_I2C_Init+0x274>)
 80021ec:	428b      	cmp	r3, r1
 80021ee:	d819      	bhi.n	8002224 <HAL_I2C_Init+0x13c>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1e59      	subs	r1, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fe:	1c59      	adds	r1, r3, #1
 8002200:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002204:	400b      	ands	r3, r1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_I2C_Init+0x138>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e59      	subs	r1, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fbb1 f3f3 	udiv	r3, r1, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221e:	e051      	b.n	80022c4 <HAL_I2C_Init+0x1dc>
 8002220:	2304      	movs	r3, #4
 8002222:	e04f      	b.n	80022c4 <HAL_I2C_Init+0x1dc>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d111      	bne.n	8002250 <HAL_I2C_Init+0x168>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1e58      	subs	r0, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	440b      	add	r3, r1
 800223a:	fbb0 f3f3 	udiv	r3, r0, r3
 800223e:	3301      	adds	r3, #1
 8002240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e012      	b.n	8002276 <HAL_I2C_Init+0x18e>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e58      	subs	r0, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	0099      	lsls	r1, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	fbb0 f3f3 	udiv	r3, r0, r3
 8002266:	3301      	adds	r3, #1
 8002268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Init+0x196>
 800227a:	2301      	movs	r3, #1
 800227c:	e022      	b.n	80022c4 <HAL_I2C_Init+0x1dc>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10e      	bne.n	80022a4 <HAL_I2C_Init+0x1bc>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e58      	subs	r0, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6859      	ldr	r1, [r3, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	440b      	add	r3, r1
 8002294:	fbb0 f3f3 	udiv	r3, r0, r3
 8002298:	3301      	adds	r3, #1
 800229a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022a2:	e00f      	b.n	80022c4 <HAL_I2C_Init+0x1dc>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	0099      	lsls	r1, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	6809      	ldr	r1, [r1, #0]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69da      	ldr	r2, [r3, #28]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6911      	ldr	r1, [r2, #16]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68d2      	ldr	r2, [r2, #12]
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	430b      	orrs	r3, r1
 8002306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	000186a0 	.word	0x000186a0
 8002360:	001e847f 	.word	0x001e847f
 8002364:	003d08ff 	.word	0x003d08ff
 8002368:	431bde83 	.word	0x431bde83
 800236c:	10624dd3 	.word	0x10624dd3

08002370 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	817b      	strh	r3, [r7, #10]
 8002382:	460b      	mov	r3, r1
 8002384:	813b      	strh	r3, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800238a:	f7fe ff4d 	bl	8001228 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	f040 80d9 	bne.w	8002550 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2319      	movs	r3, #25
 80023a4:	2201      	movs	r2, #1
 80023a6:	496d      	ldr	r1, [pc, #436]	@ (800255c <HAL_I2C_Mem_Write+0x1ec>)
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fc8b 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
 80023b6:	e0cc      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_I2C_Mem_Write+0x56>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e0c5      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d007      	beq.n	80023ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2221      	movs	r2, #33	@ 0x21
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800241c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4a4d      	ldr	r2, [pc, #308]	@ (8002560 <HAL_I2C_Mem_Write+0x1f0>)
 800242c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800242e:	88f8      	ldrh	r0, [r7, #6]
 8002430:	893a      	ldrh	r2, [r7, #8]
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4603      	mov	r3, r0
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fac2 	bl	80029c8 <I2C_RequestMemoryWrite>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d052      	beq.n	80024f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e081      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fd50 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	2b04      	cmp	r3, #4
 8002464:	d107      	bne.n	8002476 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06b      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11b      	bne.n	80024f0 <HAL_I2C_Mem_Write+0x180>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d017      	beq.n	80024f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1aa      	bne.n	800244e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fd43 	bl	8002f88 <I2C_WaitOnBTFFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	2b04      	cmp	r3, #4
 800250e:	d107      	bne.n	8002520 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800251e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e016      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	e000      	b.n	8002552 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002550:	2302      	movs	r3, #2
  }
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	00100002 	.word	0x00100002
 8002560:	ffff0000 	.word	0xffff0000

08002564 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	@ 0x30
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	817b      	strh	r3, [r7, #10]
 8002576:	460b      	mov	r3, r1
 8002578:	813b      	strh	r3, [r7, #8]
 800257a:	4613      	mov	r3, r2
 800257c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800257e:	f7fe fe53 	bl	8001228 <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b20      	cmp	r3, #32
 800258e:	f040 8214 	bne.w	80029ba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2319      	movs	r3, #25
 8002598:	2201      	movs	r2, #1
 800259a:	497b      	ldr	r1, [pc, #492]	@ (8002788 <HAL_I2C_Mem_Read+0x224>)
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fb91 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80025a8:	2302      	movs	r3, #2
 80025aa:	e207      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_I2C_Mem_Read+0x56>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e200      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d007      	beq.n	80025e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2222      	movs	r2, #34	@ 0x22
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002610:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a5b      	ldr	r2, [pc, #364]	@ (800278c <HAL_I2C_Mem_Read+0x228>)
 8002620:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002622:	88f8      	ldrh	r0, [r7, #6]
 8002624:	893a      	ldrh	r2, [r7, #8]
 8002626:	8979      	ldrh	r1, [r7, #10]
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4603      	mov	r3, r0
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fa5e 	bl	8002af4 <I2C_RequestMemoryRead>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e1bc      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	d113      	bne.n	8002672 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	623b      	str	r3, [r7, #32]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e190      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002676:	2b01      	cmp	r3, #1
 8002678:	d11b      	bne.n	80026b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e170      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d11b      	bne.n	80026f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	e150      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002708:	e144      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270e:	2b03      	cmp	r3, #3
 8002710:	f200 80f1 	bhi.w	80028f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	2b01      	cmp	r3, #1
 800271a:	d123      	bne.n	8002764 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fc79 	bl	8003018 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e145      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002762:	e117      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	2b02      	cmp	r3, #2
 800276a:	d14e      	bne.n	800280a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	2200      	movs	r2, #0
 8002774:	4906      	ldr	r1, [pc, #24]	@ (8002790 <HAL_I2C_Mem_Read+0x22c>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 faa4 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e11a      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
 8002786:	bf00      	nop
 8002788:	00100002 	.word	0x00100002
 800278c:	ffff0000 	.word	0xffff0000
 8002790:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002808:	e0c4      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002810:	2200      	movs	r2, #0
 8002812:	496c      	ldr	r1, [pc, #432]	@ (80029c4 <HAL_I2C_Mem_Read+0x460>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fa55 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0cb      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286c:	2200      	movs	r2, #0
 800286e:	4955      	ldr	r1, [pc, #340]	@ (80029c4 <HAL_I2C_Mem_Read+0x460>)
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fa27 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e09d      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028f4:	e04e      	b.n	8002994 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fb8c 	bl	8003018 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e058      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d124      	bne.n	8002994 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	2b03      	cmp	r3, #3
 8002950:	d107      	bne.n	8002962 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002960:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f aeb6 	bne.w	800270a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3728      	adds	r7, #40	@ 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	00010004 	.word	0x00010004

080029c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	817b      	strh	r3, [r7, #10]
 80029da:	460b      	mov	r3, r1
 80029dc:	813b      	strh	r3, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f960 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a18:	d103      	bne.n	8002a22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e05f      	b.n	8002ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a26:	897b      	ldrh	r3, [r7, #10]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	6a3a      	ldr	r2, [r7, #32]
 8002a3a:	492d      	ldr	r1, [pc, #180]	@ (8002af0 <I2C_RequestMemoryWrite+0x128>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f9bb 	bl	8002db8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e04c      	b.n	8002ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a64:	6a39      	ldr	r1, [r7, #32]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fa46 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d107      	bne.n	8002a8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e02b      	b.n	8002ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	611a      	str	r2, [r3, #16]
 8002a9e:	e021      	b.n	8002ae4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002aa0:	893b      	ldrh	r3, [r7, #8]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab0:	6a39      	ldr	r1, [r7, #32]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa20 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d107      	bne.n	8002ad6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e005      	b.n	8002ae6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ada:	893b      	ldrh	r3, [r7, #8]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	00010002 	.word	0x00010002

08002af4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	460b      	mov	r3, r1
 8002b08:	813b      	strh	r3, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f8c2 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b54:	d103      	bne.n	8002b5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0aa      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	6a3a      	ldr	r2, [r7, #32]
 8002b76:	4952      	ldr	r1, [pc, #328]	@ (8002cc0 <I2C_RequestMemoryRead+0x1cc>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f91d 	bl	8002db8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e097      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f9a8 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d107      	bne.n	8002bc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e076      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd0:	893b      	ldrh	r3, [r7, #8]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]
 8002bda:	e021      	b.n	8002c20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bdc:	893b      	ldrh	r3, [r7, #8]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bec:	6a39      	ldr	r1, [r7, #32]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f982 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d107      	bne.n	8002c12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e050      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c22:	6a39      	ldr	r1, [r7, #32]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f967 	bl	8002ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d107      	bne.n	8002c48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e035      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f82b 	bl	8002cc4 <I2C_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00d      	beq.n	8002c90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c82:	d103      	bne.n	8002c8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e013      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c90:	897b      	ldrh	r3, [r7, #10]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	6a3a      	ldr	r2, [r7, #32]
 8002ca4:	4906      	ldr	r1, [pc, #24]	@ (8002cc0 <I2C_RequestMemoryRead+0x1cc>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f886 	bl	8002db8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	00010002 	.word	0x00010002

08002cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd4:	e048      	b.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d044      	beq.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe faa3 	bl	8001228 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d139      	bne.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10d      	bne.n	8002d1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	e00c      	b.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	43da      	mvns	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4013      	ands	r3, r2
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d116      	bne.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e023      	b.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d10d      	bne.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	e00c      	b.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	43da      	mvns	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d093      	beq.n	8002cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc6:	e071      	b.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d123      	bne.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002df0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	f043 0204 	orr.w	r2, r3, #4
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e067      	b.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e26:	d041      	beq.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e28:	f7fe f9fe 	bl	8001228 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d302      	bcc.n	8002e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d136      	bne.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d10c      	bne.n	8002e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4013      	ands	r3, r2
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf14      	ite	ne
 8002e5a:	2301      	movne	r3, #1
 8002e5c:	2300      	moveq	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	e00b      	b.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	f043 0220 	orr.w	r2, r3, #32
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e021      	b.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	0c1b      	lsrs	r3, r3, #16
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d10c      	bne.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e00b      	b.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4013      	ands	r3, r2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf14      	ite	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	2300      	moveq	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f af6d 	bne.w	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f04:	e034      	b.n	8002f70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f8e3 	bl	80030d2 <I2C_IsAcknowledgeFailed>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e034      	b.n	8002f80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d028      	beq.n	8002f70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe f983 	bl	8001228 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11d      	bne.n	8002f70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	2b80      	cmp	r3, #128	@ 0x80
 8002f40:	d016      	beq.n	8002f70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e007      	b.n	8002f80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7a:	2b80      	cmp	r3, #128	@ 0x80
 8002f7c:	d1c3      	bne.n	8002f06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f94:	e034      	b.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f89b 	bl	80030d2 <I2C_IsAcknowledgeFailed>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e034      	b.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d028      	beq.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fe f93b 	bl	8001228 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11d      	bne.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d016      	beq.n	8003000 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e007      	b.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d1c3      	bne.n	8002f96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003024:	e049      	b.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b10      	cmp	r3, #16
 8003032:	d119      	bne.n	8003068 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0210 	mvn.w	r2, #16
 800303c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e030      	b.n	80030ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003068:	f7fe f8de 	bl	8001228 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	429a      	cmp	r2, r3
 8003076:	d302      	bcc.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d11d      	bne.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003088:	2b40      	cmp	r3, #64	@ 0x40
 800308a:	d016      	beq.n	80030ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e007      	b.n	80030ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c4:	2b40      	cmp	r3, #64	@ 0x40
 80030c6:	d1ae      	bne.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e8:	d11b      	bne.n	8003122 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f043 0204 	orr.w	r2, r3, #4
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e267      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d075      	beq.n	800323a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800314e:	4b88      	ldr	r3, [pc, #544]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b04      	cmp	r3, #4
 8003158:	d00c      	beq.n	8003174 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315a:	4b85      	ldr	r3, [pc, #532]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003162:	2b08      	cmp	r3, #8
 8003164:	d112      	bne.n	800318c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003166:	4b82      	ldr	r3, [pc, #520]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003172:	d10b      	bne.n	800318c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	4b7e      	ldr	r3, [pc, #504]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d05b      	beq.n	8003238 <HAL_RCC_OscConfig+0x108>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d157      	bne.n	8003238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e242      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003194:	d106      	bne.n	80031a4 <HAL_RCC_OscConfig+0x74>
 8003196:	4b76      	ldr	r3, [pc, #472]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a75      	ldr	r2, [pc, #468]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e01d      	b.n	80031e0 <HAL_RCC_OscConfig+0xb0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x98>
 80031ae:	4b70      	ldr	r3, [pc, #448]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6f      	ldr	r2, [pc, #444]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6c      	ldr	r2, [pc, #432]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0xb0>
 80031c8:	4b69      	ldr	r3, [pc, #420]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a68      	ldr	r2, [pc, #416]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b66      	ldr	r3, [pc, #408]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a65      	ldr	r2, [pc, #404]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80031da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe f81e 	bl	8001228 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe f81a 	bl	8001228 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e207      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b5b      	ldr	r3, [pc, #364]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0xc0>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe f80a 	bl	8001228 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe f806 	bl	8001228 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	@ 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1f3      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	4b51      	ldr	r3, [pc, #324]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0xe8>
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003246:	4b4a      	ldr	r3, [pc, #296]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003252:	4b47      	ldr	r3, [pc, #284]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11c      	bne.n	8003298 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325e:	4b44      	ldr	r3, [pc, #272]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x152>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e1c7      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b3b      	ldr	r3, [pc, #236]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4937      	ldr	r1, [pc, #220]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	e03a      	b.n	800330e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b34      	ldr	r3, [pc, #208]	@ (8003374 <HAL_RCC_OscConfig+0x244>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fd ffbf 	bl	8001228 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fd ffbb 	bl	8001228 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1a8      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b28      	ldr	r3, [pc, #160]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4925      	ldr	r1, [pc, #148]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b24      	ldr	r3, [pc, #144]	@ (8003374 <HAL_RCC_OscConfig+0x244>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fd ff9e 	bl	8001228 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f0:	f7fd ff9a 	bl	8001228 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e187      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d036      	beq.n	8003388 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d016      	beq.n	8003350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003322:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <HAL_RCC_OscConfig+0x248>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fd ff7e 	bl	8001228 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fd ff7a 	bl	8001228 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e167      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	4b0b      	ldr	r3, [pc, #44]	@ (8003370 <HAL_RCC_OscConfig+0x240>)
 8003344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x200>
 800334e:	e01b      	b.n	8003388 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003350:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <HAL_RCC_OscConfig+0x248>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7fd ff67 	bl	8001228 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	e00e      	b.n	800337c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800335e:	f7fd ff63 	bl	8001228 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d907      	bls.n	800337c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e150      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
 8003370:	40023800 	.word	0x40023800
 8003374:	42470000 	.word	0x42470000
 8003378:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800337c:	4b88      	ldr	r3, [pc, #544]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 800337e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ea      	bne.n	800335e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8097 	beq.w	80034c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339a:	4b81      	ldr	r3, [pc, #516]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	4b7d      	ldr	r3, [pc, #500]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	4a7c      	ldr	r2, [pc, #496]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 80033b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b6:	4b7a      	ldr	r3, [pc, #488]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	4b77      	ldr	r3, [pc, #476]	@ (80035a4 <HAL_RCC_OscConfig+0x474>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d118      	bne.n	8003404 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d2:	4b74      	ldr	r3, [pc, #464]	@ (80035a4 <HAL_RCC_OscConfig+0x474>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a73      	ldr	r2, [pc, #460]	@ (80035a4 <HAL_RCC_OscConfig+0x474>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033de:	f7fd ff23 	bl	8001228 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e6:	f7fd ff1f 	bl	8001228 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e10c      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	4b6a      	ldr	r3, [pc, #424]	@ (80035a4 <HAL_RCC_OscConfig+0x474>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x2ea>
 800340c:	4b64      	ldr	r3, [pc, #400]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003410:	4a63      	ldr	r2, [pc, #396]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6713      	str	r3, [r2, #112]	@ 0x70
 8003418:	e01c      	b.n	8003454 <HAL_RCC_OscConfig+0x324>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b05      	cmp	r3, #5
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0x30c>
 8003422:	4b5f      	ldr	r3, [pc, #380]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	4a5e      	ldr	r2, [pc, #376]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	6713      	str	r3, [r2, #112]	@ 0x70
 800342e:	4b5c      	ldr	r3, [pc, #368]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003432:	4a5b      	ldr	r2, [pc, #364]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6713      	str	r3, [r2, #112]	@ 0x70
 800343a:	e00b      	b.n	8003454 <HAL_RCC_OscConfig+0x324>
 800343c:	4b58      	ldr	r3, [pc, #352]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003440:	4a57      	ldr	r2, [pc, #348]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6713      	str	r3, [r2, #112]	@ 0x70
 8003448:	4b55      	ldr	r3, [pc, #340]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344c:	4a54      	ldr	r2, [pc, #336]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 800344e:	f023 0304 	bic.w	r3, r3, #4
 8003452:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d015      	beq.n	8003488 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345c:	f7fd fee4 	bl	8001228 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003462:	e00a      	b.n	800347a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003464:	f7fd fee0 	bl	8001228 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0cb      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347a:	4b49      	ldr	r3, [pc, #292]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0ee      	beq.n	8003464 <HAL_RCC_OscConfig+0x334>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003488:	f7fd fece 	bl	8001228 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003490:	f7fd feca 	bl	8001228 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e0b5      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a6:	4b3e      	ldr	r3, [pc, #248]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ee      	bne.n	8003490 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b8:	4b39      	ldr	r3, [pc, #228]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	4a38      	ldr	r2, [pc, #224]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80a1 	beq.w	8003610 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ce:	4b34      	ldr	r3, [pc, #208]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d05c      	beq.n	8003594 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d141      	bne.n	8003566 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	4b31      	ldr	r3, [pc, #196]	@ (80035a8 <HAL_RCC_OscConfig+0x478>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fe9e 	bl	8001228 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fd fe9a 	bl	8001228 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e087      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	4b27      	ldr	r3, [pc, #156]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	019b      	lsls	r3, r3, #6
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	3b01      	subs	r3, #1
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	491b      	ldr	r1, [pc, #108]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003538:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <HAL_RCC_OscConfig+0x478>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fd fe73 	bl	8001228 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003546:	f7fd fe6f 	bl	8001228 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e05c      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003558:	4b11      	ldr	r3, [pc, #68]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x416>
 8003564:	e054      	b.n	8003610 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <HAL_RCC_OscConfig+0x478>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd fe5c 	bl	8001228 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fd fe58 	bl	8001228 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e045      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <HAL_RCC_OscConfig+0x470>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x444>
 8003592:	e03d      	b.n	8003610 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e038      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40007000 	.word	0x40007000
 80035a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	@ (800361c <HAL_RCC_OscConfig+0x4ec>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d028      	beq.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d121      	bne.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d11a      	bne.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035dc:	4013      	ands	r3, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d111      	bne.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	3b01      	subs	r3, #1
 80035f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d107      	bne.n	800360c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800

08003620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0cc      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003634:	4b68      	ldr	r3, [pc, #416]	@ (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d90c      	bls.n	800365c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b65      	ldr	r3, [pc, #404]	@ (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b63      	ldr	r3, [pc, #396]	@ (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0b8      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003674:	4b59      	ldr	r3, [pc, #356]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a58      	ldr	r2, [pc, #352]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800367e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800368c:	4b53      	ldr	r3, [pc, #332]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a52      	ldr	r2, [pc, #328]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003698:	4b50      	ldr	r3, [pc, #320]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	494d      	ldr	r1, [pc, #308]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d044      	beq.n	8003740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b47      	ldr	r3, [pc, #284]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d119      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e07f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d003      	beq.n	80036de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036de:	4b3f      	ldr	r3, [pc, #252]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ee:	4b3b      	ldr	r3, [pc, #236]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e067      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fe:	4b37      	ldr	r3, [pc, #220]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4934      	ldr	r1, [pc, #208]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003710:	f7fd fd8a 	bl	8001228 <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	e00a      	b.n	800372e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7fd fd86 	bl	8001228 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e04f      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	4b2b      	ldr	r3, [pc, #172]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 020c 	and.w	r2, r3, #12
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	429a      	cmp	r2, r3
 800373e:	d1eb      	bne.n	8003718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003740:	4b25      	ldr	r3, [pc, #148]	@ (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d20c      	bcs.n	8003768 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b22      	ldr	r3, [pc, #136]	@ (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b20      	ldr	r3, [pc, #128]	@ (80037d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e032      	b.n	80037ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003774:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4916      	ldr	r1, [pc, #88]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003792:	4b12      	ldr	r3, [pc, #72]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	490e      	ldr	r1, [pc, #56]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037a6:	f000 f821 	bl	80037ec <HAL_RCC_GetSysClockFreq>
 80037aa:	4602      	mov	r2, r0
 80037ac:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	490a      	ldr	r1, [pc, #40]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	5ccb      	ldrb	r3, [r1, r3]
 80037ba:	fa22 f303 	lsr.w	r3, r2, r3
 80037be:	4a09      	ldr	r2, [pc, #36]	@ (80037e4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037c2:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_RCC_ClockConfig+0x1c8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fcea 	bl	80011a0 <HAL_InitTick>

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023c00 	.word	0x40023c00
 80037dc:	40023800 	.word	0x40023800
 80037e0:	08004e8c 	.word	0x08004e8c
 80037e4:	20000000 	.word	0x20000000
 80037e8:	2000000c 	.word	0x2000000c

080037ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f0:	b090      	sub	sp, #64	@ 0x40
 80037f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003804:	4b59      	ldr	r3, [pc, #356]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b08      	cmp	r3, #8
 800380e:	d00d      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0x40>
 8003810:	2b08      	cmp	r3, #8
 8003812:	f200 80a1 	bhi.w	8003958 <HAL_RCC_GetSysClockFreq+0x16c>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x34>
 800381a:	2b04      	cmp	r3, #4
 800381c:	d003      	beq.n	8003826 <HAL_RCC_GetSysClockFreq+0x3a>
 800381e:	e09b      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003820:	4b53      	ldr	r3, [pc, #332]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x184>)
 8003822:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003824:	e09b      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003826:	4b53      	ldr	r3, [pc, #332]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x188>)
 8003828:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800382a:	e098      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800382c:	4b4f      	ldr	r3, [pc, #316]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003836:	4b4d      	ldr	r3, [pc, #308]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d028      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	2200      	movs	r2, #0
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	627a      	str	r2, [r7, #36]	@ 0x24
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003854:	2100      	movs	r1, #0
 8003856:	4b47      	ldr	r3, [pc, #284]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x188>)
 8003858:	fb03 f201 	mul.w	r2, r3, r1
 800385c:	2300      	movs	r3, #0
 800385e:	fb00 f303 	mul.w	r3, r0, r3
 8003862:	4413      	add	r3, r2
 8003864:	4a43      	ldr	r2, [pc, #268]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x188>)
 8003866:	fba0 1202 	umull	r1, r2, r0, r2
 800386a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800386c:	460a      	mov	r2, r1
 800386e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003872:	4413      	add	r3, r2
 8003874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003878:	2200      	movs	r2, #0
 800387a:	61bb      	str	r3, [r7, #24]
 800387c:	61fa      	str	r2, [r7, #28]
 800387e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003882:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003886:	f7fc fc9f 	bl	80001c8 <__aeabi_uldivmod>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4613      	mov	r3, r2
 8003890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003892:	e053      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003894:	4b35      	ldr	r3, [pc, #212]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	2200      	movs	r2, #0
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	617a      	str	r2, [r7, #20]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038a6:	f04f 0b00 	mov.w	fp, #0
 80038aa:	4652      	mov	r2, sl
 80038ac:	465b      	mov	r3, fp
 80038ae:	f04f 0000 	mov.w	r0, #0
 80038b2:	f04f 0100 	mov.w	r1, #0
 80038b6:	0159      	lsls	r1, r3, #5
 80038b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038bc:	0150      	lsls	r0, r2, #5
 80038be:	4602      	mov	r2, r0
 80038c0:	460b      	mov	r3, r1
 80038c2:	ebb2 080a 	subs.w	r8, r2, sl
 80038c6:	eb63 090b 	sbc.w	r9, r3, fp
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038de:	ebb2 0408 	subs.w	r4, r2, r8
 80038e2:	eb63 0509 	sbc.w	r5, r3, r9
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	00eb      	lsls	r3, r5, #3
 80038f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f4:	00e2      	lsls	r2, r4, #3
 80038f6:	4614      	mov	r4, r2
 80038f8:	461d      	mov	r5, r3
 80038fa:	eb14 030a 	adds.w	r3, r4, sl
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	eb45 030b 	adc.w	r3, r5, fp
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003912:	4629      	mov	r1, r5
 8003914:	028b      	lsls	r3, r1, #10
 8003916:	4621      	mov	r1, r4
 8003918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800391c:	4621      	mov	r1, r4
 800391e:	028a      	lsls	r2, r1, #10
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003926:	2200      	movs	r2, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	60fa      	str	r2, [r7, #12]
 800392c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003930:	f7fc fc4a 	bl	80001c8 <__aeabi_uldivmod>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4613      	mov	r3, r2
 800393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_GetSysClockFreq+0x180>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	3301      	adds	r3, #1
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800394c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003956:	e002      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x184>)
 800395a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800395c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003960:	4618      	mov	r0, r3
 8003962:	3740      	adds	r7, #64	@ 0x40
 8003964:	46bd      	mov	sp, r7
 8003966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	00f42400 	.word	0x00f42400
 8003974:	017d7840 	.word	0x017d7840

08003978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800397c:	4b03      	ldr	r3, [pc, #12]	@ (800398c <HAL_RCC_GetHCLKFreq+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000000 	.word	0x20000000

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003994:	f7ff fff0 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	08004e9c 	.word	0x08004e9c

080039b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039bc:	f7ff ffdc 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0b5b      	lsrs	r3, r3, #13
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	@ (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	08004e9c 	.word	0x08004e9c

080039e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e042      	b.n	8003a78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd f876 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	@ 0x24
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 ff85 	bl	8004934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	@ 0x28
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d175      	bne.n	8003b8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Transmit+0x2c>
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e06e      	b.n	8003b8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2221      	movs	r2, #33	@ 0x21
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003abe:	f7fd fbb3 	bl	8001228 <HAL_GetTick>
 8003ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad8:	d108      	bne.n	8003aec <HAL_UART_Transmit+0x6c>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e003      	b.n	8003af4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003af4:	e02e      	b.n	8003b54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2200      	movs	r2, #0
 8003afe:	2180      	movs	r1, #128	@ 0x80
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fc5d 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e03a      	b.n	8003b8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	3302      	adds	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	e007      	b.n	8003b46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3301      	adds	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1cb      	bne.n	8003af6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	2140      	movs	r1, #64	@ 0x40
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fc29 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e006      	b.n	8003b8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b08c      	sub	sp, #48	@ 0x30
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d14a      	bne.n	8003c46 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e043      	b.n	8003c48 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fc4e 	bl	8004474 <UART_Start_Receive_DMA>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003bde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d12c      	bne.n	8003c40 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d125      	bne.n	8003c3a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	617b      	str	r3, [r7, #20]
   return(result);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f043 0310 	orr.w	r3, r3, #16
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c24:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6a39      	ldr	r1, [r7, #32]
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e5      	bne.n	8003c04 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8003c38:	e002      	b.n	8003c40 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003c40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c44:	e000      	b.n	8003c48 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
  }
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3730      	adds	r7, #48	@ 0x30
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b0ba      	sub	sp, #232	@ 0xe8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x66>
 8003ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fd81 	bl	80047b6 <UART_Receive_IT>
      return;
 8003cb4:	e25b      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80de 	beq.w	8003e7c <HAL_UART_IRQHandler+0x22c>
 8003cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80d1 	beq.w	8003e7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_UART_IRQHandler+0xae>
 8003ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_UART_IRQHandler+0xd2>
 8003d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	f043 0202 	orr.w	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_UART_IRQHandler+0xf6>
 8003d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	f043 0204 	orr.w	r2, r3, #4
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d011      	beq.n	8003d76 <HAL_UART_IRQHandler+0x126>
 8003d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d105      	bne.n	8003d6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	f043 0208 	orr.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 81f2 	beq.w	8004164 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_UART_IRQHandler+0x14e>
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fd0c 	bl	80047b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da8:	2b40      	cmp	r3, #64	@ 0x40
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_UART_IRQHandler+0x17a>
 8003dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d04f      	beq.n	8003e6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fc14 	bl	80045f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dda:	2b40      	cmp	r3, #64	@ 0x40
 8003ddc:	d141      	bne.n	8003e62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3314      	adds	r3, #20
 8003de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1d9      	bne.n	8003dde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d013      	beq.n	8003e5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	4a7e      	ldr	r2, [pc, #504]	@ (8004030 <HAL_UART_IRQHandler+0x3e0>)
 8003e38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd fcc6 	bl	80017d0 <HAL_DMA_Abort_IT>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e54:	4610      	mov	r0, r2
 8003e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	e00e      	b.n	8003e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9a8 	bl	80041b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	e00a      	b.n	8003e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f9a4 	bl	80041b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	e006      	b.n	8003e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9a0 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e76:	e175      	b.n	8004164 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	bf00      	nop
    return;
 8003e7a:	e173      	b.n	8004164 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	f040 814f 	bne.w	8004124 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8148 	beq.w	8004124 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8141 	beq.w	8004124 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	f040 80b6 	bne.w	8004034 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ed4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8145 	beq.w	8004168 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	f080 813e 	bcs.w	8004168 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ef2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003efe:	f000 8088 	beq.w	8004012 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1d9      	bne.n	8003f02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3314      	adds	r3, #20
 8003f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e1      	bne.n	8003f4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3314      	adds	r3, #20
 8003f90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e3      	bne.n	8003f8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fe2:	f023 0310 	bic.w	r3, r3, #16
 8003fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ff4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ff6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ffa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e3      	bne.n	8003fd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	4618      	mov	r0, r3
 800400e:	f7fd fb6f 	bl	80016f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004020:	b29b      	uxth	r3, r3
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	b29b      	uxth	r3, r3
 8004026:	4619      	mov	r1, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fc fbab 	bl	8000784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800402e:	e09b      	b.n	8004168 <HAL_UART_IRQHandler+0x518>
 8004030:	080046bf 	.word	0x080046bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800403c:	b29b      	uxth	r3, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 808e 	beq.w	800416c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8089 	beq.w	800416c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800406a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004070:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800407e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004080:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004084:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800408c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e3      	bne.n	800405a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3314      	adds	r3, #20
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	623b      	str	r3, [r7, #32]
   return(result);
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e3      	bne.n	8004092 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80040fc:	61fa      	str	r2, [r7, #28]
 80040fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	69b9      	ldr	r1, [r7, #24]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	617b      	str	r3, [r7, #20]
   return(result);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e3      	bne.n	80040d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800411a:	4619      	mov	r1, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fc fb31 	bl	8000784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004122:	e023      	b.n	800416c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_UART_IRQHandler+0x4f4>
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fad2 	bl	80046e6 <UART_Transmit_IT>
    return;
 8004142:	e014      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00e      	beq.n	800416e <HAL_UART_IRQHandler+0x51e>
 8004150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fb12 	bl	8004786 <UART_EndTransmit_IT>
    return;
 8004162:	e004      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
    return;
 8004164:	bf00      	nop
 8004166:	e002      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
      return;
 8004168:	bf00      	nop
 800416a:	e000      	b.n	800416e <HAL_UART_IRQHandler+0x51e>
      return;
 800416c:	bf00      	nop
  }
}
 800416e:	37e8      	adds	r7, #232	@ 0xe8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b09c      	sub	sp, #112	@ 0x70
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d172      	bne.n	80042c6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80041e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e2:	2200      	movs	r2, #0
 80041e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004206:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004208:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800420c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800422a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	667b      	str	r3, [r7, #100]	@ 0x64
 8004232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800423a:	647a      	str	r2, [r7, #68]	@ 0x44
 800423c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	623b      	str	r3, [r7, #32]
   return(result);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004264:	663b      	str	r3, [r7, #96]	@ 0x60
 8004266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3314      	adds	r3, #20
 800426c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800426e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	2b01      	cmp	r3, #1
 8004290:	d119      	bne.n	80042c6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f023 0310 	bic.w	r3, r3, #16
 80042a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042b2:	61fa      	str	r2, [r7, #28]
 80042b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	69b9      	ldr	r1, [r7, #24]
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	617b      	str	r3, [r7, #20]
   return(result);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042c8:	2200      	movs	r2, #0
 80042ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d106      	bne.n	80042e2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042d8:	4619      	mov	r1, r3
 80042da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80042dc:	f7fc fa52 	bl	8000784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042e0:	e002      	b.n	80042e8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80042e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80042e4:	f7ff ff50 	bl	8004188 <HAL_UART_RxCpltCallback>
}
 80042e8:	bf00      	nop
 80042ea:	3770      	adds	r7, #112	@ 0x70
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004308:	2b01      	cmp	r3, #1
 800430a:	d108      	bne.n	800431e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7fc fa34 	bl	8000784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800431c:	e002      	b.n	8004324 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff ff3c 	bl	800419c <HAL_UART_RxHalfCpltCallback>
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004348:	2b80      	cmp	r3, #128	@ 0x80
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b21      	cmp	r3, #33	@ 0x21
 800435e:	d108      	bne.n	8004372 <UART_DMAError+0x46>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800436c:	68b8      	ldr	r0, [r7, #8]
 800436e:	f000 f91b 	bl	80045a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800437c:	2b40      	cmp	r3, #64	@ 0x40
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b22      	cmp	r3, #34	@ 0x22
 8004392:	d108      	bne.n	80043a6 <UART_DMAError+0x7a>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80043a0:	68b8      	ldr	r0, [r7, #8]
 80043a2:	f000 f929 	bl	80045f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	f043 0210 	orr.w	r2, r3, #16
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b2:	68b8      	ldr	r0, [r7, #8]
 80043b4:	f7ff fefc 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	e03b      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d037      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043da:	f7fc ff25 	bl	8001228 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	6a3a      	ldr	r2, [r7, #32]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e03a      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d023      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b80      	cmp	r3, #128	@ 0x80
 8004406:	d020      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b40      	cmp	r3, #64	@ 0x40
 800440c:	d01d      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b08      	cmp	r3, #8
 800441a:	d116      	bne.n	800444a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8e0 	bl	80045f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2208      	movs	r2, #8
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e00f      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4013      	ands	r3, r2
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	bf0c      	ite	eq
 800445a:	2301      	moveq	r3, #1
 800445c:	2300      	movne	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	429a      	cmp	r2, r3
 8004466:	d0b4      	beq.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b098      	sub	sp, #96	@ 0x60
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2222      	movs	r2, #34	@ 0x22
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a0:	4a3e      	ldr	r2, [pc, #248]	@ (800459c <UART_Start_Receive_DMA+0x128>)
 80044a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	4a3d      	ldr	r2, [pc, #244]	@ (80045a0 <UART_Start_Receive_DMA+0x12c>)
 80044aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b0:	4a3c      	ldr	r2, [pc, #240]	@ (80045a4 <UART_Start_Receive_DMA+0x130>)
 80044b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b8:	2200      	movs	r2, #0
 80044ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80044bc:	f107 0308 	add.w	r3, r7, #8
 80044c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4619      	mov	r1, r3
 80044ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	f7fd f8b4 	bl	8001640 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80044d8:	2300      	movs	r3, #0
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d019      	beq.n	800452a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800450c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004516:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004518:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800451c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e5      	bne.n	80044f6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3314      	adds	r3, #20
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	657b      	str	r3, [r7, #84]	@ 0x54
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3314      	adds	r3, #20
 8004548:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800454a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800454c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004550:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e5      	bne.n	800452a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	617b      	str	r3, [r7, #20]
   return(result);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004574:	653b      	str	r3, [r7, #80]	@ 0x50
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800457e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6a39      	ldr	r1, [r7, #32]
 8004584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	61fb      	str	r3, [r7, #28]
   return(result);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3760      	adds	r7, #96	@ 0x60
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	080041c5 	.word	0x080041c5
 80045a0:	080042f1 	.word	0x080042f1
 80045a4:	0800432d 	.word	0x0800432d

080045a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	@ 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	61ba      	str	r2, [r7, #24]
 80045d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6979      	ldr	r1, [r7, #20]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	613b      	str	r3, [r7, #16]
   return(result);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80045ec:	bf00      	nop
 80045ee:	3724      	adds	r7, #36	@ 0x24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b095      	sub	sp, #84	@ 0x54
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004620:	643a      	str	r2, [r7, #64]	@ 0x40
 8004622:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004626:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3314      	adds	r3, #20
 800463a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	61fb      	str	r3, [r7, #28]
   return(result);
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3314      	adds	r3, #20
 8004652:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800465a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e5      	bne.n	8004634 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466c:	2b01      	cmp	r3, #1
 800466e:	d119      	bne.n	80046a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f023 0310 	bic.w	r3, r3, #16
 8004686:	647b      	str	r3, [r7, #68]	@ 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004690:	61ba      	str	r2, [r7, #24]
 8004692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6979      	ldr	r1, [r7, #20]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	613b      	str	r3, [r7, #16]
   return(result);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e5      	bne.n	8004670 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046b2:	bf00      	nop
 80046b4:	3754      	adds	r7, #84	@ 0x54
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff fd69 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b21      	cmp	r3, #33	@ 0x21
 80046f8:	d13e      	bne.n	8004778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004702:	d114      	bne.n	800472e <UART_Transmit_IT+0x48>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d110      	bne.n	800472e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	1c9a      	adds	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	621a      	str	r2, [r3, #32]
 800472c:	e008      	b.n	8004740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	1c59      	adds	r1, r3, #1
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6211      	str	r1, [r2, #32]
 8004738:	781a      	ldrb	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4619      	mov	r1, r3
 800474e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10f      	bne.n	8004774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e000      	b.n	800477a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800479c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff fce4 	bl	8004174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b08c      	sub	sp, #48	@ 0x30
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b22      	cmp	r3, #34	@ 0x22
 80047c8:	f040 80ae 	bne.w	8004928 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d4:	d117      	bne.n	8004806 <UART_Receive_IT+0x50>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d113      	bne.n	8004806 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fe:	1c9a      	adds	r2, r3, #2
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	629a      	str	r2, [r3, #40]	@ 0x28
 8004804:	e026      	b.n	8004854 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800480c:	2300      	movs	r3, #0
 800480e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004818:	d007      	beq.n	800482a <UART_Receive_IT+0x74>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <UART_Receive_IT+0x82>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e008      	b.n	800484a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004844:	b2da      	uxtb	r2, r3
 8004846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004848:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4619      	mov	r1, r3
 8004862:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004864:	2b00      	cmp	r3, #0
 8004866:	d15d      	bne.n	8004924 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0220 	bic.w	r2, r2, #32
 8004876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d135      	bne.n	800491a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	613b      	str	r3, [r7, #16]
   return(result);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f023 0310 	bic.w	r3, r3, #16
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d4:	623a      	str	r2, [r7, #32]
 80048d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	69f9      	ldr	r1, [r7, #28]
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d10a      	bne.n	800490c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fb ff36 	bl	8000784 <HAL_UARTEx_RxEventCallback>
 8004918:	e002      	b.n	8004920 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff fc34 	bl	8004188 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e002      	b.n	800492a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3730      	adds	r7, #48	@ 0x30
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004938:	b0c0      	sub	sp, #256	@ 0x100
 800493a:	af00      	add	r7, sp, #0
 800493c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	68d9      	ldr	r1, [r3, #12]
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	ea40 0301 	orr.w	r3, r0, r1
 800495c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	431a      	orrs	r2, r3
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	431a      	orrs	r2, r3
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800498c:	f021 010c 	bic.w	r1, r1, #12
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800499a:	430b      	orrs	r3, r1
 800499c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ae:	6999      	ldr	r1, [r3, #24]
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	ea40 0301 	orr.w	r3, r0, r1
 80049ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b8f      	ldr	r3, [pc, #572]	@ (8004c00 <UART_SetConfig+0x2cc>)
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d005      	beq.n	80049d4 <UART_SetConfig+0xa0>
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004c04 <UART_SetConfig+0x2d0>)
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d104      	bne.n	80049de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049d4:	f7fe fff0 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 80049d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049dc:	e003      	b.n	80049e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049de:	f7fe ffd7 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 80049e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f0:	f040 810c 	bne.w	8004c0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	1891      	adds	r1, r2, r2
 8004a0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a0e:	415b      	adcs	r3, r3
 8004a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a16:	4621      	mov	r1, r4
 8004a18:	eb12 0801 	adds.w	r8, r2, r1
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	eb43 0901 	adc.w	r9, r3, r1
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a36:	4690      	mov	r8, r2
 8004a38:	4699      	mov	r9, r3
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	eb18 0303 	adds.w	r3, r8, r3
 8004a40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a44:	462b      	mov	r3, r5
 8004a46:	eb49 0303 	adc.w	r3, r9, r3
 8004a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a62:	460b      	mov	r3, r1
 8004a64:	18db      	adds	r3, r3, r3
 8004a66:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a68:	4613      	mov	r3, r2
 8004a6a:	eb42 0303 	adc.w	r3, r2, r3
 8004a6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a78:	f7fb fba6 	bl	80001c8 <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4b61      	ldr	r3, [pc, #388]	@ (8004c08 <UART_SetConfig+0x2d4>)
 8004a82:	fba3 2302 	umull	r2, r3, r3, r2
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	011c      	lsls	r4, r3, #4
 8004a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	1891      	adds	r1, r2, r2
 8004aa2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004aa4:	415b      	adcs	r3, r3
 8004aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004aac:	4641      	mov	r1, r8
 8004aae:	eb12 0a01 	adds.w	sl, r2, r1
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ac4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004acc:	4692      	mov	sl, r2
 8004ace:	469b      	mov	fp, r3
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ada:	464b      	mov	r3, r9
 8004adc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004af0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004af4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004af8:	460b      	mov	r3, r1
 8004afa:	18db      	adds	r3, r3, r3
 8004afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004afe:	4613      	mov	r3, r2
 8004b00:	eb42 0303 	adc.w	r3, r2, r3
 8004b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b0e:	f7fb fb5b 	bl	80001c8 <__aeabi_uldivmod>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	4b3b      	ldr	r3, [pc, #236]	@ (8004c08 <UART_SetConfig+0x2d4>)
 8004b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2264      	movs	r2, #100	@ 0x64
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	1acb      	subs	r3, r1, r3
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b2e:	4b36      	ldr	r3, [pc, #216]	@ (8004c08 <UART_SetConfig+0x2d4>)
 8004b30:	fba3 2302 	umull	r2, r3, r3, r2
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b3c:	441c      	add	r4, r3
 8004b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	1891      	adds	r1, r2, r2
 8004b56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b58:	415b      	adcs	r3, r3
 8004b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b60:	4641      	mov	r1, r8
 8004b62:	1851      	adds	r1, r2, r1
 8004b64:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b66:	4649      	mov	r1, r9
 8004b68:	414b      	adcs	r3, r1
 8004b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b78:	4659      	mov	r1, fp
 8004b7a:	00cb      	lsls	r3, r1, #3
 8004b7c:	4651      	mov	r1, sl
 8004b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b82:	4651      	mov	r1, sl
 8004b84:	00ca      	lsls	r2, r1, #3
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b94:	464b      	mov	r3, r9
 8004b96:	460a      	mov	r2, r1
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	18db      	adds	r3, r3, r3
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bba:	4613      	mov	r3, r2
 8004bbc:	eb42 0303 	adc.w	r3, r2, r3
 8004bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bca:	f7fb fafd 	bl	80001c8 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c08 <UART_SetConfig+0x2d4>)
 8004bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	2164      	movs	r1, #100	@ 0x64
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	3332      	adds	r3, #50	@ 0x32
 8004be6:	4a08      	ldr	r2, [pc, #32]	@ (8004c08 <UART_SetConfig+0x2d4>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	f003 0207 	and.w	r2, r3, #7
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4422      	add	r2, r4
 8004bfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bfc:	e106      	b.n	8004e0c <UART_SetConfig+0x4d8>
 8004bfe:	bf00      	nop
 8004c00:	40011000 	.word	0x40011000
 8004c04:	40011400 	.word	0x40011400
 8004c08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c1e:	4642      	mov	r2, r8
 8004c20:	464b      	mov	r3, r9
 8004c22:	1891      	adds	r1, r2, r2
 8004c24:	6239      	str	r1, [r7, #32]
 8004c26:	415b      	adcs	r3, r3
 8004c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c2e:	4641      	mov	r1, r8
 8004c30:	1854      	adds	r4, r2, r1
 8004c32:	4649      	mov	r1, r9
 8004c34:	eb43 0501 	adc.w	r5, r3, r1
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	00eb      	lsls	r3, r5, #3
 8004c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c46:	00e2      	lsls	r2, r4, #3
 8004c48:	4614      	mov	r4, r2
 8004c4a:	461d      	mov	r5, r3
 8004c4c:	4643      	mov	r3, r8
 8004c4e:	18e3      	adds	r3, r4, r3
 8004c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c54:	464b      	mov	r3, r9
 8004c56:	eb45 0303 	adc.w	r3, r5, r3
 8004c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	008b      	lsls	r3, r1, #2
 8004c7e:	4621      	mov	r1, r4
 8004c80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c84:	4621      	mov	r1, r4
 8004c86:	008a      	lsls	r2, r1, #2
 8004c88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c8c:	f7fb fa9c 	bl	80001c8 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4b60      	ldr	r3, [pc, #384]	@ (8004e18 <UART_SetConfig+0x4e4>)
 8004c96:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	011c      	lsls	r4, r3, #4
 8004c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ca8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	1891      	adds	r1, r2, r2
 8004cb6:	61b9      	str	r1, [r7, #24]
 8004cb8:	415b      	adcs	r3, r3
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	1851      	adds	r1, r2, r1
 8004cc4:	6139      	str	r1, [r7, #16]
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	414b      	adcs	r3, r1
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cd8:	4659      	mov	r1, fp
 8004cda:	00cb      	lsls	r3, r1, #3
 8004cdc:	4651      	mov	r1, sl
 8004cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ce2:	4651      	mov	r1, sl
 8004ce4:	00ca      	lsls	r2, r1, #3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	4642      	mov	r2, r8
 8004cee:	189b      	adds	r3, r3, r2
 8004cf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	eb42 0303 	adc.w	r3, r2, r3
 8004cfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d18:	4649      	mov	r1, r9
 8004d1a:	008b      	lsls	r3, r1, #2
 8004d1c:	4641      	mov	r1, r8
 8004d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d22:	4641      	mov	r1, r8
 8004d24:	008a      	lsls	r2, r1, #2
 8004d26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d2a:	f7fb fa4d 	bl	80001c8 <__aeabi_uldivmod>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	4b38      	ldr	r3, [pc, #224]	@ (8004e18 <UART_SetConfig+0x4e4>)
 8004d36:	fba3 2301 	umull	r2, r3, r3, r1
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2264      	movs	r2, #100	@ 0x64
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	1acb      	subs	r3, r1, r3
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	3332      	adds	r3, #50	@ 0x32
 8004d48:	4a33      	ldr	r2, [pc, #204]	@ (8004e18 <UART_SetConfig+0x4e4>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d54:	441c      	add	r4, r3
 8004d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	1891      	adds	r1, r2, r2
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	415b      	adcs	r3, r3
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d74:	4641      	mov	r1, r8
 8004d76:	1851      	adds	r1, r2, r1
 8004d78:	6039      	str	r1, [r7, #0]
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	414b      	adcs	r3, r1
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d8c:	4659      	mov	r1, fp
 8004d8e:	00cb      	lsls	r3, r1, #3
 8004d90:	4651      	mov	r1, sl
 8004d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d96:	4651      	mov	r1, sl
 8004d98:	00ca      	lsls	r2, r1, #3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4642      	mov	r2, r8
 8004da2:	189b      	adds	r3, r3, r2
 8004da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004da6:	464b      	mov	r3, r9
 8004da8:	460a      	mov	r2, r1
 8004daa:	eb42 0303 	adc.w	r3, r2, r3
 8004dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dba:	667a      	str	r2, [r7, #100]	@ 0x64
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004dc8:	4649      	mov	r1, r9
 8004dca:	008b      	lsls	r3, r1, #2
 8004dcc:	4641      	mov	r1, r8
 8004dce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	008a      	lsls	r2, r1, #2
 8004dd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004dda:	f7fb f9f5 	bl	80001c8 <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e18 <UART_SetConfig+0x4e4>)
 8004de4:	fba3 1302 	umull	r1, r3, r3, r2
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	2164      	movs	r1, #100	@ 0x64
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	3332      	adds	r3, #50	@ 0x32
 8004df6:	4a08      	ldr	r2, [pc, #32]	@ (8004e18 <UART_SetConfig+0x4e4>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	f003 020f 	and.w	r2, r3, #15
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4422      	add	r2, r4
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e12:	46bd      	mov	sp, r7
 8004e14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e18:	51eb851f 	.word	0x51eb851f

08004e1c <memset>:
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d100      	bne.n	8004e26 <memset+0xa>
 8004e24:	4770      	bx	lr
 8004e26:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2a:	e7f9      	b.n	8004e20 <memset+0x4>

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	@ (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 f818 	bl	8004e74 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	08004eb4 	.word	0x08004eb4
 8004e68:	08004eb4 	.word	0x08004eb4
 8004e6c:	08004eb4 	.word	0x08004eb4
 8004e70:	08004eb8 	.word	0x08004eb8

08004e74 <_init>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr

08004e80 <_fini>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr
