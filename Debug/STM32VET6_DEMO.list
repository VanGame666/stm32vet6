
STM32VET6_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004c14  08004c14  00005c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c70  08004c70  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004c70  08004c70  00005c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c78  08004c78  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c7c  08004c7c  00005c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000344  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7f5  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000269f  00000000  00000000  0001388d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00015f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090a  00000000  00000000  00016b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d78  00000000  00000000  0001740a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012774  00000000  00000000  0003a182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7627  00000000  00000000  0004c8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113f1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003664  00000000  00000000  00113f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  001175c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bfc 	.word	0x08004bfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004bfc 	.word	0x08004bfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <MX_CRC_Init+0x20>)
 8000566:	4a07      	ldr	r2, [pc, #28]	@ (8000584 <MX_CRC_Init+0x24>)
 8000568:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <MX_CRC_Init+0x20>)
 800056c:	f000 fe3d 	bl	80011ea <HAL_CRC_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000576:	f000 fa27 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000084 	.word	0x20000084
 8000584:	40023000 	.word	0x40023000

08000588 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0b      	ldr	r2, [pc, #44]	@ (80005c4 <HAL_CRC_MspInit+0x3c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d10d      	bne.n	80005b6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <HAL_CRC_MspInit+0x40>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a09      	ldr	r2, [pc, #36]	@ (80005c8 <HAL_CRC_MspInit+0x40>)
 80005a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <HAL_CRC_MspInit+0x40>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40023000 	.word	0x40023000
 80005c8:	40023800 	.word	0x40023800

080005cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_DMA_Init+0x3c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a0b      	ldr	r2, [pc, #44]	@ (8000608 <MX_DMA_Init+0x3c>)
 80005dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_DMA_Init+0x3c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2044      	movs	r0, #68	@ 0x44
 80005f4:	f000 fdc3 	bl	800117e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005f8:	2044      	movs	r0, #68	@ 0x44
 80005fa:	f000 fddc 	bl	80011b6 <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <MX_GPIO_Init+0xe0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a30      	ldr	r2, [pc, #192]	@ (80006ec <MX_GPIO_Init+0xe0>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b2e      	ldr	r3, [pc, #184]	@ (80006ec <MX_GPIO_Init+0xe0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b2a      	ldr	r3, [pc, #168]	@ (80006ec <MX_GPIO_Init+0xe0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a29      	ldr	r2, [pc, #164]	@ (80006ec <MX_GPIO_Init+0xe0>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b27      	ldr	r3, [pc, #156]	@ (80006ec <MX_GPIO_Init+0xe0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <MX_GPIO_Init+0xe0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a22      	ldr	r2, [pc, #136]	@ (80006ec <MX_GPIO_Init+0xe0>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <MX_GPIO_Init+0xe0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <MX_GPIO_Init+0xe0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <MX_GPIO_Init+0xe0>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <MX_GPIO_Init+0xe0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2106      	movs	r1, #6
 8000696:	4816      	ldr	r0, [pc, #88]	@ (80006f0 <MX_GPIO_Init+0xe4>)
 8000698:	f001 fb7a 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	480f      	ldr	r0, [pc, #60]	@ (80006f0 <MX_GPIO_Init+0xe4>)
 80006b2:	f001 f9b9 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80006b6:	2306      	movs	r3, #6
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <MX_GPIO_Init+0xe4>)
 80006ce:	f001 f9ab 	bl	8001a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2006      	movs	r0, #6
 80006d8:	f000 fd51 	bl	800117e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006dc:	2006      	movs	r0, #6
 80006de:	f000 fd6a 	bl	80011b6 <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	@ 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020000 	.word	0x40020000

080006f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_I2C1_Init+0x50>)
 80006fa:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <MX_I2C1_Init+0x54>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_I2C1_Init+0x50>)
 8000700:	4a12      	ldr	r2, [pc, #72]	@ (800074c <MX_I2C1_Init+0x58>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_I2C1_Init+0x50>)
 8000712:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_I2C1_Init+0x50>)
 8000732:	f001 fb79 	bl	8001e28 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 f944 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000008c 	.word	0x2000008c
 8000748:	40005400 	.word	0x40005400
 800074c:	000186a0 	.word	0x000186a0

08000750 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	@ 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a19      	ldr	r2, [pc, #100]	@ (80007d4 <HAL_I2C_MspInit+0x84>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d12c      	bne.n	80007cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <HAL_I2C_MspInit+0x88>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <HAL_I2C_MspInit+0x88>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <HAL_I2C_MspInit+0x88>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800078e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000794:	2312      	movs	r3, #18
 8000796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000798:	2301      	movs	r3, #1
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a0:	2304      	movs	r3, #4
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	480c      	ldr	r0, [pc, #48]	@ (80007dc <HAL_I2C_MspInit+0x8c>)
 80007ac:	f001 f93c 	bl	8001a28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <HAL_I2C_MspInit+0x88>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a07      	ldr	r2, [pc, #28]	@ (80007d8 <HAL_I2C_MspInit+0x88>)
 80007ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <HAL_I2C_MspInit+0x88>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	@ 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40005400 	.word	0x40005400
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020400 	.word	0x40020400

080007e0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 80007e8:	1d39      	adds	r1, r7, #4
 80007ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ee:	2201      	movs	r2, #1
 80007f0:	4803      	ldr	r0, [pc, #12]	@ (8000800 <__io_putchar+0x20>)
 80007f2:	f002 f905 	bl	8002a00 <HAL_UART_Transmit>
	return ch;
 80007f6:	687b      	ldr	r3, [r7, #4]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200000e8 	.word	0x200000e8

08000804 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == GPIO_PIN_SET)
 800080e:	2101      	movs	r1, #1
 8000810:	480d      	ldr	r0, [pc, #52]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x44>)
 8000812:	f001 faa5 	bl	8001d60 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	d110      	bne.n	800083e <HAL_GPIO_EXTI_Callback+0x3a>
	{
		for(int temp = 65536*50;temp != 0;temp--);
 800081c:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e002      	b.n	800082a <HAL_GPIO_EXTI_Callback+0x26>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3b01      	subs	r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f9      	bne.n	8000824 <HAL_GPIO_EXTI_Callback+0x20>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 8000830:	2104      	movs	r1, #4
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x44>)
 8000834:	f001 fac5 	bl	8001dc2 <HAL_GPIO_TogglePin>
		at24_flag = 1;
 8000838:	4b04      	ldr	r3, [pc, #16]	@ (800084c <HAL_GPIO_EXTI_Callback+0x48>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
	}
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40020000 	.word	0x40020000
 800084c:	200000e0 	.word	0x200000e0

08000850 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a0e      	ldr	r2, [pc, #56]	@ (8000898 <HAL_UARTEx_RxEventCallback+0x48>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d114      	bne.n	800088e <HAL_UARTEx_RxEventCallback+0x3e>
    {
    	rx_buffer[0] = Size;
 8000864:	887b      	ldrh	r3, [r7, #2]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <HAL_UARTEx_RxEventCallback+0x4c>)
 800086a:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 800086c:	2104      	movs	r1, #4
 800086e:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <HAL_UARTEx_RxEventCallback+0x50>)
 8000870:	f001 faa7 	bl	8001dc2 <HAL_GPIO_TogglePin>
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer,BUF_SIZE);
 8000874:	2281      	movs	r2, #129	@ 0x81
 8000876:	4909      	ldr	r1, [pc, #36]	@ (800089c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000878:	4807      	ldr	r0, [pc, #28]	@ (8000898 <HAL_UARTEx_RxEventCallback+0x48>)
 800087a:	f002 f94c 	bl	8002b16 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <HAL_UARTEx_RxEventCallback+0x54>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <HAL_UARTEx_RxEventCallback+0x54>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f022 0208 	bic.w	r2, r2, #8
 800088c:	601a      	str	r2, [r3, #0]
    }
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000e8 	.word	0x200000e8
 800089c:	200001d8 	.word	0x200001d8
 80008a0:	40020000 	.word	0x40020000
 80008a4:	20000178 	.word	0x20000178

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 faf6 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f820 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f7ff feaa 	bl	800060c <MX_GPIO_Init>
  MX_DMA_Init();
 80008b8:	f7ff fe88 	bl	80005cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008bc:	f000 f9b2 	bl	8000c24 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008c0:	f7ff ff18 	bl	80006f4 <MX_I2C1_Init>
  MX_CRC_Init();
 80008c4:	f7ff fe4c 	bl	8000560 <MX_CRC_Init>
  MX_USART6_UART_Init();
 80008c8:	f000 f9d6 	bl	8000c78 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,rx_buffer,BUF_SIZE);
 80008cc:	2281      	movs	r2, #129	@ 0x81
 80008ce:	4906      	ldr	r1, [pc, #24]	@ (80008e8 <main+0x40>)
 80008d0:	4806      	ldr	r0, [pc, #24]	@ (80008ec <main+0x44>)
 80008d2:	f002 f920 	bl	8002b16 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 80008d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008da:	f000 fb51 	bl	8000f80 <HAL_Delay>
//	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
//	  if(AT24CXX_WriteBuff[0] != 0){AT24CXX_WriteBuff[0] = 0;}
	  printf("ce shi");
 80008de:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <main+0x48>)
 80008e0:	f003 fb1e 	bl	8003f20 <iprintf>
	  HAL_Delay(1000);
 80008e4:	bf00      	nop
 80008e6:	e7f6      	b.n	80008d6 <main+0x2e>
 80008e8:	200001d8 	.word	0x200001d8
 80008ec:	200000e8 	.word	0x200000e8
 80008f0:	08004c14 	.word	0x08004c14

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	@ 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	@ 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f003 fbf6 	bl	80040f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	4a27      	ldr	r2, [pc, #156]	@ (80009c0 <SystemClock_Config+0xcc>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	@ 0x40
 8000928:	4b25      	ldr	r3, [pc, #148]	@ (80009c0 <SystemClock_Config+0xcc>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a21      	ldr	r2, [pc, #132]	@ (80009c4 <SystemClock_Config+0xd0>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <SystemClock_Config+0xd0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2310      	movs	r3, #16
 800095a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	2302      	movs	r3, #2
 800095e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000960:	2300      	movs	r3, #0
 8000962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000964:	2308      	movs	r3, #8
 8000966:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000968:	23a8      	movs	r3, #168	@ 0xa8
 800096a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fb99 	bl	80020b0 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000984:	f000 f820 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000994:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2105      	movs	r1, #5
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fdfa 	bl	80025a0 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009b2:	f000 f809 	bl	80009c8 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	@ 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f000 fa61 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WK_UP_Pin);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f001 f9b6 	bl	8001df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <USART1_IRQHandler+0x10>)
 8000a96:	f002 f89b 	bl	8002bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000e8 	.word	0x200000e8

08000aa4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */
  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <DMA2_Stream5_IRQHandler+0x10>)
 8000aaa:	f000 fd53 	bl	8001554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000178 	.word	0x20000178

08000ab8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e00a      	b.n	8000ae0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aca:	f3af 8000 	nop.w
 8000ace:	4601      	mov	r1, r0
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	b2ca      	uxtb	r2, r1
 8000ad8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	dbf0      	blt.n	8000aca <_read+0x12>
  }

  return len;
 8000ae8:	687b      	ldr	r3, [r7, #4]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fe67 	bl	80007e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf1      	blt.n	8000b04 <_write+0x12>
  }
  return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_close>:

int _close(int file)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b52:	605a      	str	r2, [r3, #4]
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f003 fae4 	bl	8004190 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20020000 	.word	0x20020000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	200000e4 	.word	0x200000e4
 8000bfc:	200003b0 	.word	0x200003b0

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <MX_USART1_UART_Init+0x50>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	f001 fe80 	bl	8002960 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c66:	f7ff feaf 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200000e8 	.word	0x200000e8
 8000c74:	40011000 	.word	0x40011000

08000c78 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_USART6_UART_Init+0x4c>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	@ (8000cc8 <MX_USART6_UART_Init+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <MX_USART6_UART_Init+0x4c>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_USART6_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_USART6_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <MX_USART6_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_USART6_UART_Init+0x4c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <MX_USART6_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_USART6_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <MX_USART6_UART_Init+0x4c>)
 8000cb0:	f001 fe56 	bl	8002960 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000cba:	f7ff fe85 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000130 	.word	0x20000130
 8000cc8:	40011400 	.word	0x40011400

08000ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	@ 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a50      	ldr	r2, [pc, #320]	@ (8000e2c <HAL_UART_MspInit+0x160>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d168      	bne.n	8000dc0 <HAL_UART_MspInit+0xf4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */
  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	4a4e      	ldr	r2, [pc, #312]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	4b48      	ldr	r3, [pc, #288]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a47      	ldr	r2, [pc, #284]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b45      	ldr	r3, [pc, #276]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	483c      	ldr	r0, [pc, #240]	@ (8000e34 <HAL_UART_MspInit+0x168>)
 8000d44:	f000 fe70 	bl	8001a28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8000d48:	4b3b      	ldr	r3, [pc, #236]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8000e3c <HAL_UART_MspInit+0x170>)
 8000d4c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d54:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d56:	4b38      	ldr	r3, [pc, #224]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5c:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d62:	4b35      	ldr	r3, [pc, #212]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d68:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6a:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d70:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d76:	4b30      	ldr	r3, [pc, #192]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d82:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d84:	4b2c      	ldr	r3, [pc, #176]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d8a:	482b      	ldr	r0, [pc, #172]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d8c:	f000 fa4a 	bl	8001224 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d96:	f7ff fe17 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a26      	ldr	r2, [pc, #152]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000da0:	4a25      	ldr	r2, [pc, #148]	@ (8000e38 <HAL_UART_MspInit+0x16c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2025      	movs	r0, #37	@ 0x25
 8000dac:	f000 f9e7 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000db0:	2025      	movs	r0, #37	@ 0x25
 8000db2:	f000 fa00 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 8000db6:	2104      	movs	r1, #4
 8000db8:	481e      	ldr	r0, [pc, #120]	@ (8000e34 <HAL_UART_MspInit+0x168>)
 8000dba:	f001 f802 	bl	8001dc2 <HAL_GPIO_TogglePin>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000dbe:	e030      	b.n	8000e22 <HAL_UART_MspInit+0x156>
  else if(uartHandle->Instance==USART6)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e40 <HAL_UART_MspInit+0x174>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12b      	bne.n	8000e22 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	4a17      	ldr	r2, [pc, #92]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a10      	ldr	r2, [pc, #64]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_UART_MspInit+0x164>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e02:	23c0      	movs	r3, #192	@ 0xc0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e12:	2308      	movs	r3, #8
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <HAL_UART_MspInit+0x178>)
 8000e1e:	f000 fe03 	bl	8001a28 <HAL_GPIO_Init>
}
 8000e22:	bf00      	nop
 8000e24:	3730      	adds	r7, #48	@ 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	20000178 	.word	0x20000178
 8000e3c:	40026488 	.word	0x40026488
 8000e40:	40011400 	.word	0x40011400
 8000e44:	40020800 	.word	0x40020800

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e4c:	f7ff fed8 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	@ (8000e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f003 f991 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fd15 	bl	80008a8 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e8c:	08004c80 	.word	0x08004c80
  ldr r2, =_sbss
 8000e90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e94:	200003ac 	.word	0x200003ac

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	@ (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f94f 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fd80 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f967 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f92f 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	2000025c 	.word	0x2000025c

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	2000025c 	.word	0x2000025c

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	@ (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	@ (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	@ (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	@ 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff29 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff3e 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff31 	bl	800102c <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e00e      	b.n	800121a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	795b      	ldrb	r3, [r3, #5]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d105      	bne.n	8001212 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff f9bb 	bl	8000588 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff fe9a 	bl	8000f68 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e099      	b.n	8001374 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001260:	e00f      	b.n	8001282 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001262:	f7ff fe81 	bl	8000f68 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b05      	cmp	r3, #5
 800126e:	d908      	bls.n	8001282 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2220      	movs	r2, #32
 8001274:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2203      	movs	r2, #3
 800127a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e078      	b.n	8001374 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e8      	bne.n	8001262 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	4b38      	ldr	r3, [pc, #224]	@ (800137c <HAL_DMA_Init+0x158>)
 800129c:	4013      	ands	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d107      	bne.n	80012ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	4313      	orrs	r3, r2
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f023 0307 	bic.w	r3, r3, #7
 8001302:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4313      	orrs	r3, r2
 800130c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	2b04      	cmp	r3, #4
 8001314:	d117      	bne.n	8001346 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4313      	orrs	r3, r2
 800131e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00e      	beq.n	8001346 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fb01 	bl	8001930 <DMA_CheckFifoParam>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2240      	movs	r2, #64	@ 0x40
 8001338:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001342:	2301      	movs	r3, #1
 8001344:	e016      	b.n	8001374 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fab8 	bl	80018c4 <DMA_CalcBaseAndBitshift>
 8001354:	4603      	mov	r3, r0
 8001356:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800135c:	223f      	movs	r2, #63	@ 0x3f
 800135e:	409a      	lsls	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	f010803f 	.word	0xf010803f

08001380 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001396:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_DMA_Start_IT+0x26>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e040      	b.n	8001428 <HAL_DMA_Start_IT+0xa8>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d12f      	bne.n	800141a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2202      	movs	r2, #2
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 fa4a 	bl	8001868 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d8:	223f      	movs	r2, #63	@ 0x3f
 80013da:	409a      	lsls	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0216 	orr.w	r2, r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d007      	beq.n	8001408 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0208 	orr.w	r2, r2, #8
 8001406:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e005      	b.n	8001426 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001422:	2302      	movs	r3, #2
 8001424:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001426:	7dfb      	ldrb	r3, [r7, #23]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800143e:	f7ff fd93 	bl	8000f68 <HAL_GetTick>
 8001442:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d008      	beq.n	8001462 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2280      	movs	r2, #128	@ 0x80
 8001454:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e052      	b.n	8001508 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0216 	bic.w	r2, r2, #22
 8001470:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	695a      	ldr	r2, [r3, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001480:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <HAL_DMA_Abort+0x62>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0208 	bic.w	r2, r2, #8
 80014a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0201 	bic.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b2:	e013      	b.n	80014dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014b4:	f7ff fd58 	bl	8000f68 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d90c      	bls.n	80014dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2220      	movs	r2, #32
 80014c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2203      	movs	r2, #3
 80014cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e015      	b.n	8001508 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1e4      	bne.n	80014b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ee:	223f      	movs	r2, #63	@ 0x3f
 80014f0:	409a      	lsls	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d004      	beq.n	800152e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00c      	b.n	8001548 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2205      	movs	r2, #5
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001560:	4b8e      	ldr	r3, [pc, #568]	@ (800179c <HAL_DMA_IRQHandler+0x248>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a8e      	ldr	r2, [pc, #568]	@ (80017a0 <HAL_DMA_IRQHandler+0x24c>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0a9b      	lsrs	r3, r3, #10
 800156c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001572:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800157e:	2208      	movs	r2, #8
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01a      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0204 	bic.w	r2, r2, #4
 80015a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ac:	2208      	movs	r2, #8
 80015ae:	409a      	lsls	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b8:	f043 0201 	orr.w	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c4:	2201      	movs	r2, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d012      	beq.n	80015f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e2:	2201      	movs	r2, #1
 80015e4:	409a      	lsls	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ee:	f043 0202 	orr.w	r2, r3, #2
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015fa:	2204      	movs	r2, #4
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d012      	beq.n	800162c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00b      	beq.n	800162c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001618:	2204      	movs	r2, #4
 800161a:	409a      	lsls	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001624:	f043 0204 	orr.w	r2, r3, #4
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001630:	2210      	movs	r2, #16
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d043      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d03c      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164e:	2210      	movs	r2, #16
 8001650:	409a      	lsls	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d018      	beq.n	8001696 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d108      	bne.n	8001684 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d024      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
 8001682:	e01f      	b.n	80016c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01b      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	4798      	blx	r3
 8001694:	e016      	b.n	80016c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0208 	bic.w	r2, r2, #8
 80016b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c8:	2220      	movs	r2, #32
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 808f 	beq.w	80017f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8087 	beq.w	80017f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ea:	2220      	movs	r2, #32
 80016ec:	409a      	lsls	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d136      	bne.n	800176c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0216 	bic.w	r2, r2, #22
 800170c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800171c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <HAL_DMA_IRQHandler+0x1da>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0208 	bic.w	r2, r2, #8
 800173c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001742:	223f      	movs	r2, #63	@ 0x3f
 8001744:	409a      	lsls	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800175e:	2b00      	cmp	r3, #0
 8001760:	d07e      	beq.n	8001860 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
        }
        return;
 800176a:	e079      	b.n	8001860 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d01d      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10d      	bne.n	80017a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178c:	2b00      	cmp	r3, #0
 800178e:	d031      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
 8001798:	e02c      	b.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
 800179a:	bf00      	nop
 800179c:	20000000 	.word	0x20000000
 80017a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d023      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
 80017b4:	e01e      	b.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10f      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d032      	beq.n	8001862 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d022      	beq.n	800184e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2205      	movs	r2, #5
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	d307      	bcc.n	800183c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f2      	bne.n	8001820 <HAL_DMA_IRQHandler+0x2cc>
 800183a:	e000      	b.n	800183e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800183c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
 800185e:	e000      	b.n	8001862 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001860:	bf00      	nop
    }
  }
}
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001884:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b40      	cmp	r3, #64	@ 0x40
 8001894:	d108      	bne.n	80018a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018a6:	e007      	b.n	80018b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	60da      	str	r2, [r3, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3b10      	subs	r3, #16
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <DMA_CalcBaseAndBitshift+0x64>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018de:	4a13      	ldr	r2, [pc, #76]	@ (800192c <DMA_CalcBaseAndBitshift+0x68>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d909      	bls.n	8001906 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	1d1a      	adds	r2, r3, #4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	659a      	str	r2, [r3, #88]	@ 0x58
 8001904:	e007      	b.n	8001916 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	aaaaaaab 	.word	0xaaaaaaab
 800192c:	08004c34 	.word	0x08004c34

08001930 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d11f      	bne.n	800198a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d856      	bhi.n	80019fe <DMA_CheckFifoParam+0xce>
 8001950:	a201      	add	r2, pc, #4	@ (adr r2, 8001958 <DMA_CheckFifoParam+0x28>)
 8001952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001956:	bf00      	nop
 8001958:	08001969 	.word	0x08001969
 800195c:	0800197b 	.word	0x0800197b
 8001960:	08001969 	.word	0x08001969
 8001964:	080019ff 	.word	0x080019ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d046      	beq.n	8001a02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001978:	e043      	b.n	8001a02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001982:	d140      	bne.n	8001a06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001988:	e03d      	b.n	8001a06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001992:	d121      	bne.n	80019d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d837      	bhi.n	8001a0a <DMA_CheckFifoParam+0xda>
 800199a:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <DMA_CheckFifoParam+0x70>)
 800199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	080019b7 	.word	0x080019b7
 80019a8:	080019b1 	.word	0x080019b1
 80019ac:	080019c9 	.word	0x080019c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      break;
 80019b4:	e030      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d025      	beq.n	8001a0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c6:	e022      	b.n	8001a0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019d0:	d11f      	bne.n	8001a12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019d6:	e01c      	b.n	8001a12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d903      	bls.n	80019e6 <DMA_CheckFifoParam+0xb6>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d003      	beq.n	80019ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019e4:	e018      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
      break;
 80019ea:	e015      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00e      	beq.n	8001a16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      break;
 80019fc:	e00b      	b.n	8001a16 <DMA_CheckFifoParam+0xe6>
      break;
 80019fe:	bf00      	nop
 8001a00:	e00a      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a02:	bf00      	nop
 8001a04:	e008      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a06:	bf00      	nop
 8001a08:	e006      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a0a:	bf00      	nop
 8001a0c:	e004      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a0e:	bf00      	nop
 8001a10:	e002      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
    }
  } 
  
  return status; 
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e16b      	b.n	8001d1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 815a 	bne.w	8001d16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80b4 	beq.w	8001d16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b60      	ldr	r3, [pc, #384]	@ (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a5b      	ldr	r2, [pc, #364]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	@ (8001d3c <HAL_GPIO_Init+0x314>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02b      	beq.n	8001c4e <HAL_GPIO_Init+0x226>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	@ (8001d40 <HAL_GPIO_Init+0x318>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x222>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a50      	ldr	r2, [pc, #320]	@ (8001d44 <HAL_GPIO_Init+0x31c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x21e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	@ (8001d48 <HAL_GPIO_Init+0x320>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x21a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x216>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4d      	ldr	r2, [pc, #308]	@ (8001d50 <HAL_GPIO_Init+0x328>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x212>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4c      	ldr	r2, [pc, #304]	@ (8001d54 <HAL_GPIO_Init+0x32c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4b      	ldr	r2, [pc, #300]	@ (8001d58 <HAL_GPIO_Init+0x330>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x20a>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00e      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c32:	2308      	movs	r3, #8
 8001c34:	e00c      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c36:	2306      	movs	r3, #6
 8001c38:	e00a      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	e008      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c42:	2303      	movs	r3, #3
 8001c44:	e004      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x228>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	f002 0203 	and.w	r2, r2, #3
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	4093      	lsls	r3, r2
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c60:	4935      	ldr	r1, [pc, #212]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	3302      	adds	r3, #2
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c92:	4a32      	ldr	r2, [pc, #200]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c98:	4b30      	ldr	r3, [pc, #192]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cbc:	4a27      	ldr	r2, [pc, #156]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc2:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d10:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <HAL_GPIO_Init+0x334>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	f67f ae90 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40020400 	.word	0x40020400
 8001d44:	40020800 	.word	0x40020800
 8001d48:	40020c00 	.word	0x40020c00
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40021400 	.word	0x40021400
 8001d54:	40021800 	.word	0x40021800
 8001d58:	40021c00 	.word	0x40021c00
 8001d5c:	40013c00 	.word	0x40013c00

08001d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	041a      	lsls	r2, r3, #16
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	400b      	ands	r3, r1
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e0e:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fcf4 	bl	8000804 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40013c00 	.word	0x40013c00

08001e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e12b      	b.n	8002092 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fc7e 	bl	8000750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2224      	movs	r2, #36	@ 0x24
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e8c:	f000 fd40 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8001e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4a81      	ldr	r2, [pc, #516]	@ (800209c <HAL_I2C_Init+0x274>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d807      	bhi.n	8001eac <HAL_I2C_Init+0x84>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a80      	ldr	r2, [pc, #512]	@ (80020a0 <HAL_I2C_Init+0x278>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	bf94      	ite	ls
 8001ea4:	2301      	movls	r3, #1
 8001ea6:	2300      	movhi	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e006      	b.n	8001eba <HAL_I2C_Init+0x92>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a7d      	ldr	r2, [pc, #500]	@ (80020a4 <HAL_I2C_Init+0x27c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	bf94      	ite	ls
 8001eb4:	2301      	movls	r3, #1
 8001eb6:	2300      	movhi	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0e7      	b.n	8002092 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4a78      	ldr	r2, [pc, #480]	@ (80020a8 <HAL_I2C_Init+0x280>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0c9b      	lsrs	r3, r3, #18
 8001ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800209c <HAL_I2C_Init+0x274>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d802      	bhi.n	8001efc <HAL_I2C_Init+0xd4>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	e009      	b.n	8001f10 <HAL_I2C_Init+0xe8>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	4a69      	ldr	r2, [pc, #420]	@ (80020ac <HAL_I2C_Init+0x284>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	099b      	lsrs	r3, r3, #6
 8001f0e:	3301      	adds	r3, #1
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	495c      	ldr	r1, [pc, #368]	@ (800209c <HAL_I2C_Init+0x274>)
 8001f2c:	428b      	cmp	r3, r1
 8001f2e:	d819      	bhi.n	8001f64 <HAL_I2C_Init+0x13c>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e59      	subs	r1, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f3e:	1c59      	adds	r1, r3, #1
 8001f40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f44:	400b      	ands	r3, r1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <HAL_I2C_Init+0x138>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1e59      	subs	r1, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5e:	e051      	b.n	8002004 <HAL_I2C_Init+0x1dc>
 8001f60:	2304      	movs	r3, #4
 8001f62:	e04f      	b.n	8002004 <HAL_I2C_Init+0x1dc>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d111      	bne.n	8001f90 <HAL_I2C_Init+0x168>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e58      	subs	r0, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	440b      	add	r3, r1
 8001f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e012      	b.n	8001fb6 <HAL_I2C_Init+0x18e>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1e58      	subs	r0, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	0099      	lsls	r1, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Init+0x196>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e022      	b.n	8002004 <HAL_I2C_Init+0x1dc>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_I2C_Init+0x1bc>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1e58      	subs	r0, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	440b      	add	r3, r1
 8001fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fe2:	e00f      	b.n	8002004 <HAL_I2C_Init+0x1dc>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1e58      	subs	r0, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	0099      	lsls	r1, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	6809      	ldr	r1, [r1, #0]
 8002008:	4313      	orrs	r3, r2
 800200a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002032:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6911      	ldr	r1, [r2, #16]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68d2      	ldr	r2, [r2, #12]
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	430b      	orrs	r3, r1
 8002046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	000186a0 	.word	0x000186a0
 80020a0:	001e847f 	.word	0x001e847f
 80020a4:	003d08ff 	.word	0x003d08ff
 80020a8:	431bde83 	.word	0x431bde83
 80020ac:	10624dd3 	.word	0x10624dd3

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e267      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d075      	beq.n	80021ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020ce:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d00c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020da:	4b85      	ldr	r3, [pc, #532]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d112      	bne.n	800210c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e6:	4b82      	ldr	r3, [pc, #520]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020f2:	d10b      	bne.n	800210c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	4b7e      	ldr	r3, [pc, #504]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d05b      	beq.n	80021b8 <HAL_RCC_OscConfig+0x108>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d157      	bne.n	80021b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e242      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002114:	d106      	bne.n	8002124 <HAL_RCC_OscConfig+0x74>
 8002116:	4b76      	ldr	r3, [pc, #472]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a75      	ldr	r2, [pc, #468]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e01d      	b.n	8002160 <HAL_RCC_OscConfig+0xb0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x98>
 800212e:	4b70      	ldr	r3, [pc, #448]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6f      	ldr	r2, [pc, #444]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b6d      	ldr	r3, [pc, #436]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6c      	ldr	r2, [pc, #432]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0xb0>
 8002148:	4b69      	ldr	r3, [pc, #420]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a68      	ldr	r2, [pc, #416]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b66      	ldr	r3, [pc, #408]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800215e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe fefe 	bl	8000f68 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe fefa 	bl	8000f68 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	@ 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e207      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b5b      	ldr	r3, [pc, #364]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0xc0>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe feea 	bl	8000f68 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7fe fee6 	bl	8000f68 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	@ 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1f3      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	4b51      	ldr	r3, [pc, #324]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0xe8>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d063      	beq.n	800228e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021c6:	4b4a      	ldr	r3, [pc, #296]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d2:	4b47      	ldr	r3, [pc, #284]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d11c      	bne.n	8002218 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021de:	4b44      	ldr	r3, [pc, #272]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d116      	bne.n	8002218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_RCC_OscConfig+0x152>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e1c7      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b3b      	ldr	r3, [pc, #236]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4937      	ldr	r1, [pc, #220]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	e03a      	b.n	800228e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002220:	4b34      	ldr	r3, [pc, #208]	@ (80022f4 <HAL_RCC_OscConfig+0x244>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7fe fe9f 	bl	8000f68 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222e:	f7fe fe9b 	bl	8000f68 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e1a8      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b28      	ldr	r3, [pc, #160]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4925      	ldr	r1, [pc, #148]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002262:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <HAL_RCC_OscConfig+0x244>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fe7e 	bl	8000f68 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7fe fe7a 	bl	8000f68 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e187      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d036      	beq.n	8002308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d016      	beq.n	80022d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_RCC_OscConfig+0x248>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7fe fe5e 	bl	8000f68 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7fe fe5a 	bl	8000f68 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e167      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <HAL_RCC_OscConfig+0x240>)
 80022c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x200>
 80022ce:	e01b      	b.n	8002308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_RCC_OscConfig+0x248>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d6:	f7fe fe47 	bl	8000f68 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	e00e      	b.n	80022fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022de:	f7fe fe43 	bl	8000f68 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d907      	bls.n	80022fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e150      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
 80022f0:	40023800 	.word	0x40023800
 80022f4:	42470000 	.word	0x42470000
 80022f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	4b88      	ldr	r3, [pc, #544]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ea      	bne.n	80022de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8097 	beq.w	8002444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231a:	4b81      	ldr	r3, [pc, #516]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	4b7d      	ldr	r3, [pc, #500]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	4a7c      	ldr	r2, [pc, #496]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002334:	6413      	str	r3, [r2, #64]	@ 0x40
 8002336:	4b7a      	ldr	r3, [pc, #488]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002342:	2301      	movs	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4b77      	ldr	r3, [pc, #476]	@ (8002524 <HAL_RCC_OscConfig+0x474>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d118      	bne.n	8002384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002352:	4b74      	ldr	r3, [pc, #464]	@ (8002524 <HAL_RCC_OscConfig+0x474>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a73      	ldr	r2, [pc, #460]	@ (8002524 <HAL_RCC_OscConfig+0x474>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7fe fe03 	bl	8000f68 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe fdff 	bl	8000f68 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e10c      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	4b6a      	ldr	r3, [pc, #424]	@ (8002524 <HAL_RCC_OscConfig+0x474>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x2ea>
 800238c:	4b64      	ldr	r3, [pc, #400]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	4a63      	ldr	r2, [pc, #396]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6713      	str	r3, [r2, #112]	@ 0x70
 8002398:	e01c      	b.n	80023d4 <HAL_RCC_OscConfig+0x324>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x30c>
 80023a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0x324>
 80023bc:	4b58      	ldr	r3, [pc, #352]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	4a57      	ldr	r2, [pc, #348]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c8:	4b55      	ldr	r3, [pc, #340]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023cc:	4a54      	ldr	r2, [pc, #336]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023ce:	f023 0304 	bic.w	r3, r3, #4
 80023d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d015      	beq.n	8002408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe fdc4 	bl	8000f68 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7fe fdc0 	bl	8000f68 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0cb      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fa:	4b49      	ldr	r3, [pc, #292]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0ee      	beq.n	80023e4 <HAL_RCC_OscConfig+0x334>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe fdae 	bl	8000f68 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe fdaa 	bl	8000f68 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0b5      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002426:	4b3e      	ldr	r3, [pc, #248]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ee      	bne.n	8002410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d105      	bne.n	8002444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002438:	4b39      	ldr	r3, [pc, #228]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	4a38      	ldr	r2, [pc, #224]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 800243e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002442:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a1 	beq.w	8002590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800244e:	4b34      	ldr	r3, [pc, #208]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	d05c      	beq.n	8002514 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d141      	bne.n	80024e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_RCC_OscConfig+0x478>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fd7e 	bl	8000f68 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fd7a 	bl	8000f68 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e087      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	4b27      	ldr	r3, [pc, #156]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	3b01      	subs	r3, #1
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	491b      	ldr	r1, [pc, #108]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x478>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe fd53 	bl	8000f68 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe fd4f 	bl	8000f68 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e05c      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x416>
 80024e4:	e054      	b.n	8002590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <HAL_RCC_OscConfig+0x478>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fd3c 	bl	8000f68 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fd38 	bl	8000f68 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e045      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_RCC_OscConfig+0x470>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x444>
 8002512:	e03d      	b.n	8002590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e038      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
 8002520:	40023800 	.word	0x40023800
 8002524:	40007000 	.word	0x40007000
 8002528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x4ec>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d028      	beq.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d121      	bne.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d11a      	bne.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002564:	4293      	cmp	r3, r2
 8002566:	d111      	bne.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0cc      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b68      	ldr	r3, [pc, #416]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d90c      	bls.n	80025dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b65      	ldr	r3, [pc, #404]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0b8      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f4:	4b59      	ldr	r3, [pc, #356]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a58      	ldr	r2, [pc, #352]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800260c:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a52      	ldr	r2, [pc, #328]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b50      	ldr	r3, [pc, #320]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	494d      	ldr	r1, [pc, #308]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d044      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d119      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e07f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d003      	beq.n	800265e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265a:	2b03      	cmp	r3, #3
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	4b3f      	ldr	r3, [pc, #252]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e06f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e067      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b37      	ldr	r3, [pc, #220]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4934      	ldr	r1, [pc, #208]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002690:	f7fe fc6a 	bl	8000f68 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	e00a      	b.n	80026ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002698:	f7fe fc66 	bl	8000f68 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e04f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 020c 	and.w	r2, r3, #12
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1eb      	bne.n	8002698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c0:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d20c      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e032      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b19      	ldr	r3, [pc, #100]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4916      	ldr	r1, [pc, #88]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002712:	4b12      	ldr	r3, [pc, #72]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	490e      	ldr	r1, [pc, #56]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002726:	f000 f821 	bl	800276c <HAL_RCC_GetSysClockFreq>
 800272a:	4602      	mov	r2, r0
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	490a      	ldr	r1, [pc, #40]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	5ccb      	ldrb	r3, [r1, r3]
 800273a:	fa22 f303 	lsr.w	r3, r2, r3
 800273e:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002742:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fbca 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00
 800275c:	40023800 	.word	0x40023800
 8002760:	08004c1c 	.word	0x08004c1c
 8002764:	20000000 	.word	0x20000000
 8002768:	20000004 	.word	0x20000004

0800276c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002770:	b090      	sub	sp, #64	@ 0x40
 8002772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002784:	4b59      	ldr	r3, [pc, #356]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 030c 	and.w	r3, r3, #12
 800278c:	2b08      	cmp	r3, #8
 800278e:	d00d      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x40>
 8002790:	2b08      	cmp	r3, #8
 8002792:	f200 80a1 	bhi.w	80028d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x34>
 800279a:	2b04      	cmp	r3, #4
 800279c:	d003      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800279e:	e09b      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a0:	4b53      	ldr	r3, [pc, #332]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80027a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027a4:	e09b      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027a6:	4b53      	ldr	r3, [pc, #332]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80027a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027aa:	e098      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ac:	4b4f      	ldr	r3, [pc, #316]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x180>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b6:	4b4d      	ldr	r3, [pc, #308]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x180>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d028      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c2:	4b4a      	ldr	r3, [pc, #296]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x180>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	099b      	lsrs	r3, r3, #6
 80027c8:	2200      	movs	r2, #0
 80027ca:	623b      	str	r3, [r7, #32]
 80027cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027d4:	2100      	movs	r1, #0
 80027d6:	4b47      	ldr	r3, [pc, #284]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80027d8:	fb03 f201 	mul.w	r2, r3, r1
 80027dc:	2300      	movs	r3, #0
 80027de:	fb00 f303 	mul.w	r3, r0, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	4a43      	ldr	r2, [pc, #268]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80027e6:	fba0 1202 	umull	r1, r2, r0, r2
 80027ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027ec:	460a      	mov	r2, r1
 80027ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80027f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f2:	4413      	add	r3, r2
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f8:	2200      	movs	r2, #0
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	61fa      	str	r2, [r7, #28]
 80027fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002802:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002806:	f7fd fd33 	bl	8000270 <__aeabi_uldivmod>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4613      	mov	r3, r2
 8002810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002812:	e053      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002814:	4b35      	ldr	r3, [pc, #212]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	2200      	movs	r2, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	617a      	str	r2, [r7, #20]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002826:	f04f 0b00 	mov.w	fp, #0
 800282a:	4652      	mov	r2, sl
 800282c:	465b      	mov	r3, fp
 800282e:	f04f 0000 	mov.w	r0, #0
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	0159      	lsls	r1, r3, #5
 8002838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283c:	0150      	lsls	r0, r2, #5
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	ebb2 080a 	subs.w	r8, r2, sl
 8002846:	eb63 090b 	sbc.w	r9, r3, fp
 800284a:	f04f 0200 	mov.w	r2, #0
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002856:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800285a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800285e:	ebb2 0408 	subs.w	r4, r2, r8
 8002862:	eb63 0509 	sbc.w	r5, r3, r9
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	00eb      	lsls	r3, r5, #3
 8002870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002874:	00e2      	lsls	r2, r4, #3
 8002876:	4614      	mov	r4, r2
 8002878:	461d      	mov	r5, r3
 800287a:	eb14 030a 	adds.w	r3, r4, sl
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	eb45 030b 	adc.w	r3, r5, fp
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002892:	4629      	mov	r1, r5
 8002894:	028b      	lsls	r3, r1, #10
 8002896:	4621      	mov	r1, r4
 8002898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800289c:	4621      	mov	r1, r4
 800289e:	028a      	lsls	r2, r1, #10
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a6:	2200      	movs	r2, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	60fa      	str	r2, [r7, #12]
 80028ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b0:	f7fd fcde 	bl	8000270 <__aeabi_uldivmod>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4613      	mov	r3, r2
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x180>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	3301      	adds	r3, #1
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80028cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028d6:	e002      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80028da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3740      	adds	r7, #64	@ 0x40
 80028e4:	46bd      	mov	sp, r7
 80028e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	00f42400 	.word	0x00f42400
 80028f4:	017d7840 	.word	0x017d7840

080028f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028fc:	4b03      	ldr	r3, [pc, #12]	@ (800290c <HAL_RCC_GetHCLKFreq+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002914:	f7ff fff0 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0a9b      	lsrs	r3, r3, #10
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	@ (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	08004c2c 	.word	0x08004c2c

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800293c:	f7ff ffdc 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	0b5b      	lsrs	r3, r3, #13
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	@ (800295c <HAL_RCC_GetPCLK2Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	08004c2c 	.word	0x08004c2c

08002960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e042      	b.n	80029f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe f9a0 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	@ 0x24
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 ff85 	bl	80038b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	@ 0x28
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d175      	bne.n	8002b0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Transmit+0x2c>
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e06e      	b.n	8002b0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2221      	movs	r2, #33	@ 0x21
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a3e:	f7fe fa93 	bl	8000f68 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a58:	d108      	bne.n	8002a6c <HAL_UART_Transmit+0x6c>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e003      	b.n	8002a74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a74:	e02e      	b.n	8002ad4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2180      	movs	r1, #128	@ 0x80
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fc5d 	bl	8003340 <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e03a      	b.n	8002b0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	e007      	b.n	8002ac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1cb      	bne.n	8002a76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2140      	movs	r1, #64	@ 0x40
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fc29 	bl	8003340 <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e006      	b.n	8002b0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b08c      	sub	sp, #48	@ 0x30
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	4613      	mov	r3, r2
 8002b22:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d14a      	bne.n	8002bc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e043      	b.n	8002bc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fc4e 	bl	80033f4 <UART_Start_Receive_DMA>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d12c      	bne.n	8002bc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d125      	bne.n	8002bba <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	e853 3f00 	ldrex	r3, [r3]
 8002b92:	617b      	str	r3, [r7, #20]
   return(result);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f043 0310 	orr.w	r3, r3, #16
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ba4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	6a39      	ldr	r1, [r7, #32]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e5      	bne.n	8002b84 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002bb8:	e002      	b.n	8002bc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002bc4:	e000      	b.n	8002bc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
  }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3730      	adds	r7, #48	@ 0x30
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b0ba      	sub	sp, #232	@ 0xe8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_UART_IRQHandler+0x66>
 8002c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fd81 	bl	8003736 <UART_Receive_IT>
      return;
 8002c34:	e25b      	b.n	80030ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80de 	beq.w	8002dfc <HAL_UART_IRQHandler+0x22c>
 8002c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80d1 	beq.w	8002dfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_UART_IRQHandler+0xae>
 8002c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_UART_IRQHandler+0xd2>
 8002c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f043 0202 	orr.w	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <HAL_UART_IRQHandler+0xf6>
 8002cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	f043 0204 	orr.w	r2, r3, #4
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d011      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x126>
 8002cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f043 0208 	orr.w	r2, r3, #8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 81f2 	beq.w	80030e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_UART_IRQHandler+0x14e>
 8002d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fd0c 	bl	8003736 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <HAL_UART_IRQHandler+0x17a>
 8002d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d04f      	beq.n	8002dea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fc14 	bl	8003578 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5a:	2b40      	cmp	r3, #64	@ 0x40
 8002d5c:	d141      	bne.n	8002de2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3314      	adds	r3, #20
 8002d64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3314      	adds	r3, #20
 8002d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1d9      	bne.n	8002d5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d013      	beq.n	8002dda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db6:	4a7e      	ldr	r2, [pc, #504]	@ (8002fb0 <HAL_UART_IRQHandler+0x3e0>)
 8002db8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fba6 	bl	8001510 <HAL_DMA_Abort_IT>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	e00e      	b.n	8002df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9a8 	bl	8003130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de0:	e00a      	b.n	8002df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9a4 	bl	8003130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de8:	e006      	b.n	8002df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9a0 	bl	8003130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002df6:	e175      	b.n	80030e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df8:	bf00      	nop
    return;
 8002dfa:	e173      	b.n	80030e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	f040 814f 	bne.w	80030a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8148 	beq.w	80030a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8141 	beq.w	80030a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e42:	2b40      	cmp	r3, #64	@ 0x40
 8002e44:	f040 80b6 	bne.w	8002fb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8145 	beq.w	80030e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e66:	429a      	cmp	r2, r3
 8002e68:	f080 813e 	bcs.w	80030e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e7e:	f000 8088 	beq.w	8002f92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002eae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002eb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1d9      	bne.n	8002e82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3314      	adds	r3, #20
 8002ed4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ef2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e1      	bne.n	8002ece <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3314      	adds	r3, #20
 8002f10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f14:	e853 3f00 	ldrex	r3, [r3]
 8002f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e3      	bne.n	8002f0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	330c      	adds	r3, #12
 8002f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f5a:	e853 3f00 	ldrex	r3, [r3]
 8002f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f62:	f023 0310 	bic.w	r3, r3, #16
 8002f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f7c:	e841 2300 	strex	r3, r2, [r1]
 8002f80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e3      	bne.n	8002f50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fa4f 	bl	8001430 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fd fc51 	bl	8000850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fae:	e09b      	b.n	80030e8 <HAL_UART_IRQHandler+0x518>
 8002fb0:	0800363f 	.word	0x0800363f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 808e 	beq.w	80030ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8089 	beq.w	80030ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ffe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003000:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800300c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e3      	bne.n	8002fda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3314      	adds	r3, #20
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	e853 3f00 	ldrex	r3, [r3]
 8003020:	623b      	str	r3, [r7, #32]
   return(result);
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3314      	adds	r3, #20
 8003032:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003036:	633a      	str	r2, [r7, #48]	@ 0x30
 8003038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800303c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e3      	bne.n	8003012 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	e853 3f00 	ldrex	r3, [r3]
 8003066:	60fb      	str	r3, [r7, #12]
   return(result);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0310 	bic.w	r3, r3, #16
 800306e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800307c:	61fa      	str	r2, [r7, #28]
 800307e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003080:	69b9      	ldr	r1, [r7, #24]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	e841 2300 	strex	r3, r2, [r1]
 8003088:	617b      	str	r3, [r7, #20]
   return(result);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e3      	bne.n	8003058 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003096:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd fbd7 	bl	8000850 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030a2:	e023      	b.n	80030ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_UART_IRQHandler+0x4f4>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fad2 	bl	8003666 <UART_Transmit_IT>
    return;
 80030c2:	e014      	b.n	80030ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00e      	beq.n	80030ee <HAL_UART_IRQHandler+0x51e>
 80030d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fb12 	bl	8003706 <UART_EndTransmit_IT>
    return;
 80030e2:	e004      	b.n	80030ee <HAL_UART_IRQHandler+0x51e>
    return;
 80030e4:	bf00      	nop
 80030e6:	e002      	b.n	80030ee <HAL_UART_IRQHandler+0x51e>
      return;
 80030e8:	bf00      	nop
 80030ea:	e000      	b.n	80030ee <HAL_UART_IRQHandler+0x51e>
      return;
 80030ec:	bf00      	nop
  }
}
 80030ee:	37e8      	adds	r7, #232	@ 0xe8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b09c      	sub	sp, #112	@ 0x70
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003150:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d172      	bne.n	8003246 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003162:	2200      	movs	r2, #0
 8003164:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
 800316c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800317c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800317e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	330c      	adds	r3, #12
 8003184:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003186:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003188:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800318c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e5      	bne.n	8003166 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3314      	adds	r3, #20
 80031a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80031b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3314      	adds	r3, #20
 80031b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80031ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80031bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e5      	bne.n	800319a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	623b      	str	r3, [r7, #32]
   return(result);
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80031e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3314      	adds	r3, #20
 80031ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80031ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800320a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	60fb      	str	r3, [r7, #12]
   return(result);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f023 0310 	bic.w	r3, r3, #16
 8003228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800322a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003232:	61fa      	str	r2, [r7, #28]
 8003234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	69b9      	ldr	r1, [r7, #24]
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	617b      	str	r3, [r7, #20]
   return(result);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e5      	bne.n	8003212 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003248:	2200      	movs	r2, #0
 800324a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	2b01      	cmp	r3, #1
 8003252:	d106      	bne.n	8003262 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003256:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003258:	4619      	mov	r1, r3
 800325a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800325c:	f7fd faf8 	bl	8000850 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003260:	e002      	b.n	8003268 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003262:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003264:	f7ff ff50 	bl	8003108 <HAL_UART_RxCpltCallback>
}
 8003268:	bf00      	nop
 800326a:	3770      	adds	r7, #112	@ 0x70
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	2b01      	cmp	r3, #1
 800328a:	d108      	bne.n	800329e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	b29b      	uxth	r3, r3
 8003294:	4619      	mov	r1, r3
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f7fd fada 	bl	8000850 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800329c:	e002      	b.n	80032a4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff ff3c 	bl	800311c <HAL_UART_RxHalfCpltCallback>
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c8:	2b80      	cmp	r3, #128	@ 0x80
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b21      	cmp	r3, #33	@ 0x21
 80032de:	d108      	bne.n	80032f2 <UART_DMAError+0x46>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80032ec:	68b8      	ldr	r0, [r7, #8]
 80032ee:	f000 f91b 	bl	8003528 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b40      	cmp	r3, #64	@ 0x40
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b22      	cmp	r3, #34	@ 0x22
 8003312:	d108      	bne.n	8003326 <UART_DMAError+0x7a>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2200      	movs	r2, #0
 800331e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003320:	68b8      	ldr	r0, [r7, #8]
 8003322:	f000 f929 	bl	8003578 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	f043 0210 	orr.w	r2, r3, #16
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003332:	68b8      	ldr	r0, [r7, #8]
 8003334:	f7ff fefc 	bl	8003130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003350:	e03b      	b.n	80033ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d037      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335a:	f7fd fe05 	bl	8000f68 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	6a3a      	ldr	r2, [r7, #32]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <UART_WaitOnFlagUntilTimeout+0x30>
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e03a      	b.n	80033ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d023      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b80      	cmp	r3, #128	@ 0x80
 8003386:	d020      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b40      	cmp	r3, #64	@ 0x40
 800338c:	d01d      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b08      	cmp	r3, #8
 800339a:	d116      	bne.n	80033ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f8e0 	bl	8003578 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2208      	movs	r2, #8
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4013      	ands	r3, r2
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d0b4      	beq.n	8003352 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b098      	sub	sp, #96	@ 0x60
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2222      	movs	r2, #34	@ 0x22
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	4a3e      	ldr	r2, [pc, #248]	@ (800351c <UART_Start_Receive_DMA+0x128>)
 8003422:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003428:	4a3d      	ldr	r2, [pc, #244]	@ (8003520 <UART_Start_Receive_DMA+0x12c>)
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	4a3c      	ldr	r2, [pc, #240]	@ (8003524 <UART_Start_Receive_DMA+0x130>)
 8003432:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	2200      	movs	r2, #0
 800343a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800343c:	f107 0308 	add.w	r3, r7, #8
 8003440:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3304      	adds	r3, #4
 800344c:	4619      	mov	r1, r3
 800344e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	f7fd ff94 	bl	8001380 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d019      	beq.n	80034aa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003496:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003498:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800349c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80034a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e5      	bne.n	8003476 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3314      	adds	r3, #20
 80034b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3314      	adds	r3, #20
 80034c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034ca:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80034d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e5      	bne.n	80034aa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3314      	adds	r3, #20
 80034e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	617b      	str	r3, [r7, #20]
   return(result);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3314      	adds	r3, #20
 80034fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80034fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8003500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6a39      	ldr	r1, [r7, #32]
 8003504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	61fb      	str	r3, [r7, #28]
   return(result);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e5      	bne.n	80034de <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3760      	adds	r7, #96	@ 0x60
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	08003145 	.word	0x08003145
 8003520:	08003271 	.word	0x08003271
 8003524:	080032ad 	.word	0x080032ad

08003528 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	@ 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	61ba      	str	r2, [r7, #24]
 8003552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	6979      	ldr	r1, [r7, #20]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	613b      	str	r3, [r7, #16]
   return(result);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e5      	bne.n	8003530 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800356c:	bf00      	nop
 800356e:	3724      	adds	r7, #36	@ 0x24
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003578:	b480      	push	{r7}
 800357a:	b095      	sub	sp, #84	@ 0x54
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	330c      	adds	r3, #12
 800359e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80035a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3314      	adds	r3, #20
 80035ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3314      	adds	r3, #20
 80035d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e5      	bne.n	80035b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d119      	bne.n	8003624 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f023 0310 	bic.w	r3, r3, #16
 8003606:	647b      	str	r3, [r7, #68]	@ 0x44
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003610:	61ba      	str	r2, [r7, #24]
 8003612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6979      	ldr	r1, [r7, #20]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	613b      	str	r3, [r7, #16]
   return(result);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e5      	bne.n	80035f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003632:	bf00      	nop
 8003634:	3754      	adds	r7, #84	@ 0x54
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff fd69 	bl	8003130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b21      	cmp	r3, #33	@ 0x21
 8003678:	d13e      	bne.n	80036f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003682:	d114      	bne.n	80036ae <UART_Transmit_IT+0x48>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d110      	bne.n	80036ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	1c9a      	adds	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	621a      	str	r2, [r3, #32]
 80036ac:	e008      	b.n	80036c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6211      	str	r1, [r2, #32]
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4619      	mov	r1, r3
 80036ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10f      	bne.n	80036f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800371c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fce4 	bl	80030f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b08c      	sub	sp, #48	@ 0x30
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b22      	cmp	r3, #34	@ 0x22
 8003748:	f040 80ae 	bne.w	80038a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003754:	d117      	bne.n	8003786 <UART_Receive_IT+0x50>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d113      	bne.n	8003786 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003774:	b29a      	uxth	r2, r3
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377e:	1c9a      	adds	r2, r3, #2
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	@ 0x28
 8003784:	e026      	b.n	80037d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003798:	d007      	beq.n	80037aa <UART_Receive_IT+0x74>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10a      	bne.n	80037b8 <UART_Receive_IT+0x82>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e008      	b.n	80037ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29b      	uxth	r3, r3
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4619      	mov	r1, r3
 80037e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d15d      	bne.n	80038a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0220 	bic.w	r2, r2, #32
 80037f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	2b01      	cmp	r3, #1
 800382c:	d135      	bne.n	800389a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	613b      	str	r3, [r7, #16]
   return(result);
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f023 0310 	bic.w	r3, r3, #16
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003854:	623a      	str	r2, [r7, #32]
 8003856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	69f9      	ldr	r1, [r7, #28]
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	61bb      	str	r3, [r7, #24]
   return(result);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b10      	cmp	r3, #16
 8003874:	d10a      	bne.n	800388c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fc ffdc 	bl	8000850 <HAL_UARTEx_RxEventCallback>
 8003898:	e002      	b.n	80038a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fc34 	bl	8003108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e002      	b.n	80038aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3730      	adds	r7, #48	@ 0x30
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038b8:	b0c0      	sub	sp, #256	@ 0x100
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d0:	68d9      	ldr	r1, [r3, #12]
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	ea40 0301 	orr.w	r3, r0, r1
 80038dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800390c:	f021 010c 	bic.w	r1, r1, #12
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800391a:	430b      	orrs	r3, r1
 800391c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392e:	6999      	ldr	r1, [r3, #24]
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	ea40 0301 	orr.w	r3, r0, r1
 800393a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b8f      	ldr	r3, [pc, #572]	@ (8003b80 <UART_SetConfig+0x2cc>)
 8003944:	429a      	cmp	r2, r3
 8003946:	d005      	beq.n	8003954 <UART_SetConfig+0xa0>
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b8d      	ldr	r3, [pc, #564]	@ (8003b84 <UART_SetConfig+0x2d0>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d104      	bne.n	800395e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003954:	f7fe fff0 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8003958:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800395c:	e003      	b.n	8003966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800395e:	f7fe ffd7 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8003962:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003970:	f040 810c 	bne.w	8003b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800397e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003986:	4622      	mov	r2, r4
 8003988:	462b      	mov	r3, r5
 800398a:	1891      	adds	r1, r2, r2
 800398c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800398e:	415b      	adcs	r3, r3
 8003990:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003996:	4621      	mov	r1, r4
 8003998:	eb12 0801 	adds.w	r8, r2, r1
 800399c:	4629      	mov	r1, r5
 800399e:	eb43 0901 	adc.w	r9, r3, r1
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039b6:	4690      	mov	r8, r2
 80039b8:	4699      	mov	r9, r3
 80039ba:	4623      	mov	r3, r4
 80039bc:	eb18 0303 	adds.w	r3, r8, r3
 80039c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039c4:	462b      	mov	r3, r5
 80039c6:	eb49 0303 	adc.w	r3, r9, r3
 80039ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039e2:	460b      	mov	r3, r1
 80039e4:	18db      	adds	r3, r3, r3
 80039e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80039e8:	4613      	mov	r3, r2
 80039ea:	eb42 0303 	adc.w	r3, r2, r3
 80039ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80039f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80039f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80039f8:	f7fc fc3a 	bl	8000270 <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4b61      	ldr	r3, [pc, #388]	@ (8003b88 <UART_SetConfig+0x2d4>)
 8003a02:	fba3 2302 	umull	r2, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	011c      	lsls	r4, r3, #4
 8003a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	1891      	adds	r1, r2, r2
 8003a22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a24:	415b      	adcs	r3, r3
 8003a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a2c:	4641      	mov	r1, r8
 8003a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a32:	4649      	mov	r1, r9
 8003a34:	eb43 0b01 	adc.w	fp, r3, r1
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a4c:	4692      	mov	sl, r2
 8003a4e:	469b      	mov	fp, r3
 8003a50:	4643      	mov	r3, r8
 8003a52:	eb1a 0303 	adds.w	r3, sl, r3
 8003a56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	18db      	adds	r3, r3, r3
 8003a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a7e:	4613      	mov	r3, r2
 8003a80:	eb42 0303 	adc.w	r3, r2, r3
 8003a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a8e:	f7fc fbef 	bl	8000270 <__aeabi_uldivmod>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4611      	mov	r1, r2
 8003a98:	4b3b      	ldr	r3, [pc, #236]	@ (8003b88 <UART_SetConfig+0x2d4>)
 8003a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2264      	movs	r2, #100	@ 0x64
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	1acb      	subs	r3, r1, r3
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003aae:	4b36      	ldr	r3, [pc, #216]	@ (8003b88 <UART_SetConfig+0x2d4>)
 8003ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003abc:	441c      	add	r4, r3
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	1891      	adds	r1, r2, r2
 8003ad6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ad8:	415b      	adcs	r3, r3
 8003ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	1851      	adds	r1, r2, r1
 8003ae4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003af8:	4659      	mov	r1, fp
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4651      	mov	r1, sl
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b34:	460b      	mov	r3, r1
 8003b36:	18db      	adds	r3, r3, r3
 8003b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	eb42 0303 	adc.w	r3, r2, r3
 8003b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b4a:	f7fc fb91 	bl	8000270 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <UART_SetConfig+0x2d4>)
 8003b54:	fba3 1302 	umull	r1, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2164      	movs	r1, #100	@ 0x64
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	3332      	adds	r3, #50	@ 0x32
 8003b66:	4a08      	ldr	r2, [pc, #32]	@ (8003b88 <UART_SetConfig+0x2d4>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	f003 0207 	and.w	r2, r3, #7
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4422      	add	r2, r4
 8003b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b7c:	e106      	b.n	8003d8c <UART_SetConfig+0x4d8>
 8003b7e:	bf00      	nop
 8003b80:	40011000 	.word	0x40011000
 8003b84:	40011400 	.word	0x40011400
 8003b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b9e:	4642      	mov	r2, r8
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	1891      	adds	r1, r2, r2
 8003ba4:	6239      	str	r1, [r7, #32]
 8003ba6:	415b      	adcs	r3, r3
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bae:	4641      	mov	r1, r8
 8003bb0:	1854      	adds	r4, r2, r1
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	eb43 0501 	adc.w	r5, r3, r1
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	00eb      	lsls	r3, r5, #3
 8003bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc6:	00e2      	lsls	r2, r4, #3
 8003bc8:	4614      	mov	r4, r2
 8003bca:	461d      	mov	r5, r3
 8003bcc:	4643      	mov	r3, r8
 8003bce:	18e3      	adds	r3, r4, r3
 8003bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	eb45 0303 	adc.w	r3, r5, r3
 8003bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	008b      	lsls	r3, r1, #2
 8003bfe:	4621      	mov	r1, r4
 8003c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c04:	4621      	mov	r1, r4
 8003c06:	008a      	lsls	r2, r1, #2
 8003c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c0c:	f7fc fb30 	bl	8000270 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4b60      	ldr	r3, [pc, #384]	@ (8003d98 <UART_SetConfig+0x4e4>)
 8003c16:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	011c      	lsls	r4, r3, #4
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	61b9      	str	r1, [r7, #24]
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c40:	4641      	mov	r1, r8
 8003c42:	1851      	adds	r1, r2, r1
 8003c44:	6139      	str	r1, [r7, #16]
 8003c46:	4649      	mov	r1, r9
 8003c48:	414b      	adcs	r3, r1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c58:	4659      	mov	r1, fp
 8003c5a:	00cb      	lsls	r3, r1, #3
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c62:	4651      	mov	r1, sl
 8003c64:	00ca      	lsls	r2, r1, #3
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c74:	464b      	mov	r3, r9
 8003c76:	460a      	mov	r2, r1
 8003c78:	eb42 0303 	adc.w	r3, r2, r3
 8003c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c98:	4649      	mov	r1, r9
 8003c9a:	008b      	lsls	r3, r1, #2
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	008a      	lsls	r2, r1, #2
 8003ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003caa:	f7fc fae1 	bl	8000270 <__aeabi_uldivmod>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4b38      	ldr	r3, [pc, #224]	@ (8003d98 <UART_SetConfig+0x4e4>)
 8003cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2264      	movs	r2, #100	@ 0x64
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	1acb      	subs	r3, r1, r3
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	3332      	adds	r3, #50	@ 0x32
 8003cc8:	4a33      	ldr	r2, [pc, #204]	@ (8003d98 <UART_SetConfig+0x4e4>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cd4:	441c      	add	r4, r3
 8003cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cda:	2200      	movs	r2, #0
 8003cdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cde:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	1891      	adds	r1, r2, r2
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	415b      	adcs	r3, r3
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	1851      	adds	r1, r2, r1
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	414b      	adcs	r3, r1
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d0c:	4659      	mov	r1, fp
 8003d0e:	00cb      	lsls	r3, r1, #3
 8003d10:	4651      	mov	r1, sl
 8003d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d16:	4651      	mov	r1, sl
 8003d18:	00ca      	lsls	r2, r1, #3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4642      	mov	r2, r8
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d26:	464b      	mov	r3, r9
 8003d28:	460a      	mov	r2, r1
 8003d2a:	eb42 0303 	adc.w	r3, r2, r3
 8003d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d48:	4649      	mov	r1, r9
 8003d4a:	008b      	lsls	r3, r1, #2
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d52:	4641      	mov	r1, r8
 8003d54:	008a      	lsls	r2, r1, #2
 8003d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d5a:	f7fc fa89 	bl	8000270 <__aeabi_uldivmod>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <UART_SetConfig+0x4e4>)
 8003d64:	fba3 1302 	umull	r1, r3, r3, r2
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	2164      	movs	r1, #100	@ 0x64
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	3332      	adds	r3, #50	@ 0x32
 8003d76:	4a08      	ldr	r2, [pc, #32]	@ (8003d98 <UART_SetConfig+0x4e4>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4422      	add	r2, r4
 8003d8a:	609a      	str	r2, [r3, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d92:	46bd      	mov	sp, r7
 8003d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d98:	51eb851f 	.word	0x51eb851f

08003d9c <std>:
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	b510      	push	{r4, lr}
 8003da0:	4604      	mov	r4, r0
 8003da2:	e9c0 3300 	strd	r3, r3, [r0]
 8003da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003daa:	6083      	str	r3, [r0, #8]
 8003dac:	8181      	strh	r1, [r0, #12]
 8003dae:	6643      	str	r3, [r0, #100]	@ 0x64
 8003db0:	81c2      	strh	r2, [r0, #14]
 8003db2:	6183      	str	r3, [r0, #24]
 8003db4:	4619      	mov	r1, r3
 8003db6:	2208      	movs	r2, #8
 8003db8:	305c      	adds	r0, #92	@ 0x5c
 8003dba:	f000 f99b 	bl	80040f4 <memset>
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <std+0x58>)
 8003dc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <std+0x5c>)
 8003dc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <std+0x60>)
 8003dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003dca:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <std+0x64>)
 8003dcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <std+0x68>)
 8003dd0:	6224      	str	r4, [r4, #32]
 8003dd2:	429c      	cmp	r4, r3
 8003dd4:	d006      	beq.n	8003de4 <std+0x48>
 8003dd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dda:	4294      	cmp	r4, r2
 8003ddc:	d002      	beq.n	8003de4 <std+0x48>
 8003dde:	33d0      	adds	r3, #208	@ 0xd0
 8003de0:	429c      	cmp	r4, r3
 8003de2:	d105      	bne.n	8003df0 <std+0x54>
 8003de4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dec:	f000 b9fa 	b.w	80041e4 <__retarget_lock_init_recursive>
 8003df0:	bd10      	pop	{r4, pc}
 8003df2:	bf00      	nop
 8003df4:	08003f45 	.word	0x08003f45
 8003df8:	08003f67 	.word	0x08003f67
 8003dfc:	08003f9f 	.word	0x08003f9f
 8003e00:	08003fc3 	.word	0x08003fc3
 8003e04:	20000260 	.word	0x20000260

08003e08 <stdio_exit_handler>:
 8003e08:	4a02      	ldr	r2, [pc, #8]	@ (8003e14 <stdio_exit_handler+0xc>)
 8003e0a:	4903      	ldr	r1, [pc, #12]	@ (8003e18 <stdio_exit_handler+0x10>)
 8003e0c:	4803      	ldr	r0, [pc, #12]	@ (8003e1c <stdio_exit_handler+0x14>)
 8003e0e:	f000 b869 	b.w	8003ee4 <_fwalk_sglue>
 8003e12:	bf00      	nop
 8003e14:	2000000c 	.word	0x2000000c
 8003e18:	08004a85 	.word	0x08004a85
 8003e1c:	2000001c 	.word	0x2000001c

08003e20 <cleanup_stdio>:
 8003e20:	6841      	ldr	r1, [r0, #4]
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <cleanup_stdio+0x34>)
 8003e24:	4299      	cmp	r1, r3
 8003e26:	b510      	push	{r4, lr}
 8003e28:	4604      	mov	r4, r0
 8003e2a:	d001      	beq.n	8003e30 <cleanup_stdio+0x10>
 8003e2c:	f000 fe2a 	bl	8004a84 <_fflush_r>
 8003e30:	68a1      	ldr	r1, [r4, #8]
 8003e32:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <cleanup_stdio+0x38>)
 8003e34:	4299      	cmp	r1, r3
 8003e36:	d002      	beq.n	8003e3e <cleanup_stdio+0x1e>
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f000 fe23 	bl	8004a84 <_fflush_r>
 8003e3e:	68e1      	ldr	r1, [r4, #12]
 8003e40:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <cleanup_stdio+0x3c>)
 8003e42:	4299      	cmp	r1, r3
 8003e44:	d004      	beq.n	8003e50 <cleanup_stdio+0x30>
 8003e46:	4620      	mov	r0, r4
 8003e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e4c:	f000 be1a 	b.w	8004a84 <_fflush_r>
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	bf00      	nop
 8003e54:	20000260 	.word	0x20000260
 8003e58:	200002c8 	.word	0x200002c8
 8003e5c:	20000330 	.word	0x20000330

08003e60 <global_stdio_init.part.0>:
 8003e60:	b510      	push	{r4, lr}
 8003e62:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <global_stdio_init.part.0+0x30>)
 8003e64:	4c0b      	ldr	r4, [pc, #44]	@ (8003e94 <global_stdio_init.part.0+0x34>)
 8003e66:	4a0c      	ldr	r2, [pc, #48]	@ (8003e98 <global_stdio_init.part.0+0x38>)
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2104      	movs	r1, #4
 8003e70:	f7ff ff94 	bl	8003d9c <std>
 8003e74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e78:	2201      	movs	r2, #1
 8003e7a:	2109      	movs	r1, #9
 8003e7c:	f7ff ff8e 	bl	8003d9c <std>
 8003e80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e84:	2202      	movs	r2, #2
 8003e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e8a:	2112      	movs	r1, #18
 8003e8c:	f7ff bf86 	b.w	8003d9c <std>
 8003e90:	20000398 	.word	0x20000398
 8003e94:	20000260 	.word	0x20000260
 8003e98:	08003e09 	.word	0x08003e09

08003e9c <__sfp_lock_acquire>:
 8003e9c:	4801      	ldr	r0, [pc, #4]	@ (8003ea4 <__sfp_lock_acquire+0x8>)
 8003e9e:	f000 b9a2 	b.w	80041e6 <__retarget_lock_acquire_recursive>
 8003ea2:	bf00      	nop
 8003ea4:	200003a1 	.word	0x200003a1

08003ea8 <__sfp_lock_release>:
 8003ea8:	4801      	ldr	r0, [pc, #4]	@ (8003eb0 <__sfp_lock_release+0x8>)
 8003eaa:	f000 b99d 	b.w	80041e8 <__retarget_lock_release_recursive>
 8003eae:	bf00      	nop
 8003eb0:	200003a1 	.word	0x200003a1

08003eb4 <__sinit>:
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	f7ff fff0 	bl	8003e9c <__sfp_lock_acquire>
 8003ebc:	6a23      	ldr	r3, [r4, #32]
 8003ebe:	b11b      	cbz	r3, 8003ec8 <__sinit+0x14>
 8003ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec4:	f7ff bff0 	b.w	8003ea8 <__sfp_lock_release>
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <__sinit+0x28>)
 8003eca:	6223      	str	r3, [r4, #32]
 8003ecc:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <__sinit+0x2c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f5      	bne.n	8003ec0 <__sinit+0xc>
 8003ed4:	f7ff ffc4 	bl	8003e60 <global_stdio_init.part.0>
 8003ed8:	e7f2      	b.n	8003ec0 <__sinit+0xc>
 8003eda:	bf00      	nop
 8003edc:	08003e21 	.word	0x08003e21
 8003ee0:	20000398 	.word	0x20000398

08003ee4 <_fwalk_sglue>:
 8003ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee8:	4607      	mov	r7, r0
 8003eea:	4688      	mov	r8, r1
 8003eec:	4614      	mov	r4, r2
 8003eee:	2600      	movs	r6, #0
 8003ef0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ef4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ef8:	d505      	bpl.n	8003f06 <_fwalk_sglue+0x22>
 8003efa:	6824      	ldr	r4, [r4, #0]
 8003efc:	2c00      	cmp	r4, #0
 8003efe:	d1f7      	bne.n	8003ef0 <_fwalk_sglue+0xc>
 8003f00:	4630      	mov	r0, r6
 8003f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f06:	89ab      	ldrh	r3, [r5, #12]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d907      	bls.n	8003f1c <_fwalk_sglue+0x38>
 8003f0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f10:	3301      	adds	r3, #1
 8003f12:	d003      	beq.n	8003f1c <_fwalk_sglue+0x38>
 8003f14:	4629      	mov	r1, r5
 8003f16:	4638      	mov	r0, r7
 8003f18:	47c0      	blx	r8
 8003f1a:	4306      	orrs	r6, r0
 8003f1c:	3568      	adds	r5, #104	@ 0x68
 8003f1e:	e7e9      	b.n	8003ef4 <_fwalk_sglue+0x10>

08003f20 <iprintf>:
 8003f20:	b40f      	push	{r0, r1, r2, r3}
 8003f22:	b507      	push	{r0, r1, r2, lr}
 8003f24:	4906      	ldr	r1, [pc, #24]	@ (8003f40 <iprintf+0x20>)
 8003f26:	ab04      	add	r3, sp, #16
 8003f28:	6808      	ldr	r0, [r1, #0]
 8003f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f2e:	6881      	ldr	r1, [r0, #8]
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	f000 fa7d 	bl	8004430 <_vfiprintf_r>
 8003f36:	b003      	add	sp, #12
 8003f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f3c:	b004      	add	sp, #16
 8003f3e:	4770      	bx	lr
 8003f40:	20000018 	.word	0x20000018

08003f44 <__sread>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	460c      	mov	r4, r1
 8003f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4c:	f000 f8fc 	bl	8004148 <_read_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	bfab      	itete	ge
 8003f54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f56:	89a3      	ldrhlt	r3, [r4, #12]
 8003f58:	181b      	addge	r3, r3, r0
 8003f5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f5e:	bfac      	ite	ge
 8003f60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f62:	81a3      	strhlt	r3, [r4, #12]
 8003f64:	bd10      	pop	{r4, pc}

08003f66 <__swrite>:
 8003f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	461f      	mov	r7, r3
 8003f6c:	898b      	ldrh	r3, [r1, #12]
 8003f6e:	05db      	lsls	r3, r3, #23
 8003f70:	4605      	mov	r5, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	4616      	mov	r6, r2
 8003f76:	d505      	bpl.n	8003f84 <__swrite+0x1e>
 8003f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f000 f8d0 	bl	8004124 <_lseek_r>
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f8e:	81a3      	strh	r3, [r4, #12]
 8003f90:	4632      	mov	r2, r6
 8003f92:	463b      	mov	r3, r7
 8003f94:	4628      	mov	r0, r5
 8003f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9a:	f000 b8e7 	b.w	800416c <_write_r>

08003f9e <__sseek>:
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	460c      	mov	r4, r1
 8003fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa6:	f000 f8bd 	bl	8004124 <_lseek_r>
 8003faa:	1c43      	adds	r3, r0, #1
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	bf15      	itete	ne
 8003fb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003fba:	81a3      	strheq	r3, [r4, #12]
 8003fbc:	bf18      	it	ne
 8003fbe:	81a3      	strhne	r3, [r4, #12]
 8003fc0:	bd10      	pop	{r4, pc}

08003fc2 <__sclose>:
 8003fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc6:	f000 b89d 	b.w	8004104 <_close_r>

08003fca <__swbuf_r>:
 8003fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fcc:	460e      	mov	r6, r1
 8003fce:	4614      	mov	r4, r2
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	b118      	cbz	r0, 8003fdc <__swbuf_r+0x12>
 8003fd4:	6a03      	ldr	r3, [r0, #32]
 8003fd6:	b90b      	cbnz	r3, 8003fdc <__swbuf_r+0x12>
 8003fd8:	f7ff ff6c 	bl	8003eb4 <__sinit>
 8003fdc:	69a3      	ldr	r3, [r4, #24]
 8003fde:	60a3      	str	r3, [r4, #8]
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	071a      	lsls	r2, r3, #28
 8003fe4:	d501      	bpl.n	8003fea <__swbuf_r+0x20>
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	b943      	cbnz	r3, 8003ffc <__swbuf_r+0x32>
 8003fea:	4621      	mov	r1, r4
 8003fec:	4628      	mov	r0, r5
 8003fee:	f000 f82b 	bl	8004048 <__swsetup_r>
 8003ff2:	b118      	cbz	r0, 8003ffc <__swbuf_r+0x32>
 8003ff4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	6922      	ldr	r2, [r4, #16]
 8004000:	1a98      	subs	r0, r3, r2
 8004002:	6963      	ldr	r3, [r4, #20]
 8004004:	b2f6      	uxtb	r6, r6
 8004006:	4283      	cmp	r3, r0
 8004008:	4637      	mov	r7, r6
 800400a:	dc05      	bgt.n	8004018 <__swbuf_r+0x4e>
 800400c:	4621      	mov	r1, r4
 800400e:	4628      	mov	r0, r5
 8004010:	f000 fd38 	bl	8004a84 <_fflush_r>
 8004014:	2800      	cmp	r0, #0
 8004016:	d1ed      	bne.n	8003ff4 <__swbuf_r+0x2a>
 8004018:	68a3      	ldr	r3, [r4, #8]
 800401a:	3b01      	subs	r3, #1
 800401c:	60a3      	str	r3, [r4, #8]
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	6022      	str	r2, [r4, #0]
 8004024:	701e      	strb	r6, [r3, #0]
 8004026:	6962      	ldr	r2, [r4, #20]
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	429a      	cmp	r2, r3
 800402c:	d004      	beq.n	8004038 <__swbuf_r+0x6e>
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	07db      	lsls	r3, r3, #31
 8004032:	d5e1      	bpl.n	8003ff8 <__swbuf_r+0x2e>
 8004034:	2e0a      	cmp	r6, #10
 8004036:	d1df      	bne.n	8003ff8 <__swbuf_r+0x2e>
 8004038:	4621      	mov	r1, r4
 800403a:	4628      	mov	r0, r5
 800403c:	f000 fd22 	bl	8004a84 <_fflush_r>
 8004040:	2800      	cmp	r0, #0
 8004042:	d0d9      	beq.n	8003ff8 <__swbuf_r+0x2e>
 8004044:	e7d6      	b.n	8003ff4 <__swbuf_r+0x2a>
	...

08004048 <__swsetup_r>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	4b29      	ldr	r3, [pc, #164]	@ (80040f0 <__swsetup_r+0xa8>)
 800404c:	4605      	mov	r5, r0
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	460c      	mov	r4, r1
 8004052:	b118      	cbz	r0, 800405c <__swsetup_r+0x14>
 8004054:	6a03      	ldr	r3, [r0, #32]
 8004056:	b90b      	cbnz	r3, 800405c <__swsetup_r+0x14>
 8004058:	f7ff ff2c 	bl	8003eb4 <__sinit>
 800405c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004060:	0719      	lsls	r1, r3, #28
 8004062:	d422      	bmi.n	80040aa <__swsetup_r+0x62>
 8004064:	06da      	lsls	r2, r3, #27
 8004066:	d407      	bmi.n	8004078 <__swsetup_r+0x30>
 8004068:	2209      	movs	r2, #9
 800406a:	602a      	str	r2, [r5, #0]
 800406c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004070:	81a3      	strh	r3, [r4, #12]
 8004072:	f04f 30ff 	mov.w	r0, #4294967295
 8004076:	e033      	b.n	80040e0 <__swsetup_r+0x98>
 8004078:	0758      	lsls	r0, r3, #29
 800407a:	d512      	bpl.n	80040a2 <__swsetup_r+0x5a>
 800407c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800407e:	b141      	cbz	r1, 8004092 <__swsetup_r+0x4a>
 8004080:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004084:	4299      	cmp	r1, r3
 8004086:	d002      	beq.n	800408e <__swsetup_r+0x46>
 8004088:	4628      	mov	r0, r5
 800408a:	f000 f8af 	bl	80041ec <_free_r>
 800408e:	2300      	movs	r3, #0
 8004090:	6363      	str	r3, [r4, #52]	@ 0x34
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	2300      	movs	r3, #0
 800409c:	6063      	str	r3, [r4, #4]
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	f043 0308 	orr.w	r3, r3, #8
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	6923      	ldr	r3, [r4, #16]
 80040ac:	b94b      	cbnz	r3, 80040c2 <__swsetup_r+0x7a>
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80040b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b8:	d003      	beq.n	80040c2 <__swsetup_r+0x7a>
 80040ba:	4621      	mov	r1, r4
 80040bc:	4628      	mov	r0, r5
 80040be:	f000 fd2f 	bl	8004b20 <__smakebuf_r>
 80040c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c6:	f013 0201 	ands.w	r2, r3, #1
 80040ca:	d00a      	beq.n	80040e2 <__swsetup_r+0x9a>
 80040cc:	2200      	movs	r2, #0
 80040ce:	60a2      	str	r2, [r4, #8]
 80040d0:	6962      	ldr	r2, [r4, #20]
 80040d2:	4252      	negs	r2, r2
 80040d4:	61a2      	str	r2, [r4, #24]
 80040d6:	6922      	ldr	r2, [r4, #16]
 80040d8:	b942      	cbnz	r2, 80040ec <__swsetup_r+0xa4>
 80040da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80040de:	d1c5      	bne.n	800406c <__swsetup_r+0x24>
 80040e0:	bd38      	pop	{r3, r4, r5, pc}
 80040e2:	0799      	lsls	r1, r3, #30
 80040e4:	bf58      	it	pl
 80040e6:	6962      	ldrpl	r2, [r4, #20]
 80040e8:	60a2      	str	r2, [r4, #8]
 80040ea:	e7f4      	b.n	80040d6 <__swsetup_r+0x8e>
 80040ec:	2000      	movs	r0, #0
 80040ee:	e7f7      	b.n	80040e0 <__swsetup_r+0x98>
 80040f0:	20000018 	.word	0x20000018

080040f4 <memset>:
 80040f4:	4402      	add	r2, r0
 80040f6:	4603      	mov	r3, r0
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d100      	bne.n	80040fe <memset+0xa>
 80040fc:	4770      	bx	lr
 80040fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004102:	e7f9      	b.n	80040f8 <memset+0x4>

08004104 <_close_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4d06      	ldr	r5, [pc, #24]	@ (8004120 <_close_r+0x1c>)
 8004108:	2300      	movs	r3, #0
 800410a:	4604      	mov	r4, r0
 800410c:	4608      	mov	r0, r1
 800410e:	602b      	str	r3, [r5, #0]
 8004110:	f7fc fd0b 	bl	8000b2a <_close>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_close_r+0x1a>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_close_r+0x1a>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	2000039c 	.word	0x2000039c

08004124 <_lseek_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d07      	ldr	r5, [pc, #28]	@ (8004144 <_lseek_r+0x20>)
 8004128:	4604      	mov	r4, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fc fd20 	bl	8000b78 <_lseek>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_lseek_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_lseek_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	2000039c 	.word	0x2000039c

08004148 <_read_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4d07      	ldr	r5, [pc, #28]	@ (8004168 <_read_r+0x20>)
 800414c:	4604      	mov	r4, r0
 800414e:	4608      	mov	r0, r1
 8004150:	4611      	mov	r1, r2
 8004152:	2200      	movs	r2, #0
 8004154:	602a      	str	r2, [r5, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	f7fc fcae 	bl	8000ab8 <_read>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_read_r+0x1e>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_read_r+0x1e>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	2000039c 	.word	0x2000039c

0800416c <_write_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d07      	ldr	r5, [pc, #28]	@ (800418c <_write_r+0x20>)
 8004170:	4604      	mov	r4, r0
 8004172:	4608      	mov	r0, r1
 8004174:	4611      	mov	r1, r2
 8004176:	2200      	movs	r2, #0
 8004178:	602a      	str	r2, [r5, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f7fc fcb9 	bl	8000af2 <_write>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_write_r+0x1e>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_write_r+0x1e>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	2000039c 	.word	0x2000039c

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	@ (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000018 	.word	0x20000018

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	4d0d      	ldr	r5, [pc, #52]	@ (80041d4 <__libc_init_array+0x38>)
 80041a0:	4c0d      	ldr	r4, [pc, #52]	@ (80041d8 <__libc_init_array+0x3c>)
 80041a2:	1b64      	subs	r4, r4, r5
 80041a4:	10a4      	asrs	r4, r4, #2
 80041a6:	2600      	movs	r6, #0
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	4d0b      	ldr	r5, [pc, #44]	@ (80041dc <__libc_init_array+0x40>)
 80041ae:	4c0c      	ldr	r4, [pc, #48]	@ (80041e0 <__libc_init_array+0x44>)
 80041b0:	f000 fd24 	bl	8004bfc <_init>
 80041b4:	1b64      	subs	r4, r4, r5
 80041b6:	10a4      	asrs	r4, r4, #2
 80041b8:	2600      	movs	r6, #0
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	08004c78 	.word	0x08004c78
 80041d8:	08004c78 	.word	0x08004c78
 80041dc:	08004c78 	.word	0x08004c78
 80041e0:	08004c7c 	.word	0x08004c7c

080041e4 <__retarget_lock_init_recursive>:
 80041e4:	4770      	bx	lr

080041e6 <__retarget_lock_acquire_recursive>:
 80041e6:	4770      	bx	lr

080041e8 <__retarget_lock_release_recursive>:
 80041e8:	4770      	bx	lr
	...

080041ec <_free_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4605      	mov	r5, r0
 80041f0:	2900      	cmp	r1, #0
 80041f2:	d041      	beq.n	8004278 <_free_r+0x8c>
 80041f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f8:	1f0c      	subs	r4, r1, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bfb8      	it	lt
 80041fe:	18e4      	addlt	r4, r4, r3
 8004200:	f000 f8e0 	bl	80043c4 <__malloc_lock>
 8004204:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <_free_r+0x90>)
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	b933      	cbnz	r3, 8004218 <_free_r+0x2c>
 800420a:	6063      	str	r3, [r4, #4]
 800420c:	6014      	str	r4, [r2, #0]
 800420e:	4628      	mov	r0, r5
 8004210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004214:	f000 b8dc 	b.w	80043d0 <__malloc_unlock>
 8004218:	42a3      	cmp	r3, r4
 800421a:	d908      	bls.n	800422e <_free_r+0x42>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	1821      	adds	r1, r4, r0
 8004220:	428b      	cmp	r3, r1
 8004222:	bf01      	itttt	eq
 8004224:	6819      	ldreq	r1, [r3, #0]
 8004226:	685b      	ldreq	r3, [r3, #4]
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	e7ed      	b.n	800420a <_free_r+0x1e>
 800422e:	461a      	mov	r2, r3
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	b10b      	cbz	r3, 8004238 <_free_r+0x4c>
 8004234:	42a3      	cmp	r3, r4
 8004236:	d9fa      	bls.n	800422e <_free_r+0x42>
 8004238:	6811      	ldr	r1, [r2, #0]
 800423a:	1850      	adds	r0, r2, r1
 800423c:	42a0      	cmp	r0, r4
 800423e:	d10b      	bne.n	8004258 <_free_r+0x6c>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	4401      	add	r1, r0
 8004244:	1850      	adds	r0, r2, r1
 8004246:	4283      	cmp	r3, r0
 8004248:	6011      	str	r1, [r2, #0]
 800424a:	d1e0      	bne.n	800420e <_free_r+0x22>
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	6053      	str	r3, [r2, #4]
 8004252:	4408      	add	r0, r1
 8004254:	6010      	str	r0, [r2, #0]
 8004256:	e7da      	b.n	800420e <_free_r+0x22>
 8004258:	d902      	bls.n	8004260 <_free_r+0x74>
 800425a:	230c      	movs	r3, #12
 800425c:	602b      	str	r3, [r5, #0]
 800425e:	e7d6      	b.n	800420e <_free_r+0x22>
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	1821      	adds	r1, r4, r0
 8004264:	428b      	cmp	r3, r1
 8004266:	bf04      	itt	eq
 8004268:	6819      	ldreq	r1, [r3, #0]
 800426a:	685b      	ldreq	r3, [r3, #4]
 800426c:	6063      	str	r3, [r4, #4]
 800426e:	bf04      	itt	eq
 8004270:	1809      	addeq	r1, r1, r0
 8004272:	6021      	streq	r1, [r4, #0]
 8004274:	6054      	str	r4, [r2, #4]
 8004276:	e7ca      	b.n	800420e <_free_r+0x22>
 8004278:	bd38      	pop	{r3, r4, r5, pc}
 800427a:	bf00      	nop
 800427c:	200003a8 	.word	0x200003a8

08004280 <sbrk_aligned>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	4e0f      	ldr	r6, [pc, #60]	@ (80042c0 <sbrk_aligned+0x40>)
 8004284:	460c      	mov	r4, r1
 8004286:	6831      	ldr	r1, [r6, #0]
 8004288:	4605      	mov	r5, r0
 800428a:	b911      	cbnz	r1, 8004292 <sbrk_aligned+0x12>
 800428c:	f000 fca6 	bl	8004bdc <_sbrk_r>
 8004290:	6030      	str	r0, [r6, #0]
 8004292:	4621      	mov	r1, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f000 fca1 	bl	8004bdc <_sbrk_r>
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	d103      	bne.n	80042a6 <sbrk_aligned+0x26>
 800429e:	f04f 34ff 	mov.w	r4, #4294967295
 80042a2:	4620      	mov	r0, r4
 80042a4:	bd70      	pop	{r4, r5, r6, pc}
 80042a6:	1cc4      	adds	r4, r0, #3
 80042a8:	f024 0403 	bic.w	r4, r4, #3
 80042ac:	42a0      	cmp	r0, r4
 80042ae:	d0f8      	beq.n	80042a2 <sbrk_aligned+0x22>
 80042b0:	1a21      	subs	r1, r4, r0
 80042b2:	4628      	mov	r0, r5
 80042b4:	f000 fc92 	bl	8004bdc <_sbrk_r>
 80042b8:	3001      	adds	r0, #1
 80042ba:	d1f2      	bne.n	80042a2 <sbrk_aligned+0x22>
 80042bc:	e7ef      	b.n	800429e <sbrk_aligned+0x1e>
 80042be:	bf00      	nop
 80042c0:	200003a4 	.word	0x200003a4

080042c4 <_malloc_r>:
 80042c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c8:	1ccd      	adds	r5, r1, #3
 80042ca:	f025 0503 	bic.w	r5, r5, #3
 80042ce:	3508      	adds	r5, #8
 80042d0:	2d0c      	cmp	r5, #12
 80042d2:	bf38      	it	cc
 80042d4:	250c      	movcc	r5, #12
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	4606      	mov	r6, r0
 80042da:	db01      	blt.n	80042e0 <_malloc_r+0x1c>
 80042dc:	42a9      	cmp	r1, r5
 80042de:	d904      	bls.n	80042ea <_malloc_r+0x26>
 80042e0:	230c      	movs	r3, #12
 80042e2:	6033      	str	r3, [r6, #0]
 80042e4:	2000      	movs	r0, #0
 80042e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043c0 <_malloc_r+0xfc>
 80042ee:	f000 f869 	bl	80043c4 <__malloc_lock>
 80042f2:	f8d8 3000 	ldr.w	r3, [r8]
 80042f6:	461c      	mov	r4, r3
 80042f8:	bb44      	cbnz	r4, 800434c <_malloc_r+0x88>
 80042fa:	4629      	mov	r1, r5
 80042fc:	4630      	mov	r0, r6
 80042fe:	f7ff ffbf 	bl	8004280 <sbrk_aligned>
 8004302:	1c43      	adds	r3, r0, #1
 8004304:	4604      	mov	r4, r0
 8004306:	d158      	bne.n	80043ba <_malloc_r+0xf6>
 8004308:	f8d8 4000 	ldr.w	r4, [r8]
 800430c:	4627      	mov	r7, r4
 800430e:	2f00      	cmp	r7, #0
 8004310:	d143      	bne.n	800439a <_malloc_r+0xd6>
 8004312:	2c00      	cmp	r4, #0
 8004314:	d04b      	beq.n	80043ae <_malloc_r+0xea>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	4639      	mov	r1, r7
 800431a:	4630      	mov	r0, r6
 800431c:	eb04 0903 	add.w	r9, r4, r3
 8004320:	f000 fc5c 	bl	8004bdc <_sbrk_r>
 8004324:	4581      	cmp	r9, r0
 8004326:	d142      	bne.n	80043ae <_malloc_r+0xea>
 8004328:	6821      	ldr	r1, [r4, #0]
 800432a:	1a6d      	subs	r5, r5, r1
 800432c:	4629      	mov	r1, r5
 800432e:	4630      	mov	r0, r6
 8004330:	f7ff ffa6 	bl	8004280 <sbrk_aligned>
 8004334:	3001      	adds	r0, #1
 8004336:	d03a      	beq.n	80043ae <_malloc_r+0xea>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	442b      	add	r3, r5
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	f8d8 3000 	ldr.w	r3, [r8]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	bb62      	cbnz	r2, 80043a0 <_malloc_r+0xdc>
 8004346:	f8c8 7000 	str.w	r7, [r8]
 800434a:	e00f      	b.n	800436c <_malloc_r+0xa8>
 800434c:	6822      	ldr	r2, [r4, #0]
 800434e:	1b52      	subs	r2, r2, r5
 8004350:	d420      	bmi.n	8004394 <_malloc_r+0xd0>
 8004352:	2a0b      	cmp	r2, #11
 8004354:	d917      	bls.n	8004386 <_malloc_r+0xc2>
 8004356:	1961      	adds	r1, r4, r5
 8004358:	42a3      	cmp	r3, r4
 800435a:	6025      	str	r5, [r4, #0]
 800435c:	bf18      	it	ne
 800435e:	6059      	strne	r1, [r3, #4]
 8004360:	6863      	ldr	r3, [r4, #4]
 8004362:	bf08      	it	eq
 8004364:	f8c8 1000 	streq.w	r1, [r8]
 8004368:	5162      	str	r2, [r4, r5]
 800436a:	604b      	str	r3, [r1, #4]
 800436c:	4630      	mov	r0, r6
 800436e:	f000 f82f 	bl	80043d0 <__malloc_unlock>
 8004372:	f104 000b 	add.w	r0, r4, #11
 8004376:	1d23      	adds	r3, r4, #4
 8004378:	f020 0007 	bic.w	r0, r0, #7
 800437c:	1ac2      	subs	r2, r0, r3
 800437e:	bf1c      	itt	ne
 8004380:	1a1b      	subne	r3, r3, r0
 8004382:	50a3      	strne	r3, [r4, r2]
 8004384:	e7af      	b.n	80042e6 <_malloc_r+0x22>
 8004386:	6862      	ldr	r2, [r4, #4]
 8004388:	42a3      	cmp	r3, r4
 800438a:	bf0c      	ite	eq
 800438c:	f8c8 2000 	streq.w	r2, [r8]
 8004390:	605a      	strne	r2, [r3, #4]
 8004392:	e7eb      	b.n	800436c <_malloc_r+0xa8>
 8004394:	4623      	mov	r3, r4
 8004396:	6864      	ldr	r4, [r4, #4]
 8004398:	e7ae      	b.n	80042f8 <_malloc_r+0x34>
 800439a:	463c      	mov	r4, r7
 800439c:	687f      	ldr	r7, [r7, #4]
 800439e:	e7b6      	b.n	800430e <_malloc_r+0x4a>
 80043a0:	461a      	mov	r2, r3
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d1fb      	bne.n	80043a0 <_malloc_r+0xdc>
 80043a8:	2300      	movs	r3, #0
 80043aa:	6053      	str	r3, [r2, #4]
 80043ac:	e7de      	b.n	800436c <_malloc_r+0xa8>
 80043ae:	230c      	movs	r3, #12
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	4630      	mov	r0, r6
 80043b4:	f000 f80c 	bl	80043d0 <__malloc_unlock>
 80043b8:	e794      	b.n	80042e4 <_malloc_r+0x20>
 80043ba:	6005      	str	r5, [r0, #0]
 80043bc:	e7d6      	b.n	800436c <_malloc_r+0xa8>
 80043be:	bf00      	nop
 80043c0:	200003a8 	.word	0x200003a8

080043c4 <__malloc_lock>:
 80043c4:	4801      	ldr	r0, [pc, #4]	@ (80043cc <__malloc_lock+0x8>)
 80043c6:	f7ff bf0e 	b.w	80041e6 <__retarget_lock_acquire_recursive>
 80043ca:	bf00      	nop
 80043cc:	200003a0 	.word	0x200003a0

080043d0 <__malloc_unlock>:
 80043d0:	4801      	ldr	r0, [pc, #4]	@ (80043d8 <__malloc_unlock+0x8>)
 80043d2:	f7ff bf09 	b.w	80041e8 <__retarget_lock_release_recursive>
 80043d6:	bf00      	nop
 80043d8:	200003a0 	.word	0x200003a0

080043dc <__sfputc_r>:
 80043dc:	6893      	ldr	r3, [r2, #8]
 80043de:	3b01      	subs	r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	b410      	push	{r4}
 80043e4:	6093      	str	r3, [r2, #8]
 80043e6:	da08      	bge.n	80043fa <__sfputc_r+0x1e>
 80043e8:	6994      	ldr	r4, [r2, #24]
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	db01      	blt.n	80043f2 <__sfputc_r+0x16>
 80043ee:	290a      	cmp	r1, #10
 80043f0:	d103      	bne.n	80043fa <__sfputc_r+0x1e>
 80043f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f6:	f7ff bde8 	b.w	8003fca <__swbuf_r>
 80043fa:	6813      	ldr	r3, [r2, #0]
 80043fc:	1c58      	adds	r0, r3, #1
 80043fe:	6010      	str	r0, [r2, #0]
 8004400:	7019      	strb	r1, [r3, #0]
 8004402:	4608      	mov	r0, r1
 8004404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004408:	4770      	bx	lr

0800440a <__sfputs_r>:
 800440a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440c:	4606      	mov	r6, r0
 800440e:	460f      	mov	r7, r1
 8004410:	4614      	mov	r4, r2
 8004412:	18d5      	adds	r5, r2, r3
 8004414:	42ac      	cmp	r4, r5
 8004416:	d101      	bne.n	800441c <__sfputs_r+0x12>
 8004418:	2000      	movs	r0, #0
 800441a:	e007      	b.n	800442c <__sfputs_r+0x22>
 800441c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004420:	463a      	mov	r2, r7
 8004422:	4630      	mov	r0, r6
 8004424:	f7ff ffda 	bl	80043dc <__sfputc_r>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d1f3      	bne.n	8004414 <__sfputs_r+0xa>
 800442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004430 <_vfiprintf_r>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	460d      	mov	r5, r1
 8004436:	b09d      	sub	sp, #116	@ 0x74
 8004438:	4614      	mov	r4, r2
 800443a:	4698      	mov	r8, r3
 800443c:	4606      	mov	r6, r0
 800443e:	b118      	cbz	r0, 8004448 <_vfiprintf_r+0x18>
 8004440:	6a03      	ldr	r3, [r0, #32]
 8004442:	b90b      	cbnz	r3, 8004448 <_vfiprintf_r+0x18>
 8004444:	f7ff fd36 	bl	8003eb4 <__sinit>
 8004448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800444a:	07d9      	lsls	r1, r3, #31
 800444c:	d405      	bmi.n	800445a <_vfiprintf_r+0x2a>
 800444e:	89ab      	ldrh	r3, [r5, #12]
 8004450:	059a      	lsls	r2, r3, #22
 8004452:	d402      	bmi.n	800445a <_vfiprintf_r+0x2a>
 8004454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004456:	f7ff fec6 	bl	80041e6 <__retarget_lock_acquire_recursive>
 800445a:	89ab      	ldrh	r3, [r5, #12]
 800445c:	071b      	lsls	r3, r3, #28
 800445e:	d501      	bpl.n	8004464 <_vfiprintf_r+0x34>
 8004460:	692b      	ldr	r3, [r5, #16]
 8004462:	b99b      	cbnz	r3, 800448c <_vfiprintf_r+0x5c>
 8004464:	4629      	mov	r1, r5
 8004466:	4630      	mov	r0, r6
 8004468:	f7ff fdee 	bl	8004048 <__swsetup_r>
 800446c:	b170      	cbz	r0, 800448c <_vfiprintf_r+0x5c>
 800446e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004470:	07dc      	lsls	r4, r3, #31
 8004472:	d504      	bpl.n	800447e <_vfiprintf_r+0x4e>
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	b01d      	add	sp, #116	@ 0x74
 800447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447e:	89ab      	ldrh	r3, [r5, #12]
 8004480:	0598      	lsls	r0, r3, #22
 8004482:	d4f7      	bmi.n	8004474 <_vfiprintf_r+0x44>
 8004484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004486:	f7ff feaf 	bl	80041e8 <__retarget_lock_release_recursive>
 800448a:	e7f3      	b.n	8004474 <_vfiprintf_r+0x44>
 800448c:	2300      	movs	r3, #0
 800448e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004490:	2320      	movs	r3, #32
 8004492:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004496:	f8cd 800c 	str.w	r8, [sp, #12]
 800449a:	2330      	movs	r3, #48	@ 0x30
 800449c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800464c <_vfiprintf_r+0x21c>
 80044a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044a4:	f04f 0901 	mov.w	r9, #1
 80044a8:	4623      	mov	r3, r4
 80044aa:	469a      	mov	sl, r3
 80044ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044b0:	b10a      	cbz	r2, 80044b6 <_vfiprintf_r+0x86>
 80044b2:	2a25      	cmp	r2, #37	@ 0x25
 80044b4:	d1f9      	bne.n	80044aa <_vfiprintf_r+0x7a>
 80044b6:	ebba 0b04 	subs.w	fp, sl, r4
 80044ba:	d00b      	beq.n	80044d4 <_vfiprintf_r+0xa4>
 80044bc:	465b      	mov	r3, fp
 80044be:	4622      	mov	r2, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	4630      	mov	r0, r6
 80044c4:	f7ff ffa1 	bl	800440a <__sfputs_r>
 80044c8:	3001      	adds	r0, #1
 80044ca:	f000 80a7 	beq.w	800461c <_vfiprintf_r+0x1ec>
 80044ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044d0:	445a      	add	r2, fp
 80044d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80044d4:	f89a 3000 	ldrb.w	r3, [sl]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 809f 	beq.w	800461c <_vfiprintf_r+0x1ec>
 80044de:	2300      	movs	r3, #0
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295
 80044e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044e8:	f10a 0a01 	add.w	sl, sl, #1
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	9307      	str	r3, [sp, #28]
 80044f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80044f6:	4654      	mov	r4, sl
 80044f8:	2205      	movs	r2, #5
 80044fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fe:	4853      	ldr	r0, [pc, #332]	@ (800464c <_vfiprintf_r+0x21c>)
 8004500:	f7fb fe66 	bl	80001d0 <memchr>
 8004504:	9a04      	ldr	r2, [sp, #16]
 8004506:	b9d8      	cbnz	r0, 8004540 <_vfiprintf_r+0x110>
 8004508:	06d1      	lsls	r1, r2, #27
 800450a:	bf44      	itt	mi
 800450c:	2320      	movmi	r3, #32
 800450e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004512:	0713      	lsls	r3, r2, #28
 8004514:	bf44      	itt	mi
 8004516:	232b      	movmi	r3, #43	@ 0x2b
 8004518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800451c:	f89a 3000 	ldrb.w	r3, [sl]
 8004520:	2b2a      	cmp	r3, #42	@ 0x2a
 8004522:	d015      	beq.n	8004550 <_vfiprintf_r+0x120>
 8004524:	9a07      	ldr	r2, [sp, #28]
 8004526:	4654      	mov	r4, sl
 8004528:	2000      	movs	r0, #0
 800452a:	f04f 0c0a 	mov.w	ip, #10
 800452e:	4621      	mov	r1, r4
 8004530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004534:	3b30      	subs	r3, #48	@ 0x30
 8004536:	2b09      	cmp	r3, #9
 8004538:	d94b      	bls.n	80045d2 <_vfiprintf_r+0x1a2>
 800453a:	b1b0      	cbz	r0, 800456a <_vfiprintf_r+0x13a>
 800453c:	9207      	str	r2, [sp, #28]
 800453e:	e014      	b.n	800456a <_vfiprintf_r+0x13a>
 8004540:	eba0 0308 	sub.w	r3, r0, r8
 8004544:	fa09 f303 	lsl.w	r3, r9, r3
 8004548:	4313      	orrs	r3, r2
 800454a:	9304      	str	r3, [sp, #16]
 800454c:	46a2      	mov	sl, r4
 800454e:	e7d2      	b.n	80044f6 <_vfiprintf_r+0xc6>
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	1d19      	adds	r1, r3, #4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	9103      	str	r1, [sp, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	bfbb      	ittet	lt
 800455c:	425b      	neglt	r3, r3
 800455e:	f042 0202 	orrlt.w	r2, r2, #2
 8004562:	9307      	strge	r3, [sp, #28]
 8004564:	9307      	strlt	r3, [sp, #28]
 8004566:	bfb8      	it	lt
 8004568:	9204      	strlt	r2, [sp, #16]
 800456a:	7823      	ldrb	r3, [r4, #0]
 800456c:	2b2e      	cmp	r3, #46	@ 0x2e
 800456e:	d10a      	bne.n	8004586 <_vfiprintf_r+0x156>
 8004570:	7863      	ldrb	r3, [r4, #1]
 8004572:	2b2a      	cmp	r3, #42	@ 0x2a
 8004574:	d132      	bne.n	80045dc <_vfiprintf_r+0x1ac>
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	9203      	str	r2, [sp, #12]
 800457e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004582:	3402      	adds	r4, #2
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800465c <_vfiprintf_r+0x22c>
 800458a:	7821      	ldrb	r1, [r4, #0]
 800458c:	2203      	movs	r2, #3
 800458e:	4650      	mov	r0, sl
 8004590:	f7fb fe1e 	bl	80001d0 <memchr>
 8004594:	b138      	cbz	r0, 80045a6 <_vfiprintf_r+0x176>
 8004596:	9b04      	ldr	r3, [sp, #16]
 8004598:	eba0 000a 	sub.w	r0, r0, sl
 800459c:	2240      	movs	r2, #64	@ 0x40
 800459e:	4082      	lsls	r2, r0
 80045a0:	4313      	orrs	r3, r2
 80045a2:	3401      	adds	r4, #1
 80045a4:	9304      	str	r3, [sp, #16]
 80045a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045aa:	4829      	ldr	r0, [pc, #164]	@ (8004650 <_vfiprintf_r+0x220>)
 80045ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045b0:	2206      	movs	r2, #6
 80045b2:	f7fb fe0d 	bl	80001d0 <memchr>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d03f      	beq.n	800463a <_vfiprintf_r+0x20a>
 80045ba:	4b26      	ldr	r3, [pc, #152]	@ (8004654 <_vfiprintf_r+0x224>)
 80045bc:	bb1b      	cbnz	r3, 8004606 <_vfiprintf_r+0x1d6>
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	3307      	adds	r3, #7
 80045c2:	f023 0307 	bic.w	r3, r3, #7
 80045c6:	3308      	adds	r3, #8
 80045c8:	9303      	str	r3, [sp, #12]
 80045ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045cc:	443b      	add	r3, r7
 80045ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d0:	e76a      	b.n	80044a8 <_vfiprintf_r+0x78>
 80045d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80045d6:	460c      	mov	r4, r1
 80045d8:	2001      	movs	r0, #1
 80045da:	e7a8      	b.n	800452e <_vfiprintf_r+0xfe>
 80045dc:	2300      	movs	r3, #0
 80045de:	3401      	adds	r4, #1
 80045e0:	9305      	str	r3, [sp, #20]
 80045e2:	4619      	mov	r1, r3
 80045e4:	f04f 0c0a 	mov.w	ip, #10
 80045e8:	4620      	mov	r0, r4
 80045ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ee:	3a30      	subs	r2, #48	@ 0x30
 80045f0:	2a09      	cmp	r2, #9
 80045f2:	d903      	bls.n	80045fc <_vfiprintf_r+0x1cc>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0c6      	beq.n	8004586 <_vfiprintf_r+0x156>
 80045f8:	9105      	str	r1, [sp, #20]
 80045fa:	e7c4      	b.n	8004586 <_vfiprintf_r+0x156>
 80045fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004600:	4604      	mov	r4, r0
 8004602:	2301      	movs	r3, #1
 8004604:	e7f0      	b.n	80045e8 <_vfiprintf_r+0x1b8>
 8004606:	ab03      	add	r3, sp, #12
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	462a      	mov	r2, r5
 800460c:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <_vfiprintf_r+0x228>)
 800460e:	a904      	add	r1, sp, #16
 8004610:	4630      	mov	r0, r6
 8004612:	f3af 8000 	nop.w
 8004616:	4607      	mov	r7, r0
 8004618:	1c78      	adds	r0, r7, #1
 800461a:	d1d6      	bne.n	80045ca <_vfiprintf_r+0x19a>
 800461c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800461e:	07d9      	lsls	r1, r3, #31
 8004620:	d405      	bmi.n	800462e <_vfiprintf_r+0x1fe>
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	059a      	lsls	r2, r3, #22
 8004626:	d402      	bmi.n	800462e <_vfiprintf_r+0x1fe>
 8004628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800462a:	f7ff fddd 	bl	80041e8 <__retarget_lock_release_recursive>
 800462e:	89ab      	ldrh	r3, [r5, #12]
 8004630:	065b      	lsls	r3, r3, #25
 8004632:	f53f af1f 	bmi.w	8004474 <_vfiprintf_r+0x44>
 8004636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004638:	e71e      	b.n	8004478 <_vfiprintf_r+0x48>
 800463a:	ab03      	add	r3, sp, #12
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	462a      	mov	r2, r5
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <_vfiprintf_r+0x228>)
 8004642:	a904      	add	r1, sp, #16
 8004644:	4630      	mov	r0, r6
 8004646:	f000 f879 	bl	800473c <_printf_i>
 800464a:	e7e4      	b.n	8004616 <_vfiprintf_r+0x1e6>
 800464c:	08004c3c 	.word	0x08004c3c
 8004650:	08004c46 	.word	0x08004c46
 8004654:	00000000 	.word	0x00000000
 8004658:	0800440b 	.word	0x0800440b
 800465c:	08004c42 	.word	0x08004c42

08004660 <_printf_common>:
 8004660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	4616      	mov	r6, r2
 8004666:	4698      	mov	r8, r3
 8004668:	688a      	ldr	r2, [r1, #8]
 800466a:	690b      	ldr	r3, [r1, #16]
 800466c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004670:	4293      	cmp	r3, r2
 8004672:	bfb8      	it	lt
 8004674:	4613      	movlt	r3, r2
 8004676:	6033      	str	r3, [r6, #0]
 8004678:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800467c:	4607      	mov	r7, r0
 800467e:	460c      	mov	r4, r1
 8004680:	b10a      	cbz	r2, 8004686 <_printf_common+0x26>
 8004682:	3301      	adds	r3, #1
 8004684:	6033      	str	r3, [r6, #0]
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	0699      	lsls	r1, r3, #26
 800468a:	bf42      	ittt	mi
 800468c:	6833      	ldrmi	r3, [r6, #0]
 800468e:	3302      	addmi	r3, #2
 8004690:	6033      	strmi	r3, [r6, #0]
 8004692:	6825      	ldr	r5, [r4, #0]
 8004694:	f015 0506 	ands.w	r5, r5, #6
 8004698:	d106      	bne.n	80046a8 <_printf_common+0x48>
 800469a:	f104 0a19 	add.w	sl, r4, #25
 800469e:	68e3      	ldr	r3, [r4, #12]
 80046a0:	6832      	ldr	r2, [r6, #0]
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	42ab      	cmp	r3, r5
 80046a6:	dc26      	bgt.n	80046f6 <_printf_common+0x96>
 80046a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	3b00      	subs	r3, #0
 80046b0:	bf18      	it	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	0692      	lsls	r2, r2, #26
 80046b6:	d42b      	bmi.n	8004710 <_printf_common+0xb0>
 80046b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046bc:	4641      	mov	r1, r8
 80046be:	4638      	mov	r0, r7
 80046c0:	47c8      	blx	r9
 80046c2:	3001      	adds	r0, #1
 80046c4:	d01e      	beq.n	8004704 <_printf_common+0xa4>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	6922      	ldr	r2, [r4, #16]
 80046ca:	f003 0306 	and.w	r3, r3, #6
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	bf02      	ittt	eq
 80046d2:	68e5      	ldreq	r5, [r4, #12]
 80046d4:	6833      	ldreq	r3, [r6, #0]
 80046d6:	1aed      	subeq	r5, r5, r3
 80046d8:	68a3      	ldr	r3, [r4, #8]
 80046da:	bf0c      	ite	eq
 80046dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046e0:	2500      	movne	r5, #0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	bfc4      	itt	gt
 80046e6:	1a9b      	subgt	r3, r3, r2
 80046e8:	18ed      	addgt	r5, r5, r3
 80046ea:	2600      	movs	r6, #0
 80046ec:	341a      	adds	r4, #26
 80046ee:	42b5      	cmp	r5, r6
 80046f0:	d11a      	bne.n	8004728 <_printf_common+0xc8>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e008      	b.n	8004708 <_printf_common+0xa8>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4652      	mov	r2, sl
 80046fa:	4641      	mov	r1, r8
 80046fc:	4638      	mov	r0, r7
 80046fe:	47c8      	blx	r9
 8004700:	3001      	adds	r0, #1
 8004702:	d103      	bne.n	800470c <_printf_common+0xac>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470c:	3501      	adds	r5, #1
 800470e:	e7c6      	b.n	800469e <_printf_common+0x3e>
 8004710:	18e1      	adds	r1, r4, r3
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	2030      	movs	r0, #48	@ 0x30
 8004716:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800471a:	4422      	add	r2, r4
 800471c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004720:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004724:	3302      	adds	r3, #2
 8004726:	e7c7      	b.n	80046b8 <_printf_common+0x58>
 8004728:	2301      	movs	r3, #1
 800472a:	4622      	mov	r2, r4
 800472c:	4641      	mov	r1, r8
 800472e:	4638      	mov	r0, r7
 8004730:	47c8      	blx	r9
 8004732:	3001      	adds	r0, #1
 8004734:	d0e6      	beq.n	8004704 <_printf_common+0xa4>
 8004736:	3601      	adds	r6, #1
 8004738:	e7d9      	b.n	80046ee <_printf_common+0x8e>
	...

0800473c <_printf_i>:
 800473c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004740:	7e0f      	ldrb	r7, [r1, #24]
 8004742:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004744:	2f78      	cmp	r7, #120	@ 0x78
 8004746:	4691      	mov	r9, r2
 8004748:	4680      	mov	r8, r0
 800474a:	460c      	mov	r4, r1
 800474c:	469a      	mov	sl, r3
 800474e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004752:	d807      	bhi.n	8004764 <_printf_i+0x28>
 8004754:	2f62      	cmp	r7, #98	@ 0x62
 8004756:	d80a      	bhi.n	800476e <_printf_i+0x32>
 8004758:	2f00      	cmp	r7, #0
 800475a:	f000 80d2 	beq.w	8004902 <_printf_i+0x1c6>
 800475e:	2f58      	cmp	r7, #88	@ 0x58
 8004760:	f000 80b9 	beq.w	80048d6 <_printf_i+0x19a>
 8004764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004768:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800476c:	e03a      	b.n	80047e4 <_printf_i+0xa8>
 800476e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004772:	2b15      	cmp	r3, #21
 8004774:	d8f6      	bhi.n	8004764 <_printf_i+0x28>
 8004776:	a101      	add	r1, pc, #4	@ (adr r1, 800477c <_printf_i+0x40>)
 8004778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800477c:	080047d5 	.word	0x080047d5
 8004780:	080047e9 	.word	0x080047e9
 8004784:	08004765 	.word	0x08004765
 8004788:	08004765 	.word	0x08004765
 800478c:	08004765 	.word	0x08004765
 8004790:	08004765 	.word	0x08004765
 8004794:	080047e9 	.word	0x080047e9
 8004798:	08004765 	.word	0x08004765
 800479c:	08004765 	.word	0x08004765
 80047a0:	08004765 	.word	0x08004765
 80047a4:	08004765 	.word	0x08004765
 80047a8:	080048e9 	.word	0x080048e9
 80047ac:	08004813 	.word	0x08004813
 80047b0:	080048a3 	.word	0x080048a3
 80047b4:	08004765 	.word	0x08004765
 80047b8:	08004765 	.word	0x08004765
 80047bc:	0800490b 	.word	0x0800490b
 80047c0:	08004765 	.word	0x08004765
 80047c4:	08004813 	.word	0x08004813
 80047c8:	08004765 	.word	0x08004765
 80047cc:	08004765 	.word	0x08004765
 80047d0:	080048ab 	.word	0x080048ab
 80047d4:	6833      	ldr	r3, [r6, #0]
 80047d6:	1d1a      	adds	r2, r3, #4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6032      	str	r2, [r6, #0]
 80047dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047e4:	2301      	movs	r3, #1
 80047e6:	e09d      	b.n	8004924 <_printf_i+0x1e8>
 80047e8:	6833      	ldr	r3, [r6, #0]
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	1d19      	adds	r1, r3, #4
 80047ee:	6031      	str	r1, [r6, #0]
 80047f0:	0606      	lsls	r6, r0, #24
 80047f2:	d501      	bpl.n	80047f8 <_printf_i+0xbc>
 80047f4:	681d      	ldr	r5, [r3, #0]
 80047f6:	e003      	b.n	8004800 <_printf_i+0xc4>
 80047f8:	0645      	lsls	r5, r0, #25
 80047fa:	d5fb      	bpl.n	80047f4 <_printf_i+0xb8>
 80047fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004800:	2d00      	cmp	r5, #0
 8004802:	da03      	bge.n	800480c <_printf_i+0xd0>
 8004804:	232d      	movs	r3, #45	@ 0x2d
 8004806:	426d      	negs	r5, r5
 8004808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800480c:	4859      	ldr	r0, [pc, #356]	@ (8004974 <_printf_i+0x238>)
 800480e:	230a      	movs	r3, #10
 8004810:	e011      	b.n	8004836 <_printf_i+0xfa>
 8004812:	6821      	ldr	r1, [r4, #0]
 8004814:	6833      	ldr	r3, [r6, #0]
 8004816:	0608      	lsls	r0, r1, #24
 8004818:	f853 5b04 	ldr.w	r5, [r3], #4
 800481c:	d402      	bmi.n	8004824 <_printf_i+0xe8>
 800481e:	0649      	lsls	r1, r1, #25
 8004820:	bf48      	it	mi
 8004822:	b2ad      	uxthmi	r5, r5
 8004824:	2f6f      	cmp	r7, #111	@ 0x6f
 8004826:	4853      	ldr	r0, [pc, #332]	@ (8004974 <_printf_i+0x238>)
 8004828:	6033      	str	r3, [r6, #0]
 800482a:	bf14      	ite	ne
 800482c:	230a      	movne	r3, #10
 800482e:	2308      	moveq	r3, #8
 8004830:	2100      	movs	r1, #0
 8004832:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004836:	6866      	ldr	r6, [r4, #4]
 8004838:	60a6      	str	r6, [r4, #8]
 800483a:	2e00      	cmp	r6, #0
 800483c:	bfa2      	ittt	ge
 800483e:	6821      	ldrge	r1, [r4, #0]
 8004840:	f021 0104 	bicge.w	r1, r1, #4
 8004844:	6021      	strge	r1, [r4, #0]
 8004846:	b90d      	cbnz	r5, 800484c <_printf_i+0x110>
 8004848:	2e00      	cmp	r6, #0
 800484a:	d04b      	beq.n	80048e4 <_printf_i+0x1a8>
 800484c:	4616      	mov	r6, r2
 800484e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004852:	fb03 5711 	mls	r7, r3, r1, r5
 8004856:	5dc7      	ldrb	r7, [r0, r7]
 8004858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800485c:	462f      	mov	r7, r5
 800485e:	42bb      	cmp	r3, r7
 8004860:	460d      	mov	r5, r1
 8004862:	d9f4      	bls.n	800484e <_printf_i+0x112>
 8004864:	2b08      	cmp	r3, #8
 8004866:	d10b      	bne.n	8004880 <_printf_i+0x144>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	07df      	lsls	r7, r3, #31
 800486c:	d508      	bpl.n	8004880 <_printf_i+0x144>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	6861      	ldr	r1, [r4, #4]
 8004872:	4299      	cmp	r1, r3
 8004874:	bfde      	ittt	le
 8004876:	2330      	movle	r3, #48	@ 0x30
 8004878:	f806 3c01 	strble.w	r3, [r6, #-1]
 800487c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004880:	1b92      	subs	r2, r2, r6
 8004882:	6122      	str	r2, [r4, #16]
 8004884:	f8cd a000 	str.w	sl, [sp]
 8004888:	464b      	mov	r3, r9
 800488a:	aa03      	add	r2, sp, #12
 800488c:	4621      	mov	r1, r4
 800488e:	4640      	mov	r0, r8
 8004890:	f7ff fee6 	bl	8004660 <_printf_common>
 8004894:	3001      	adds	r0, #1
 8004896:	d14a      	bne.n	800492e <_printf_i+0x1f2>
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	b004      	add	sp, #16
 800489e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f043 0320 	orr.w	r3, r3, #32
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	4833      	ldr	r0, [pc, #204]	@ (8004978 <_printf_i+0x23c>)
 80048ac:	2778      	movs	r7, #120	@ 0x78
 80048ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	6831      	ldr	r1, [r6, #0]
 80048b6:	061f      	lsls	r7, r3, #24
 80048b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80048bc:	d402      	bmi.n	80048c4 <_printf_i+0x188>
 80048be:	065f      	lsls	r7, r3, #25
 80048c0:	bf48      	it	mi
 80048c2:	b2ad      	uxthmi	r5, r5
 80048c4:	6031      	str	r1, [r6, #0]
 80048c6:	07d9      	lsls	r1, r3, #31
 80048c8:	bf44      	itt	mi
 80048ca:	f043 0320 	orrmi.w	r3, r3, #32
 80048ce:	6023      	strmi	r3, [r4, #0]
 80048d0:	b11d      	cbz	r5, 80048da <_printf_i+0x19e>
 80048d2:	2310      	movs	r3, #16
 80048d4:	e7ac      	b.n	8004830 <_printf_i+0xf4>
 80048d6:	4827      	ldr	r0, [pc, #156]	@ (8004974 <_printf_i+0x238>)
 80048d8:	e7e9      	b.n	80048ae <_printf_i+0x172>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f023 0320 	bic.w	r3, r3, #32
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	e7f6      	b.n	80048d2 <_printf_i+0x196>
 80048e4:	4616      	mov	r6, r2
 80048e6:	e7bd      	b.n	8004864 <_printf_i+0x128>
 80048e8:	6833      	ldr	r3, [r6, #0]
 80048ea:	6825      	ldr	r5, [r4, #0]
 80048ec:	6961      	ldr	r1, [r4, #20]
 80048ee:	1d18      	adds	r0, r3, #4
 80048f0:	6030      	str	r0, [r6, #0]
 80048f2:	062e      	lsls	r6, r5, #24
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	d501      	bpl.n	80048fc <_printf_i+0x1c0>
 80048f8:	6019      	str	r1, [r3, #0]
 80048fa:	e002      	b.n	8004902 <_printf_i+0x1c6>
 80048fc:	0668      	lsls	r0, r5, #25
 80048fe:	d5fb      	bpl.n	80048f8 <_printf_i+0x1bc>
 8004900:	8019      	strh	r1, [r3, #0]
 8004902:	2300      	movs	r3, #0
 8004904:	6123      	str	r3, [r4, #16]
 8004906:	4616      	mov	r6, r2
 8004908:	e7bc      	b.n	8004884 <_printf_i+0x148>
 800490a:	6833      	ldr	r3, [r6, #0]
 800490c:	1d1a      	adds	r2, r3, #4
 800490e:	6032      	str	r2, [r6, #0]
 8004910:	681e      	ldr	r6, [r3, #0]
 8004912:	6862      	ldr	r2, [r4, #4]
 8004914:	2100      	movs	r1, #0
 8004916:	4630      	mov	r0, r6
 8004918:	f7fb fc5a 	bl	80001d0 <memchr>
 800491c:	b108      	cbz	r0, 8004922 <_printf_i+0x1e6>
 800491e:	1b80      	subs	r0, r0, r6
 8004920:	6060      	str	r0, [r4, #4]
 8004922:	6863      	ldr	r3, [r4, #4]
 8004924:	6123      	str	r3, [r4, #16]
 8004926:	2300      	movs	r3, #0
 8004928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800492c:	e7aa      	b.n	8004884 <_printf_i+0x148>
 800492e:	6923      	ldr	r3, [r4, #16]
 8004930:	4632      	mov	r2, r6
 8004932:	4649      	mov	r1, r9
 8004934:	4640      	mov	r0, r8
 8004936:	47d0      	blx	sl
 8004938:	3001      	adds	r0, #1
 800493a:	d0ad      	beq.n	8004898 <_printf_i+0x15c>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	079b      	lsls	r3, r3, #30
 8004940:	d413      	bmi.n	800496a <_printf_i+0x22e>
 8004942:	68e0      	ldr	r0, [r4, #12]
 8004944:	9b03      	ldr	r3, [sp, #12]
 8004946:	4298      	cmp	r0, r3
 8004948:	bfb8      	it	lt
 800494a:	4618      	movlt	r0, r3
 800494c:	e7a6      	b.n	800489c <_printf_i+0x160>
 800494e:	2301      	movs	r3, #1
 8004950:	4632      	mov	r2, r6
 8004952:	4649      	mov	r1, r9
 8004954:	4640      	mov	r0, r8
 8004956:	47d0      	blx	sl
 8004958:	3001      	adds	r0, #1
 800495a:	d09d      	beq.n	8004898 <_printf_i+0x15c>
 800495c:	3501      	adds	r5, #1
 800495e:	68e3      	ldr	r3, [r4, #12]
 8004960:	9903      	ldr	r1, [sp, #12]
 8004962:	1a5b      	subs	r3, r3, r1
 8004964:	42ab      	cmp	r3, r5
 8004966:	dcf2      	bgt.n	800494e <_printf_i+0x212>
 8004968:	e7eb      	b.n	8004942 <_printf_i+0x206>
 800496a:	2500      	movs	r5, #0
 800496c:	f104 0619 	add.w	r6, r4, #25
 8004970:	e7f5      	b.n	800495e <_printf_i+0x222>
 8004972:	bf00      	nop
 8004974:	08004c4d 	.word	0x08004c4d
 8004978:	08004c5e 	.word	0x08004c5e

0800497c <__sflush_r>:
 800497c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004984:	0716      	lsls	r6, r2, #28
 8004986:	4605      	mov	r5, r0
 8004988:	460c      	mov	r4, r1
 800498a:	d454      	bmi.n	8004a36 <__sflush_r+0xba>
 800498c:	684b      	ldr	r3, [r1, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	dc02      	bgt.n	8004998 <__sflush_r+0x1c>
 8004992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	dd48      	ble.n	8004a2a <__sflush_r+0xae>
 8004998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800499a:	2e00      	cmp	r6, #0
 800499c:	d045      	beq.n	8004a2a <__sflush_r+0xae>
 800499e:	2300      	movs	r3, #0
 80049a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049a4:	682f      	ldr	r7, [r5, #0]
 80049a6:	6a21      	ldr	r1, [r4, #32]
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	d030      	beq.n	8004a0e <__sflush_r+0x92>
 80049ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	0759      	lsls	r1, r3, #29
 80049b2:	d505      	bpl.n	80049c0 <__sflush_r+0x44>
 80049b4:	6863      	ldr	r3, [r4, #4]
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049ba:	b10b      	cbz	r3, 80049c0 <__sflush_r+0x44>
 80049bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	2300      	movs	r3, #0
 80049c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049c4:	6a21      	ldr	r1, [r4, #32]
 80049c6:	4628      	mov	r0, r5
 80049c8:	47b0      	blx	r6
 80049ca:	1c43      	adds	r3, r0, #1
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	d106      	bne.n	80049de <__sflush_r+0x62>
 80049d0:	6829      	ldr	r1, [r5, #0]
 80049d2:	291d      	cmp	r1, #29
 80049d4:	d82b      	bhi.n	8004a2e <__sflush_r+0xb2>
 80049d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a80 <__sflush_r+0x104>)
 80049d8:	410a      	asrs	r2, r1
 80049da:	07d6      	lsls	r6, r2, #31
 80049dc:	d427      	bmi.n	8004a2e <__sflush_r+0xb2>
 80049de:	2200      	movs	r2, #0
 80049e0:	6062      	str	r2, [r4, #4]
 80049e2:	04d9      	lsls	r1, r3, #19
 80049e4:	6922      	ldr	r2, [r4, #16]
 80049e6:	6022      	str	r2, [r4, #0]
 80049e8:	d504      	bpl.n	80049f4 <__sflush_r+0x78>
 80049ea:	1c42      	adds	r2, r0, #1
 80049ec:	d101      	bne.n	80049f2 <__sflush_r+0x76>
 80049ee:	682b      	ldr	r3, [r5, #0]
 80049f0:	b903      	cbnz	r3, 80049f4 <__sflush_r+0x78>
 80049f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80049f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049f6:	602f      	str	r7, [r5, #0]
 80049f8:	b1b9      	cbz	r1, 8004a2a <__sflush_r+0xae>
 80049fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049fe:	4299      	cmp	r1, r3
 8004a00:	d002      	beq.n	8004a08 <__sflush_r+0x8c>
 8004a02:	4628      	mov	r0, r5
 8004a04:	f7ff fbf2 	bl	80041ec <_free_r>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a0c:	e00d      	b.n	8004a2a <__sflush_r+0xae>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b0      	blx	r6
 8004a14:	4602      	mov	r2, r0
 8004a16:	1c50      	adds	r0, r2, #1
 8004a18:	d1c9      	bne.n	80049ae <__sflush_r+0x32>
 8004a1a:	682b      	ldr	r3, [r5, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0c6      	beq.n	80049ae <__sflush_r+0x32>
 8004a20:	2b1d      	cmp	r3, #29
 8004a22:	d001      	beq.n	8004a28 <__sflush_r+0xac>
 8004a24:	2b16      	cmp	r3, #22
 8004a26:	d11e      	bne.n	8004a66 <__sflush_r+0xea>
 8004a28:	602f      	str	r7, [r5, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e022      	b.n	8004a74 <__sflush_r+0xf8>
 8004a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a32:	b21b      	sxth	r3, r3
 8004a34:	e01b      	b.n	8004a6e <__sflush_r+0xf2>
 8004a36:	690f      	ldr	r7, [r1, #16]
 8004a38:	2f00      	cmp	r7, #0
 8004a3a:	d0f6      	beq.n	8004a2a <__sflush_r+0xae>
 8004a3c:	0793      	lsls	r3, r2, #30
 8004a3e:	680e      	ldr	r6, [r1, #0]
 8004a40:	bf08      	it	eq
 8004a42:	694b      	ldreq	r3, [r1, #20]
 8004a44:	600f      	str	r7, [r1, #0]
 8004a46:	bf18      	it	ne
 8004a48:	2300      	movne	r3, #0
 8004a4a:	eba6 0807 	sub.w	r8, r6, r7
 8004a4e:	608b      	str	r3, [r1, #8]
 8004a50:	f1b8 0f00 	cmp.w	r8, #0
 8004a54:	dde9      	ble.n	8004a2a <__sflush_r+0xae>
 8004a56:	6a21      	ldr	r1, [r4, #32]
 8004a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a5a:	4643      	mov	r3, r8
 8004a5c:	463a      	mov	r2, r7
 8004a5e:	4628      	mov	r0, r5
 8004a60:	47b0      	blx	r6
 8004a62:	2800      	cmp	r0, #0
 8004a64:	dc08      	bgt.n	8004a78 <__sflush_r+0xfc>
 8004a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a6e:	81a3      	strh	r3, [r4, #12]
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a78:	4407      	add	r7, r0
 8004a7a:	eba8 0800 	sub.w	r8, r8, r0
 8004a7e:	e7e7      	b.n	8004a50 <__sflush_r+0xd4>
 8004a80:	dfbffffe 	.word	0xdfbffffe

08004a84 <_fflush_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	690b      	ldr	r3, [r1, #16]
 8004a88:	4605      	mov	r5, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	b913      	cbnz	r3, 8004a94 <_fflush_r+0x10>
 8004a8e:	2500      	movs	r5, #0
 8004a90:	4628      	mov	r0, r5
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	b118      	cbz	r0, 8004a9e <_fflush_r+0x1a>
 8004a96:	6a03      	ldr	r3, [r0, #32]
 8004a98:	b90b      	cbnz	r3, 8004a9e <_fflush_r+0x1a>
 8004a9a:	f7ff fa0b 	bl	8003eb4 <__sinit>
 8004a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f3      	beq.n	8004a8e <_fflush_r+0xa>
 8004aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004aa8:	07d0      	lsls	r0, r2, #31
 8004aaa:	d404      	bmi.n	8004ab6 <_fflush_r+0x32>
 8004aac:	0599      	lsls	r1, r3, #22
 8004aae:	d402      	bmi.n	8004ab6 <_fflush_r+0x32>
 8004ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ab2:	f7ff fb98 	bl	80041e6 <__retarget_lock_acquire_recursive>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	4621      	mov	r1, r4
 8004aba:	f7ff ff5f 	bl	800497c <__sflush_r>
 8004abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ac0:	07da      	lsls	r2, r3, #31
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	d4e4      	bmi.n	8004a90 <_fflush_r+0xc>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	059b      	lsls	r3, r3, #22
 8004aca:	d4e1      	bmi.n	8004a90 <_fflush_r+0xc>
 8004acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ace:	f7ff fb8b 	bl	80041e8 <__retarget_lock_release_recursive>
 8004ad2:	e7dd      	b.n	8004a90 <_fflush_r+0xc>

08004ad4 <__swhatbuf_r>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004adc:	2900      	cmp	r1, #0
 8004ade:	b096      	sub	sp, #88	@ 0x58
 8004ae0:	4615      	mov	r5, r2
 8004ae2:	461e      	mov	r6, r3
 8004ae4:	da0d      	bge.n	8004b02 <__swhatbuf_r+0x2e>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004aec:	f04f 0100 	mov.w	r1, #0
 8004af0:	bf14      	ite	ne
 8004af2:	2340      	movne	r3, #64	@ 0x40
 8004af4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004af8:	2000      	movs	r0, #0
 8004afa:	6031      	str	r1, [r6, #0]
 8004afc:	602b      	str	r3, [r5, #0]
 8004afe:	b016      	add	sp, #88	@ 0x58
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
 8004b02:	466a      	mov	r2, sp
 8004b04:	f000 f848 	bl	8004b98 <_fstat_r>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	dbec      	blt.n	8004ae6 <__swhatbuf_r+0x12>
 8004b0c:	9901      	ldr	r1, [sp, #4]
 8004b0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b16:	4259      	negs	r1, r3
 8004b18:	4159      	adcs	r1, r3
 8004b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b1e:	e7eb      	b.n	8004af8 <__swhatbuf_r+0x24>

08004b20 <__smakebuf_r>:
 8004b20:	898b      	ldrh	r3, [r1, #12]
 8004b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b24:	079d      	lsls	r5, r3, #30
 8004b26:	4606      	mov	r6, r0
 8004b28:	460c      	mov	r4, r1
 8004b2a:	d507      	bpl.n	8004b3c <__smakebuf_r+0x1c>
 8004b2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	6123      	str	r3, [r4, #16]
 8004b34:	2301      	movs	r3, #1
 8004b36:	6163      	str	r3, [r4, #20]
 8004b38:	b003      	add	sp, #12
 8004b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b3c:	ab01      	add	r3, sp, #4
 8004b3e:	466a      	mov	r2, sp
 8004b40:	f7ff ffc8 	bl	8004ad4 <__swhatbuf_r>
 8004b44:	9f00      	ldr	r7, [sp, #0]
 8004b46:	4605      	mov	r5, r0
 8004b48:	4639      	mov	r1, r7
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7ff fbba 	bl	80042c4 <_malloc_r>
 8004b50:	b948      	cbnz	r0, 8004b66 <__smakebuf_r+0x46>
 8004b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b56:	059a      	lsls	r2, r3, #22
 8004b58:	d4ee      	bmi.n	8004b38 <__smakebuf_r+0x18>
 8004b5a:	f023 0303 	bic.w	r3, r3, #3
 8004b5e:	f043 0302 	orr.w	r3, r3, #2
 8004b62:	81a3      	strh	r3, [r4, #12]
 8004b64:	e7e2      	b.n	8004b2c <__smakebuf_r+0xc>
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	6020      	str	r0, [r4, #0]
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b6e:	81a3      	strh	r3, [r4, #12]
 8004b70:	9b01      	ldr	r3, [sp, #4]
 8004b72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b76:	b15b      	cbz	r3, 8004b90 <__smakebuf_r+0x70>
 8004b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f000 f81d 	bl	8004bbc <_isatty_r>
 8004b82:	b128      	cbz	r0, 8004b90 <__smakebuf_r+0x70>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	431d      	orrs	r5, r3
 8004b94:	81a5      	strh	r5, [r4, #12]
 8004b96:	e7cf      	b.n	8004b38 <__smakebuf_r+0x18>

08004b98 <_fstat_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4d07      	ldr	r5, [pc, #28]	@ (8004bb8 <_fstat_r+0x20>)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	602b      	str	r3, [r5, #0]
 8004ba6:	f7fb ffcc 	bl	8000b42 <_fstat>
 8004baa:	1c43      	adds	r3, r0, #1
 8004bac:	d102      	bne.n	8004bb4 <_fstat_r+0x1c>
 8004bae:	682b      	ldr	r3, [r5, #0]
 8004bb0:	b103      	cbz	r3, 8004bb4 <_fstat_r+0x1c>
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	bd38      	pop	{r3, r4, r5, pc}
 8004bb6:	bf00      	nop
 8004bb8:	2000039c 	.word	0x2000039c

08004bbc <_isatty_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4d06      	ldr	r5, [pc, #24]	@ (8004bd8 <_isatty_r+0x1c>)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	f7fb ffcb 	bl	8000b62 <_isatty>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_isatty_r+0x1a>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_isatty_r+0x1a>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	2000039c 	.word	0x2000039c

08004bdc <_sbrk_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d06      	ldr	r5, [pc, #24]	@ (8004bf8 <_sbrk_r+0x1c>)
 8004be0:	2300      	movs	r3, #0
 8004be2:	4604      	mov	r4, r0
 8004be4:	4608      	mov	r0, r1
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	f7fb ffd4 	bl	8000b94 <_sbrk>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <_sbrk_r+0x1a>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	b103      	cbz	r3, 8004bf6 <_sbrk_r+0x1a>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	2000039c 	.word	0x2000039c

08004bfc <_init>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	bf00      	nop
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr

08004c08 <_fini>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr
